{"version":3,"file":"76.js","sources":["webpack://assets/./src/data/relatedButtonColors.ts","webpack://assets/./src/components/related-button.tsx","webpack://assets/./src/components/article-panel.tsx"],"sourcesContent":["export default [\n    [\n        \"International\",\n        \"red\"\n    ],\n    [\n        \"International City\",\n        \"red\"\n    ],\n    [\n        \"US Subdivision\",\n        \"blue\"\n    ],\n    [\n        \"US City\",\n        \"blue\"\n    ],\n    [\n        \"Census\",\n        \"cyan\"\n    ],\n    [\n        \"Political\",\n        \"purple\"\n    ],\n    [\n        \"Oddball\",\n        \"darkGrey\"\n    ],\n    [\n        \"Kavi\",\n        \"brown\"\n    ],\n    [\n        \"School\",\n        \"yellow\"\n    ],\n    [\n        \"Small\",\n        \"pink\"\n    ],\n    [\n        \"Native\",\n        \"green\"\n    ]\n] as const","import React, { ReactNode, useContext, useId } from 'react'\n\nimport relatedButtonColors from '../data/relatedButtonColors'\nimport type_ordering_idx from '../data/type_ordering_idx'\nimport type_to_type_category from '../data/type_to_type_category'\nimport { Navigator } from '../navigation/Navigator'\nimport { HueColors } from '../page_template/color-themes'\nimport { useColors } from '../page_template/colors'\nimport { relationshipKey, useSetting } from '../page_template/settings'\nimport { useUniverse } from '../universe'\nimport { DefaultMap } from '../utils/DefaultMap'\nimport { mixWithBackground } from '../utils/color'\nimport { isHistoricalCD } from '../utils/is_historical'\nimport { useMobileLayout } from '../utils/responsive'\nimport { displayType } from '../utils/text'\n\nimport { CheckboxSetting } from './sidebar'\n\ninterface Region { rowType: string, longname: string, shortname: string }\n\nconst propForRegionTypes = 0.20\nconst spacing = 2\n\nfunction colorsEach(colors: HueColors): Record<string, string> {\n    const keys: [string, string][] = relatedButtonColors.map(\n        ([typ, color]) => [typ, colors[color]],\n    )\n    return Object.fromEntries(keys)\n}\n\nfunction useRelatedColor(rowType: string, colorIntensity: number): string {\n    const colors = useColors()\n    const typeCategory = type_to_type_category[rowType]\n    const color = colorsEach(colors.hueColors)[typeCategory]\n    return mixWithBackground(color, (colors.mixPct + (100 - colors.mixPct) * (1 - colorIntensity)) / 100, colors.background)\n}\n\nfunction RelatedButton(props: { region: Region }): ReactNode {\n    const currentUniverse = useUniverse()\n    const colors = useColors()\n    const navContext = useContext(Navigator.Context)\n    return (\n        <li style={{\n            display: 'flex',\n            margin: `${spacing}px`,\n        }}\n        >\n            <a\n                className=\"serif\"\n                style={{\n                    color: colors.textMain,\n                    backgroundColor: useRelatedColor(props.region.rowType, 1),\n                    textDecoration: 'none',\n                    padding: '2px 6px 2px 6px',\n                    borderRadius: '5px',\n                    fontWeight: 400,\n                    fontSize: useMobileLayout() ? '12pt' : '8pt',\n                }}\n                {...navContext.link(\n                    { kind: 'article', longname: props.region.longname, universe: currentUniverse },\n                    { scroll: { kind: 'position', top: 0 } },\n                )}\n            >\n                {props.region.shortname}\n            </a>\n        </li>\n    )\n}\n\nfunction Label(props: { checkId: string, children: ReactNode, fontWeight: number }): ReactNode {\n    return (\n        <div\n            className=\"serif\"\n            style={{\n                fontSize: useMobileLayout() ? '12pt' : '10pt',\n                fontWeight: props.fontWeight,\n                alignContent: 'center',\n                margin: `${spacing}px`,\n            }}\n        >\n            <label htmlFor={props.checkId}>\n                {props.children}\n            </label>\n        </div>\n    )\n}\n\nfunction RelationshipGroup(props: { regions: Region[], checkId: string, relationshipType: string, groupIndex: number, buttonType: string, numGroups: number }): ReactNode {\n    function displayName(name: string): string {\n        name = name.replaceAll('_', ' ')\n        // title case\n        name = name.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.slice(1).toLowerCase()\n        })\n        return name\n    }\n\n    const backgroundColor = useRelatedColor(props.buttonType, props.groupIndex % 2 === 0 ? 0.3 : 0.4)\n\n    return (\n        <ul\n            style={{\n                display: 'flex',\n                flexFlow: 'row wrap',\n                paddingInlineStart: '0px',\n                listStyleType: 'none',\n                padding: `${spacing}px`,\n                ...(props.numGroups > 1\n                    ? {\n                            backgroundColor,\n                            // Border radius if first or last group\n                            borderRadius: props.groupIndex === 0 ? '5px 5px 0 0' : (props.groupIndex === props.numGroups - 1 ? '0 0 5px 5px' : undefined),\n                            paddingLeft: `${2 * spacing}px`,\n                        }\n                    : {}),\n            }}\n        >\n            <Label checkId={props.checkId} fontWeight={400}>\n                {displayName(props.relationshipType)}\n            </Label>\n            {\n                props.regions.map((row, i) => (\n                    <RelatedButton\n                        key={i}\n                        region={row}\n                    />\n                ),\n                )\n            }\n        </ul>\n    )\n}\n\nfunction Row(props: {\n    articleType: string\n    buttonType: string\n    regions: Map<string, Region[]>\n    rowIndex: number\n    totalRows: number\n}): ReactNode {\n    const settingKey = relationshipKey(props.articleType, props.buttonType)\n\n    const checkId = useId()\n\n    const universe = useUniverse()\n\n    return (\n        <li style={{\n            paddingInlineStart: '0px',\n            listStyleType: 'none',\n            margin: 0,\n            width: '100%',\n            display: 'flex',\n            alignItems: 'center',\n            position: 'relative',\n            backgroundColor: useRelatedColor(props.buttonType, props.rowIndex % 2 === 0 ? 0.1 : 0.2),\n            // Border radius if first or last row\n            borderRadius: props.rowIndex === 0 ? '5px 5px 0 0' : (props.rowIndex === props.totalRows - 1 ? '0 0 5px 5px' : undefined),\n        }}\n        >\n            <div style={{\n                display: 'flex',\n                width: `${100 * propForRegionTypes}%`,\n                alignItems: 'center',\n            }}\n            >\n                <CheckboxSetting\n                    name=\"\"\n                    settingKey={settingKey}\n                    classNameToUse=\"related_checkbox\"\n                    id={checkId}\n                />\n                <Label checkId={checkId} fontWeight={500}>\n                    {displayType(universe, props.buttonType)}\n                </Label>\n            </div>\n            <ul style={{\n                paddingInlineStart: '0px',\n                listStyleType: 'none',\n                margin: 0,\n                width: `${100 * (1 - propForRegionTypes)}%`,\n                display: 'flex',\n                flexDirection: 'column',\n                padding: props.regions.size > 1 ? `${2 * spacing}px` : `0 0 0 ${3 * spacing}px`,\n            }}\n            >\n                {\n                    Array.from(props.regions).map(([relationshipType, regions], i) => {\n                        return (\n                            <RelationshipGroup\n                                key={relationshipType}\n                                regions={regions}\n                                checkId={checkId}\n                                relationshipType={relationshipType}\n                                groupIndex={i}\n                                buttonType={props.buttonType}\n                                numGroups={props.regions.size}\n                            />\n                        )\n                    })\n                }\n            </ul>\n        </li>\n    )\n}\n\nexport function Related(props: { articleType: string, related: { relationshipType: string, buttons: Region[] }[] }): ReactNode {\n    // buttons[rowType][relationshipType] = <list of buttons>\n    const [showHistoricalCds] = useSetting('show_historical_cds')\n    const buttons = new DefaultMap<string, DefaultMap<string, Region[]>>(() => new DefaultMap(() => []))\n    for (const relateds of props.related) {\n        for (const button of relateds.buttons) {\n            buttons.get(button.rowType).get(relateds.relationshipType).push(button)\n        }\n    }\n\n    // get a sorted list of keys of buttons\n    const buttonKeys = Array.from(buttons.keys())\n        .sort((a, b) => type_ordering_idx[a] - type_ordering_idx[b])\n        .filter(buttonKey => showHistoricalCds || !isHistoricalCD(buttonKey))\n\n    const elements = buttonKeys.map((key, i) => (\n        <Row\n            key={key}\n            buttonType={key}\n            regions={buttons.get(key)}\n            articleType={props.articleType}\n            rowIndex={i}\n            totalRows={buttonKeys.length}\n        />\n    ))\n\n    return (\n        <ul style={{\n            margin: '1em 0',\n            paddingInlineStart: '0px',\n            listStyleType: 'none',\n        }}\n        >\n            {elements}\n        </ul>\n    )\n}\n","import '../common.css'\nimport './article.css'\n\nimport React, { ReactNode, useContext, useRef } from 'react'\n\nimport { Navigator } from '../navigation/Navigator'\nimport { sanitize } from '../navigation/links'\nimport { useColors } from '../page_template/colors'\nimport { rowExpandedKey, useSetting, useSettings } from '../page_template/settings'\nimport { groupYearKeys, StatGroupSettings } from '../page_template/statistic-settings'\nimport { PageTemplate } from '../page_template/template'\nimport { useUniverse } from '../universe'\nimport { Article, IRelatedButtons } from '../utils/protos'\nimport { useComparisonHeadStyle, useHeaderTextClass, useSubHeaderTextClass } from '../utils/responsive'\nimport { NormalizeProto } from '../utils/types'\n\nimport { ArticleWarnings } from './ArticleWarnings'\nimport { QuerySettingsConnection } from './QuerySettingsConnection'\nimport { ArticleRow } from './load-article'\nimport { Map } from './map'\nimport { RenderedPlot } from './plots'\nimport { Related } from './related-button'\nimport { ScreencapElements } from './screenshot'\nimport { SearchBox } from './search'\nimport { StatisticHeaderCells, StatisticRowCells, TableHeaderContainer, TableRowContainer } from './table'\n\nexport function ArticlePanel({ article, rows }: { article: Article, rows: (settings: StatGroupSettings) => ArticleRow[][] }): ReactNode {\n    const headersRef = useRef<HTMLDivElement>(null)\n    const tableRef = useRef<HTMLDivElement>(null)\n    const mapRef = useRef<HTMLDivElement>(null)\n\n    const screencapElements = (): ScreencapElements => ({\n        path: `${sanitize(article.longname)}.png`,\n        overallWidth: tableRef.current!.offsetWidth * 2,\n        elementsToRender: [headersRef.current!, tableRef.current!, mapRef.current!],\n    })\n\n    const headerTextClass = useHeaderTextClass()\n    const subHeaderTextClass = useSubHeaderTextClass()\n    const comparisonHeadStyle = useComparisonHeadStyle('right')\n\n    const settings = useSettings(groupYearKeys())\n    const filteredRows = rows(settings)[0]\n\n    return (\n        <>\n            <QuerySettingsConnection />\n            <PageTemplate screencapElements={screencapElements} hasUniverseSelector={true} universes={article.universes}>\n                <div>\n                    <div ref={headersRef}>\n                        <div className={headerTextClass}>{article.shortname}</div>\n                        <div className={subHeaderTextClass}>{article.longname}</div>\n                    </div>\n                    <div style={{ marginBlockEnd: '16px' }}></div>\n\n                    <div className=\"stats_table\" ref={tableRef}>\n                        <StatisticTableHeader />\n                        {filteredRows.map((row, index) => (\n                            <StatisticTableRow\n                                row={row}\n                                index={index}\n                                key={row.statpath}\n                                longname={article.longname}\n                                shortname={article.shortname}\n                            />\n                        ))}\n                        <ArticleWarnings />\n                    </div>\n\n                    <p></p>\n\n                    <div ref={mapRef}>\n                        <Map\n                            longname={article.longname}\n                            related={article.related as NormalizeProto<IRelatedButtons>[]}\n                            articleType={article.articleType}\n                            basemap={{ type: 'osm' }}\n                            attribution=\"startVisible\"\n                        />\n                    </div>\n\n                    <div style={{ marginBlockEnd: '1em' }}></div>\n\n                    <div style={{ display: 'flex', alignItems: 'center' }}>\n                        <div style={{ width: '30%', marginRight: '1em' }}>\n                            <div className=\"serif\" style={comparisonHeadStyle}>Compare to: </div>\n                        </div>\n                        <div style={{ width: '70%' }}>\n                            <ComparisonSearchBox longname={article.longname} type={article.articleType} />\n                        </div>\n                    </div>\n\n                    <Related\n                        related={article.related as NormalizeProto<IRelatedButtons>[]}\n                        articleType={article.articleType}\n                    />\n                </div>\n            </PageTemplate>\n        </>\n    )\n}\n\nfunction ComparisonSearchBox({ longname, type }: { longname: string, type: string }): ReactNode {\n    const currentUniverse = useUniverse()\n    const navContext = useContext(Navigator.Context)\n    return (\n        <SearchBox\n            style={{ ...useComparisonHeadStyle(), width: '100%' }}\n            placeholder=\"Other region...\"\n            link={x => navContext.link({\n                kind: 'comparison',\n                universe: currentUniverse,\n                longnames: [longname, x],\n            }, { scroll: { kind: 'position', top: 0 } })}\n            autoFocus={false}\n            prioritizeArticleType={type}\n        />\n    )\n}\n\nfunction StatisticTableHeader(): ReactNode {\n    const [simpleOrdinals] = useSetting('simple_ordinals')\n    return (\n        <TableHeaderContainer>\n            <StatisticHeaderCells simpleOrdinals={simpleOrdinals} totalWidth={100} />\n        </TableHeaderContainer>\n    )\n}\n\nfunction StatisticTableRow(props: { shortname: string, longname: string, row: ArticleRow, index: number }): ReactNode {\n    const colors = useColors()\n    const [expanded] = useSetting(rowExpandedKey(props.row.statpath))\n    const currentUniverse = useUniverse()\n    const [simpleOrdinals] = useSetting('simple_ordinals')\n    const navContext = useContext(Navigator.Context)\n\n    return (\n        <>\n            <TableRowContainer index={props.index}>\n                <StatisticRowCells\n                    totalWidth={100}\n                    longname={props.longname}\n                    row={props.row}\n                    onNavigate={(newArticle) => {\n                        void navContext.navigate({\n                            kind: 'article',\n                            longname: newArticle,\n                            universe: currentUniverse,\n                        }, { history: 'push', scroll: { kind: 'none' } })\n                    }}\n                    simpleOrdinals={simpleOrdinals}\n                />\n            </TableRowContainer>\n            {expanded\n                ? (\n                        <div style={{ width: '100%', position: 'relative' }}>\n                            <RenderedPlot statDescription={props.row.renderedStatname} plotProps={[{ ...props.row, color: colors.hueColors.blue, shortname: props.shortname }]} />\n                        </div>\n                    )\n                : null}\n        </>\n    )\n}\n"],"names":["useRelatedColor","rowType","colorIntensity","colors","useColors","typeCategory","type_to_type_category","color","colorsEach","Object","relatedButtonColors","typ","mixWithBackground","RelatedButton","props","currentUniverse","useUniverse","navContext","useContext","Navigator","useMobileLayout","Label","RelationshipGroup","name","backgroundColor","undefined","txt","row","i","Row","settingKey","relationshipKey","checkId","useId","universe","CheckboxSetting","displayType","Array","relationshipType","regions","Related","showHistoricalCds","_useSetting","buttons","DefaultMap","_iteratorError","relateds","_iteratorError1","button","buttonKeys","a","b","type_ordering_idx","buttonKey","isHistoricalCD","elements","key","ArticlePanel","param","article","rows","headersRef","useRef","tableRef","mapRef","headerTextClass","useHeaderTextClass","subHeaderTextClass","useSubHeaderTextClass","comparisonHeadStyle","useComparisonHeadStyle","filteredRows","useSettings","groupYearKeys","QuerySettingsConnection","PageTemplate","sanitize","StatisticTableHeader","index","StatisticTableRow","ArticleWarnings","Map","ComparisonSearchBox","longname","type","SearchBox","x","simpleOrdinals","TableHeaderContainer","StatisticHeaderCells","expanded","rowExpandedKey","_useSetting1","TableRowContainer","StatisticRowCells","newArticle","RenderedPlot"],"mappings":"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"}