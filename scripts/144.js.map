{"version":3,"file":"144.js","sources":["webpack://assets/./src/quiz/friends.ts"],"sourcesContent":["import { persistentClient } from '../utils/urbanstats-persistent-client'\n\nimport { AuthenticationStateMachine } from './AuthenticationStateMachine'\nimport { QuizModel } from './quiz'\n\nexport async function addFriend(friendID: string, friendName: string): Promise<undefined | { errorMessage: string, problemDomain: 'friendID' | 'friendName' | 'other' }> {\n    const user = QuizModel.shared.uniquePersistentId.value\n    const email = AuthenticationStateMachine.shared.state.email\n    const idOrEmail = 'Friend ID or Email'\n    if (friendID === '') {\n        return { errorMessage: `${idOrEmail} cannot be empty`, problemDomain: 'friendID' }\n    }\n    if (friendID === user) {\n        return { errorMessage: 'Friend ID cannot be your own ID', problemDomain: 'friendID' }\n    }\n    if (friendID === email) {\n        return { errorMessage: 'Friend Email cannot be your own Email', problemDomain: 'friendID' }\n    }\n    let dupFriend\n    if ((dupFriend = QuizModel.shared.friends.value.find(([name, id]) => name !== null && id === friendID))) {\n        return { errorMessage: `${idOrEmail} ${friendID} already exists as ${dupFriend[0]}`, problemDomain: 'friendID' }\n    }\n    if (friendName === '') {\n        return { errorMessage: 'Friend name cannot be empty', problemDomain: 'friendName' }\n    }\n    if (QuizModel.shared.friends.value.map(x => x[0]).includes(friendName)) {\n        return { errorMessage: 'Friend name already exists', problemDomain: 'friendName' }\n    }\n    try {\n        const { response, error } = await persistentClient.POST('/juxtastat/friend_request', {\n            body: { requestee: friendID },\n            params: {\n                header: QuizModel.shared.userHeaders(),\n            },\n        })\n\n        if (response.status === 422) {\n            return { errorMessage: `Invalid ${idOrEmail}`, problemDomain: 'friendID' }\n        }\n        if (error !== undefined) {\n            return { errorMessage: 'Unknown Error', problemDomain: 'other' }\n        }\n\n        QuizModel.shared.friends.value = [...QuizModel.shared.friends.value.filter(([,id]) => id !== friendID), [friendName, friendID, Date.now()]]\n        return undefined\n    }\n    catch {\n        return { errorMessage: 'Network Error', problemDomain: 'other' }\n    }\n}\n\nexport async function addFriendFromLink(friendID: string, friendName: string): Promise<void> {\n    const result = await addFriend(friendID, friendName)\n    if (result === undefined) {\n        alert(`Friend added: ${friendName} !`)\n    }\n    else {\n        if (result.problemDomain === 'friendName') {\n            const newFriendName = prompt(`Could not add friend: ${result.errorMessage}\\n\\nPlease correct the friend name:`, friendName)\n            if (newFriendName !== null) {\n                await addFriendFromLink(friendID, newFriendName.trim())\n            }\n        }\n        else {\n            alert(`Could not add friend: ${result.errorMessage}`)\n        }\n    }\n}\n"],"names":["addFriendFromLink","friendID","friendName","result","newFriendName","addFriend","undefined","alert","prompt","user","email","idOrEmail","dupFriend","_ref","response","error","QuizModel","AuthenticationStateMachine","name","id","x","persistentClient","Date"],"mappings":"4JAmDO,SAAeA,EAAkBC,CAAgB,CAAEC,CAAkB,E,wBAClEC,EAMQC,E,iDANC,O,EAAMC,EAAUJ,EAAUC,G,WACrCC,AAAWG,SADTH,CAAAA,EAAS,UACXA,MAAAA,C,YACAI,MAAO,iBAA2B,OAAXL,EAAW,O,gBAG9BC,AAAyB,eAAzBA,EAAO,aAAa,CAApBA,MAAAA,C,QAEIC,AAAkB,OADhBA,CAAAA,EAAgBI,OAAQ,yBAA4C,OAApBL,EAAO,YAAY,CAAC,uCAAsCD,EAAU,EACtHE,MAAAA,C,KACA,O,EAAMJ,EAAkBC,EAAUG,EAAc,IAAI,I,QAApD,S,oCAIJG,MAAO,yBAA4C,OAApBJ,EAAO,YAAY,G,6BAG9D,I,+4EA9DO,SAAeE,EAAUJ,CAAgB,CAAEC,CAAkB,E,wBAC1DO,EACAC,EACAC,EAUFC,EAW4BC,EAApBC,EAAUC,E,iDApBtB,GAHMN,EAAOO,EAAAA,SAAAA,CAAAA,MAAAA,CAAAA,kBAAAA,CAAAA,KAAyC,CAChDN,EAAQO,EAAAA,0BAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAAA,KAA6C,CACrDN,EAAY,qBACdV,AAAa,KAAbA,EACA,MAAO,C,EAAA,CAAE,aAAe,GAAY,OAAVU,EAAU,oBAAmB,cAAe,UAAW,E,CAErF,GAAIV,IAAaQ,EACb,MAAO,C,EAAA,CAAE,aAAc,kCAAmC,cAAe,UAAW,E,CAExF,GAAIR,IAAaS,EACb,MAAO,C,EAAA,CAAE,aAAc,wCAAyC,cAAe,UAAW,E,CAG9F,GAAKE,EAAYI,EAAAA,SAAAA,CAAAA,MAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CAAAA,IAAmC,CAAC,Y,aAAEE,EAAAA,CAAAA,CAAAA,EAAAA,CAAMC,EAAAA,CAAAA,CAAAA,EAAAA,C,OAAQD,AAAS,OAATA,GAAiBC,IAAOlB,C,GACzF,MAAO,C,EAAA,CAAE,aAAe,GAAeA,MAAAA,CAAbU,EAAU,KAAiCC,MAAAA,CAA9BX,EAAS,uBAAkC,OAAbW,CAAS,CAAC,EAAE,EAAI,cAAe,UAAW,E,CAEnH,GAAIV,AAAe,KAAfA,EACA,MAAO,C,EAAA,CAAE,aAAc,8BAA+B,cAAe,YAAa,E,CAEtF,GAAIc,EAAAA,SAAAA,CAAAA,MAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CAAAA,GAAkC,CAACI,SAAAA,CAAC,E,OAAIA,CAAC,CAAC,EAAE,A,GAAE,QAAQ,CAAClB,GACvD,MAAO,C,EAAA,CAAE,aAAc,6BAA8B,cAAe,YAAa,E,kBAGrDW,O,sBAAAA,C,EAAMQ,EAAAA,CAAAA,CAAAA,IAAqB,CAAC,4BAA6B,CACjF,KAAM,CAAE,UAAWpB,CAAS,EAC5B,OAAQ,CACJ,OAAQe,EAAAA,SAAAA,CAAAA,MAAAA,CAAAA,WAA4B,EACxC,CACJ,G,cAEA,GAPQF,EAAoBD,AAAAA,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAApBC,QAAQ,CAAEC,EAAUF,EAAVE,KAAK,CAOnBD,AAAoB,MAApBA,EAAS,MAAM,CACf,MAAO,C,EAAA,CAAE,aAAe,WAAoB,OAAVH,GAAa,cAAe,UAAW,E,CAE7E,GAAII,AAAUT,SAAVS,EACA,MAAO,C,EAAA,CAAE,aAAc,gBAAiB,cAAe,OAAQ,E,CAInE,OADAC,EAAAA,SAAAA,CAAAA,MAAAA,CAAAA,OAAAA,CAAAA,KAA8B,CAAI,A,kDAAGA,EAAAA,SAAAA,CAAAA,MAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CAAAA,MAAqC,CAAC,Y,OAAWG,AAARA,A,MAAAA,CAAAA,EAAAA,GAAelB,C,iTAAYC,EAAYD,EAAUqB,KAAK,GAAG,G,GAChI,C,EAAAhB,O,QAGP,O,SAAO,C,EAAA,CAAE,aAAc,gBAAiB,cAAe,OAAQ,E,oBAEvE,I"}