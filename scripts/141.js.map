{"version":3,"file":"141.js","sources":["webpack://assets/./node_modules/complex.js/complex.js","webpack://assets/./node_modules/fraction.js/fraction.js","webpack://assets/../esm/typed-function.mjs","webpack://assets/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://assets/./node_modules/mathjs/lib/esm/utils/customs.js","webpack://assets/./node_modules/mathjs/lib/esm/utils/map.js","webpack://assets/./node_modules/mathjs/lib/esm/core/function/typed.js","webpack://assets/./node_modules/mathjs/lib/esm/core/config.js","webpack://assets/./node_modules/mathjs/lib/esm/entry/configReadonly.js","webpack://assets/./node_modules/mathjs/lib/esm/core/function/config.js","webpack://assets/./node_modules/mathjs/lib/esm/error/DimensionError.js","webpack://assets/./node_modules/mathjs/lib/esm/error/IndexError.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/decomposition/lup.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/sparse/csTdfs.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/sparse/csAmd.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/sparse/csFlip.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/sparse/csFkeep.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/sparse/csCounts.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/sparse/csLeaf.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/sparse/csSqr.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/sparse/csPermute.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/sparse/csEtree.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/sparse/csPost.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/sparse/csMark.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/sparse/csUnflip.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/sparse/csSpsolve.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/sparse/csReach.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/sparse/csMarked.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/sparse/csDfs.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/sparse/csLu.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/decomposition/slu.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/solver/lsolve.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/sparse/csIpvec.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/solver/lusolve.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/solver/usolve.js","webpack://assets/./node_modules/mathjs/lib/esm/function/algebra/solver/utils/solveValidation.js","webpack://assets/./node_modules/mathjs/lib/esm/function/arithmetic/abs.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo04xSidSid.js","webpack://assets/./node_modules/mathjs/lib/esm/function/arithmetic/add.js","webpack://assets/./node_modules/mathjs/lib/esm/function/arithmetic/addScalar.js","webpack://assets/./node_modules/mathjs/lib/esm/function/arithmetic/divideScalar.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo02xDS0.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo09xS0Sf.js","webpack://assets/./node_modules/mathjs/lib/esm/function/arithmetic/dotMultiply.js","webpack://assets/./node_modules/mathjs/lib/esm/function/arithmetic/multiply.js","webpack://assets/./node_modules/mathjs/lib/esm/function/arithmetic/multiplyScalar.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo05xSfSf.js","webpack://assets/./node_modules/mathjs/lib/esm/function/arithmetic/subtract.js","webpack://assets/./node_modules/mathjs/lib/esm/function/arithmetic/subtractScalar.js","webpack://assets/./node_modules/mathjs/lib/esm/function/arithmetic/unaryMinus.js","webpack://assets/./node_modules/mathjs/lib/esm/function/complex/conj.js","webpack://assets/./node_modules/mathjs/lib/esm/function/matrix/concat.js","webpack://assets/./node_modules/mathjs/lib/esm/function/matrix/dot.js","webpack://assets/./node_modules/mathjs/lib/esm/function/matrix/size.js","webpack://assets/./node_modules/mathjs/lib/esm/function/matrix/transpose.js","webpack://assets/./node_modules/mathjs/lib/esm/function/relational/compareUnits.js","webpack://assets/./node_modules/mathjs/lib/esm/function/relational/equalScalar.js","webpack://assets/./node_modules/mathjs/lib/esm/utils/complex.js","webpack://assets/./node_modules/mathjs/lib/esm/function/relational/larger.js","webpack://assets/./node_modules/mathjs/lib/esm/function/relational/largerEq.js","webpack://assets/./node_modules/mathjs/lib/esm/function/relational/smaller.js","webpack://assets/./node_modules/mathjs/lib/esm/function/utils/isInteger.js","webpack://assets/./node_modules/mathjs/lib/esm/function/utils/numeric.js","webpack://assets/./node_modules/mathjs/lib/esm/plain/number/arithmetic.js","webpack://assets/./node_modules/decimal.js/decimal.mjs","webpack://assets/./node_modules/mathjs/lib/esm/type/bignumber/BigNumber.js","webpack://assets/./node_modules/mathjs/lib/esm/type/bignumber/function/bignumber.js","webpack://assets/./node_modules/mathjs/lib/esm/type/complex/Complex.js","webpack://assets/./node_modules/mathjs/lib/esm/type/fraction/Fraction.js","webpack://assets/./node_modules/mathjs/lib/esm/type/fraction/function/fraction.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/DenseMatrix.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/FibonacciHeap.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/Matrix.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/Spa.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/SparseMatrix.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/function/matrix.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo01xDSid.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo03xDSf.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo07xSSf.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo10xSids.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo11xS0s.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo12xSfs.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo14xDs.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo13xDD.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/utils/broadcast.js","webpack://assets/./node_modules/mathjs/lib/esm/type/matrix/utils/matrixAlgorithmSuite.js","webpack://assets/./node_modules/mathjs/lib/esm/type/number.js","webpack://assets/./node_modules/mathjs/lib/esm/utils/array.js","webpack://assets/./node_modules/mathjs/lib/esm/utils/bignumber/nearlyEqual.js","webpack://assets/./node_modules/mathjs/lib/esm/utils/factory.js","webpack://assets/./node_modules/mathjs/lib/esm/utils/function.js","webpack://assets/./node_modules/mathjs/lib/esm/utils/is.js","webpack://assets/./node_modules/mathjs/lib/esm/utils/noop.js","webpack://assets/./node_modules/mathjs/lib/esm/utils/number.js","webpack://assets/./node_modules/mathjs/lib/esm/utils/object.js","webpack://assets/./node_modules/mathjs/lib/esm/utils/string.js","webpack://assets/./node_modules/mathjs/lib/esm/utils/bignumber/formatter.js"],"sourcesContent":["/**\n * @license Complex.js v2.1.1 12/05/2020\n *\n * Copyright (c) 2020, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n/**\n *\n * This class allows the manipulation of complex numbers.\n * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\n *\n * Object form\n * { re: <real>, im: <imaginary> }\n * { arg: <angle>, abs: <radius> }\n * { phi: <angle>, r: <radius> }\n *\n * Array / Vector form\n * [ real, imaginary ]\n *\n * Double form\n * 99.3 - Single double value\n *\n * String form\n * '23.1337' - Simple real number\n * '15+3i' - a simple complex number\n * '3-i' - a simple complex number\n *\n * Example:\n *\n * var c = new Complex('99.3+8i');\n * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);\n *\n */\n\n(function(root) {\n\n  'use strict';\n\n  var cosh = Math.cosh || function(x) {\n    return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;\n  };\n\n  var sinh = Math.sinh || function(x) {\n    return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;\n  };\n\n  /**\n   * Calculates cos(x) - 1 using Taylor series if x is small (-¼π ≤ x ≤ ¼π).\n   *\n   * @param {number} x\n   * @returns {number} cos(x) - 1\n   */\n  var cosm1 = function(x) {\n\n    var b = Math.PI / 4;\n    if (-b > x || x > b) {\n      return Math.cos(x) - 1.0;\n    }\n\n    /* Calculate horner form of polynomial of taylor series in Q\n    var fac = 1, alt = 1, pol = {};\n    for (var i = 0; i <= 16; i++) {\n      fac*= i || 1;\n      if (i % 2 == 0) {\n        pol[i] = new Fraction(1, alt * fac);\n        alt = -alt;\n      }\n    }\n    console.log(new Polynomial(pol).toHorner()); // (((((((1/20922789888000x^2-1/87178291200)x^2+1/479001600)x^2-1/3628800)x^2+1/40320)x^2-1/720)x^2+1/24)x^2-1/2)x^2+1\n    */\n\n    var xx = x * x;\n    return xx * (\n      xx * (\n        xx * (\n          xx * (\n            xx * (\n              xx * (\n                xx * (\n                  xx / 20922789888000\n                  - 1 / 87178291200)\n                + 1 / 479001600)\n              - 1 / 3628800)\n            + 1 / 40320)\n          - 1 / 720)\n        + 1 / 24)\n      - 1 / 2);\n  };\n\n  var hypot = function(x, y) {\n\n    var a = Math.abs(x);\n    var b = Math.abs(y);\n\n    if (a < 3000 && b < 3000) {\n      return Math.sqrt(a * a + b * b);\n    }\n\n    if (a < b) {\n      a = b;\n      b = x / y;\n    } else {\n      b = y / x;\n    }\n    return a * Math.sqrt(1 + b * b);\n  };\n\n  var parser_exit = function() {\n    throw SyntaxError('Invalid Param');\n  };\n\n  /**\n   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows\n   *\n   * @param {number} a\n   * @param {number} b\n   * @returns {number}\n   */\n  function logHypot(a, b) {\n\n    var _a = Math.abs(a);\n    var _b = Math.abs(b);\n\n    if (a === 0) {\n      return Math.log(_b);\n    }\n\n    if (b === 0) {\n      return Math.log(_a);\n    }\n\n    if (_a < 3000 && _b < 3000) {\n      return Math.log(a * a + b * b) * 0.5;\n    }\n\n    /* I got 4 ideas to compute this property without overflow:\n     *\n     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate\n     *\n     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)\n\n     Math.log(a * a + b * b) / 2\n\n     *\n     *\n     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)\n\n     var fn = function(a, b) {\n     a = Math.abs(a);\n     b = Math.abs(b);\n     var t = Math.min(a, b);\n     a = Math.max(a, b);\n     t = t / a;\n\n     return Math.log(a) + Math.log(1 + t * t) / 2;\n     };\n\n     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)\n\n     Math.log(a / Math.cos(Math.atan2(b, a)))\n\n     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)\n\n     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))\n\n     */\n\n     a = a / 2;\n     b = b / 2;\n\n    return 0.5 * Math.log(a * a + b * b) + Math.LN2;\n  }\n\n  var parse = function(a, b) {\n\n    var z = { 're': 0, 'im': 0 };\n\n    if (a === undefined || a === null) {\n      z['re'] =\n      z['im'] = 0;\n    } else if (b !== undefined) {\n      z['re'] = a;\n      z['im'] = b;\n    } else\n      switch (typeof a) {\n\n        case 'object':\n\n          if ('im' in a && 're' in a) {\n            z['re'] = a['re'];\n            z['im'] = a['im'];\n          } else if ('abs' in a && 'arg' in a) {\n            if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {\n              return Complex['INFINITY'];\n            }\n            z['re'] = a['abs'] * Math.cos(a['arg']);\n            z['im'] = a['abs'] * Math.sin(a['arg']);\n          } else if ('r' in a && 'phi' in a) {\n            if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {\n              return Complex['INFINITY'];\n            }\n            z['re'] = a['r'] * Math.cos(a['phi']);\n            z['im'] = a['r'] * Math.sin(a['phi']);\n          } else if (a.length === 2) { // Quick array check\n            z['re'] = a[0];\n            z['im'] = a[1];\n          } else {\n            parser_exit();\n          }\n          break;\n\n        case 'string':\n\n          z['im'] = /* void */\n          z['re'] = 0;\n\n          var tokens = a.match(/\\d+\\.?\\d*e[+-]?\\d+|\\d+\\.?\\d*|\\.\\d+|./g);\n          var plus = 1;\n          var minus = 0;\n\n          if (tokens === null) {\n            parser_exit();\n          }\n\n          for (var i = 0; i < tokens.length; i++) {\n\n            var c = tokens[i];\n\n            if (c === ' ' || c === '\\t' || c === '\\n') {\n              /* void */\n            } else if (c === '+') {\n              plus++;\n            } else if (c === '-') {\n              minus++;\n            } else if (c === 'i' || c === 'I') {\n\n              if (plus + minus === 0) {\n                parser_exit();\n              }\n\n              if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);\n                i++;\n              } else {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');\n              }\n              plus = minus = 0;\n\n            } else {\n\n              if (plus + minus === 0 || isNaN(c)) {\n                parser_exit();\n              }\n\n              if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {\n                z['im'] += parseFloat((minus % 2 ? '-' : '') + c);\n                i++;\n              } else {\n                z['re'] += parseFloat((minus % 2 ? '-' : '') + c);\n              }\n              plus = minus = 0;\n            }\n          }\n\n          // Still something on the stack\n          if (plus + minus > 0) {\n            parser_exit();\n          }\n          break;\n\n        case 'number':\n          z['im'] = 0;\n          z['re'] = a;\n          break;\n\n        default:\n          parser_exit();\n      }\n\n    if (isNaN(z['re']) || isNaN(z['im'])) {\n      // If a calculation is NaN, we treat it as NaN and don't throw\n      //parser_exit();\n    }\n\n    return z;\n  };\n\n  /**\n   * @constructor\n   * @returns {Complex}\n   */\n  function Complex(a, b) {\n\n    if (!(this instanceof Complex)) {\n      return new Complex(a, b);\n    }\n\n    var z = parse(a, b);\n\n    this['re'] = z['re'];\n    this['im'] = z['im'];\n  }\n\n  Complex.prototype = {\n\n    're': 0,\n    'im': 0,\n\n    /**\n     * Calculates the sign of a complex number, which is a normalized complex\n     *\n     * @returns {Complex}\n     */\n    'sign': function() {\n\n      var abs = this['abs']();\n\n      return new Complex(\n        this['re'] / abs,\n        this['im'] / abs);\n    },\n\n    /**\n     * Adds two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'add': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity + Infinity = NaN\n      if (this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      }\n\n      // Infinity + z = Infinity { where z != Infinity }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      return new Complex(\n        this['re'] + z['re'],\n        this['im'] + z['im']);\n    },\n\n    /**\n     * Subtracts two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'sub': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity - Infinity = NaN\n      if (this['isInfinite']() && z['isInfinite']()) {\n        return Complex['NAN'];\n      }\n\n      // Infinity - z = Infinity { where z != Infinity }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      return new Complex(\n        this['re'] - z['re'],\n        this['im'] - z['im']);\n    },\n\n    /**\n     * Multiplies two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'mul': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // Infinity * 0 = NaN\n      if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {\n        return Complex['NAN'];\n      }\n\n      // Infinity * z = Infinity { where z != 0 }\n      if (this['isInfinite']() || z['isInfinite']()) {\n        return Complex['INFINITY'];\n      }\n\n      // Short circuit for real values\n      if (z['im'] === 0 && this['im'] === 0) {\n        return new Complex(this['re'] * z['re'], 0);\n      }\n\n      return new Complex(\n        this['re'] * z['re'] - this['im'] * z['im'],\n        this['re'] * z['im'] + this['im'] * z['re']);\n    },\n\n    /**\n     * Divides two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'div': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      // 0 / 0 = NaN and Infinity / Infinity = NaN\n      if ((this['isZero']() && z['isZero']()) || (this['isInfinite']() && z['isInfinite']())) {\n        return Complex['NAN'];\n      }\n\n      // Infinity / 0 = Infinity\n      if (this['isInfinite']() || z['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      // 0 / Infinity = 0\n      if (this['isZero']() || z['isInfinite']()) {\n        return Complex['ZERO'];\n      }\n\n      a = this['re'];\n      b = this['im'];\n\n      var c = z['re'];\n      var d = z['im'];\n      var t, x;\n\n      if (0 === d) {\n        // Divisor is real\n        return new Complex(a / c, b / c);\n      }\n\n      if (Math.abs(c) < Math.abs(d)) {\n\n        x = c / d;\n        t = c * x + d;\n\n        return new Complex(\n          (a * x + b) / t,\n          (b * x - a) / t);\n\n      } else {\n\n        x = d / c;\n        t = d * x + c;\n\n        return new Complex(\n          (a + b * x) / t,\n          (b - a * x) / t);\n      }\n    },\n\n    /**\n     * Calculate the power of two complex numbers\n     *\n     * @returns {Complex}\n     */\n    'pow': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      a = this['re'];\n      b = this['im'];\n\n      if (z['isZero']()) {\n        return Complex['ONE'];\n      }\n\n      // If the exponent is real\n      if (z['im'] === 0) {\n\n        if (b === 0 && a > 0) {\n\n          return new Complex(Math.pow(a, z['re']), 0);\n\n        } else if (a === 0) { // If base is fully imaginary\n\n          switch ((z['re'] % 4 + 4) % 4) {\n            case 0:\n              return new Complex(Math.pow(b, z['re']), 0);\n            case 1:\n              return new Complex(0, Math.pow(b, z['re']));\n            case 2:\n              return new Complex(-Math.pow(b, z['re']), 0);\n            case 3:\n              return new Complex(0, -Math.pow(b, z['re']));\n          }\n        }\n      }\n\n      /* I couldn't find a good formula, so here is a derivation and optimization\n       *\n       * z_1^z_2 = (a + bi)^(c + di)\n       *         = exp((c + di) * log(a + bi)\n       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))\n       * =>...\n       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n       *\n       * =>...\n       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n       *\n       * =>\n       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))\n       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))\n       *\n       */\n\n      if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {\n        return Complex['ZERO'];\n      }\n\n      var arg = Math.atan2(b, a);\n      var loh = logHypot(a, b);\n\n      a = Math.exp(z['re'] * loh - z['im'] * arg);\n      b = z['im'] * loh + z['re'] * arg;\n      return new Complex(\n        a * Math.cos(b),\n        a * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex square root\n     *\n     * @returns {Complex}\n     */\n    'sqrt': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n      var r = this['abs']();\n\n      var re, im;\n\n      if (a >= 0) {\n\n        if (b === 0) {\n          return new Complex(Math.sqrt(a), 0);\n        }\n\n        re = 0.5 * Math.sqrt(2.0 * (r + a));\n      } else {\n        re = Math.abs(b) / Math.sqrt(2 * (r - a));\n      }\n\n      if (a <= 0) {\n        im = 0.5 * Math.sqrt(2.0 * (r - a));\n      } else {\n        im = Math.abs(b) / Math.sqrt(2 * (r + a));\n      }\n\n      return new Complex(re, b < 0 ? -im : im);\n    },\n\n    /**\n     * Calculate the complex exponent\n     *\n     * @returns {Complex}\n     */\n    'exp': function() {\n\n      var tmp = Math.exp(this['re']);\n\n      if (this['im'] === 0) {\n        //return new Complex(tmp, 0);\n      }\n      return new Complex(\n        tmp * Math.cos(this['im']),\n        tmp * Math.sin(this['im']));\n    },\n\n    /**\n     * Calculate the complex exponent and subtracts one.\n     *\n     * This may be more accurate than `Complex(x).exp().sub(1)` if\n     * `x` is small.\n     *\n     * @returns {Complex}\n     */\n    'expm1': function() {\n\n      /**\n       * exp(a + i*b) - 1\n       = exp(a) * (cos(b) + j*sin(b)) - 1\n       = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)\n       */\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        Math.expm1(a) * Math.cos(b) + cosm1(b),\n        Math.exp(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the natural log\n     *\n     * @returns {Complex}\n     */\n    'log': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0 && a > 0) {\n        //return new Complex(Math.log(a), 0);\n      }\n\n      return new Complex(\n        logHypot(a, b),\n        Math.atan2(b, a));\n    },\n\n    /**\n     * Calculate the magnitude of the complex number\n     *\n     * @returns {number}\n     */\n    'abs': function() {\n\n      return hypot(this['re'], this['im']);\n    },\n\n    /**\n     * Calculate the angle of the complex number\n     *\n     * @returns {number}\n     */\n    'arg': function() {\n\n      return Math.atan2(this['im'], this['re']);\n    },\n\n    /**\n     * Calculate the sine of the complex number\n     *\n     * @returns {Complex}\n     */\n    'sin': function() {\n\n      // sin(z) = ( e^iz - e^-iz ) / 2i \n      //        = sin(a)cosh(b) + i cos(a)sinh(b)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        Math.sin(a) * cosh(b),\n        Math.cos(a) * sinh(b));\n    },\n\n    /**\n     * Calculate the cosine\n     *\n     * @returns {Complex}\n     */\n    'cos': function() {\n\n      // cos(z) = ( e^iz + e^-iz ) / 2 \n      //        = cos(a)cosh(b) - i sin(a)sinh(b)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        Math.cos(a) * cosh(b),\n        -Math.sin(a) * sinh(b));\n    },\n\n    /**\n     * Calculate the tangent\n     *\n     * @returns {Complex}\n     */\n    'tan': function() {\n\n      // tan(z) = sin(z) / cos(z) \n      //        = ( e^iz - e^-iz ) / ( i( e^iz + e^-iz ) )\n      //        = ( e^2iz - 1 ) / i( e^2iz + 1 )\n      //        = ( sin(2a) + i sinh(2b) ) / ( cos(2a) + cosh(2b) )\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) + cosh(b);\n\n      return new Complex(\n        Math.sin(a) / d,\n        sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cotangent\n     *\n     * @returns {Complex}\n     */\n    'cot': function() {\n\n      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = Math.cos(a) - cosh(b);\n\n      return new Complex(\n        -Math.sin(a) / d,\n        sinh(b) / d);\n    },\n\n    /**\n     * Calculate the secant\n     *\n     * @returns {Complex}\n     */\n    'sec': function() {\n\n      // sec(c) = 2 / (e^(ci) + e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);\n\n      return new Complex(\n        Math.cos(a) * cosh(b) / d,\n        Math.sin(a) * sinh(b) / d);\n    },\n\n    /**\n     * Calculate the cosecans\n     *\n     * @returns {Complex}\n     */\n    'csc': function() {\n\n      // csc(c) = 2i / (e^(ci) - e^(-ci))\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);\n\n      return new Complex(\n        Math.sin(a) * cosh(b) / d,\n        -Math.cos(a) * sinh(b) / d);\n    },\n\n    /**\n     * Calculate the complex arcus sinus\n     *\n     * @returns {Complex}\n     */\n    'asin': function() {\n\n      // asin(c) = -i * log(ci + sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var t1 = new Complex(\n        b * b - a * a + 1,\n        -2 * a * b)['sqrt']();\n\n      var t2 = new Complex(\n        t1['re'] - b,\n        t1['im'] + a)['log']();\n\n      return new Complex(t2['im'], -t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cosinus\n     *\n     * @returns {Complex}\n     */\n    'acos': function() {\n\n      // acos(c) = i * log(c - i * sqrt(1 - c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var t1 = new Complex(\n        b * b - a * a + 1,\n        -2 * a * b)['sqrt']();\n\n      var t2 = new Complex(\n        t1['re'] - b,\n        t1['im'] + a)['log']();\n\n      return new Complex(Math.PI / 2 - t2['im'], t2['re']);\n    },\n\n    /**\n     * Calculate the complex arcus tangent\n     *\n     * @returns {Complex}\n     */\n    'atan': function() {\n\n      // atan(c) = i / 2 log((i + x) / (i - x))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0) {\n\n        if (b === 1) {\n          return new Complex(0, Infinity);\n        }\n\n        if (b === -1) {\n          return new Complex(0, -Infinity);\n        }\n      }\n\n      var d = a * a + (1.0 - b) * (1.0 - b);\n\n      var t1 = new Complex(\n        (1 - b * b - a * a) / d,\n        -2 * a / d).log();\n\n      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);\n    },\n\n    /**\n     * Calculate the complex arcus cotangent\n     *\n     * @returns {Complex}\n     */\n    'acot': function() {\n\n      // acot(c) = i / 2 log((c - i) / (c + i))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n        return new Complex(Math.atan2(1, a), 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).atan()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).atan();\n    },\n\n    /**\n     * Calculate the complex arcus secant\n     *\n     * @returns {Complex}\n     */\n    'asec': function() {\n\n      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(0, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).acos()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).acos();\n    },\n\n    /**\n     * Calculate the complex arcus cosecans\n     *\n     * @returns {Complex}\n     */\n    'acsc': function() {\n\n      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(Math.PI / 2, Infinity);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).asin()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).asin();\n    },\n\n    /**\n     * Calculate the complex sinh\n     *\n     * @returns {Complex}\n     */\n    'sinh': function() {\n\n      // sinh(c) = (e^c - e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        sinh(a) * Math.cos(b),\n        cosh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex cosh\n     *\n     * @returns {Complex}\n     */\n    'cosh': function() {\n\n      // cosh(c) = (e^c + e^-c) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      return new Complex(\n        cosh(a) * Math.cos(b),\n        sinh(a) * Math.sin(b));\n    },\n\n    /**\n     * Calculate the complex tanh\n     *\n     * @returns {Complex}\n     */\n    'tanh': function() {\n\n      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) + Math.cos(b);\n\n      return new Complex(\n        sinh(a) / d,\n        Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'coth': function() {\n\n      // coth(c) = (e^c + e^-c) / (e^c - e^-c)\n\n      var a = 2 * this['re'];\n      var b = 2 * this['im'];\n      var d = cosh(a) - Math.cos(b);\n\n      return new Complex(\n        sinh(a) / d,\n        -Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex coth\n     *\n     * @returns {Complex}\n     */\n    'csch': function() {\n\n      // csch(c) = 2 / (e^c - e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) - cosh(2 * a);\n\n      return new Complex(\n        -2 * sinh(a) * Math.cos(b) / d,\n        2 * cosh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex sech\n     *\n     * @returns {Complex}\n     */\n    'sech': function() {\n\n      // sech(c) = 2 / (e^c + e^-c)\n\n      var a = this['re'];\n      var b = this['im'];\n      var d = Math.cos(2 * b) + cosh(2 * a);\n\n      return new Complex(\n        2 * cosh(a) * Math.cos(b) / d,\n        -2 * sinh(a) * Math.sin(b) / d);\n    },\n\n    /**\n     * Calculate the complex asinh\n     *\n     * @returns {Complex}\n     */\n    'asinh': function() {\n\n      // asinh(c) = log(c + sqrt(c^2 + 1))\n\n      var tmp = this['im'];\n      this['im'] = -this['re'];\n      this['re'] = tmp;\n      var res = this['asin']();\n\n      this['re'] = -this['im'];\n      this['im'] = tmp;\n      tmp = res['re'];\n\n      res['re'] = -res['im'];\n      res['im'] = tmp;\n      return res;\n    },\n\n    /**\n     * Calculate the complex acosh\n     *\n     * @returns {Complex}\n     */\n    'acosh': function() {\n\n      // acosh(c) = log(c + sqrt(c^2 - 1))\n\n      var res = this['acos']();\n      if (res['im'] <= 0) {\n        var tmp = res['re'];\n        res['re'] = -res['im'];\n        res['im'] = tmp;\n      } else {\n        var tmp = res['im'];\n        res['im'] = -res['re'];\n        res['re'] = tmp;\n      }\n      return res;\n    },\n\n    /**\n     * Calculate the complex atanh\n     *\n     * @returns {Complex}\n     */\n    'atanh': function() {\n\n      // atanh(c) = log((1+c) / (1-c)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var noIM = a > 1 && b === 0;\n      var oneMinus = 1 - a;\n      var onePlus = 1 + a;\n      var d = oneMinus * oneMinus + b * b;\n\n      var x = (d !== 0)\n        ? new Complex(\n          (onePlus * oneMinus - b * b) / d,\n          (b * oneMinus + onePlus * b) / d)\n        : new Complex(\n          (a !== -1) ? (a / 0) : 0,\n          (b !== 0) ? (b / 0) : 0);\n\n      var temp = x['re'];\n      x['re'] = logHypot(x['re'], x['im']) / 2;\n      x['im'] = Math.atan2(x['im'], temp) / 2;\n      if (noIM) {\n        x['im'] = -x['im'];\n      }\n      return x;\n    },\n\n    /**\n     * Calculate the complex acoth\n     *\n     * @returns {Complex}\n     */\n    'acoth': function() {\n\n      // acoth(c) = log((c+1) / (c-1)) / 2\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (a === 0 && b === 0) {\n        return new Complex(0, Math.PI / 2);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).atanh()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).atanh();\n    },\n\n    /**\n     * Calculate the complex acsch\n     *\n     * @returns {Complex}\n     */\n    'acsch': function() {\n\n      // acsch(c) = log((1+sqrt(1+c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (b === 0) {\n\n        return new Complex(\n          (a !== 0)\n            ? Math.log(a + Math.sqrt(a * a + 1))\n            : Infinity, 0);\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).asinh()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).asinh();\n    },\n\n    /**\n     * Calculate the complex asech\n     *\n     * @returns {Complex}\n     */\n    'asech': function() {\n\n      // asech(c) = log((1+sqrt(1-c^2))/c)\n\n      var a = this['re'];\n      var b = this['im'];\n\n      if (this['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      var d = a * a + b * b;\n      return (d !== 0)\n        ? new Complex(\n          a / d,\n          -b / d).acosh()\n        : new Complex(\n          (a !== 0) ? a / 0 : 0,\n          (b !== 0) ? -b / 0 : 0).acosh();\n    },\n\n    /**\n     * Calculate the complex inverse 1/z\n     *\n     * @returns {Complex}\n     */\n    'inverse': function() {\n\n      // 1 / 0 = Infinity and 1 / Infinity = 0\n      if (this['isZero']()) {\n        return Complex['INFINITY'];\n      }\n\n      if (this['isInfinite']()) {\n        return Complex['ZERO'];\n      }\n\n      var a = this['re'];\n      var b = this['im'];\n\n      var d = a * a + b * b;\n\n      return new Complex(a / d, -b / d);\n    },\n\n    /**\n     * Returns the complex conjugate\n     *\n     * @returns {Complex}\n     */\n    'conjugate': function() {\n\n      return new Complex(this['re'], -this['im']);\n    },\n\n    /**\n     * Gets the negated complex number\n     *\n     * @returns {Complex}\n     */\n    'neg': function() {\n\n      return new Complex(-this['re'], -this['im']);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'ceil': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n        Math.ceil(this['re'] * places) / places,\n        Math.ceil(this['im'] * places) / places);\n    },\n\n    /**\n     * Floors the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'floor': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n        Math.floor(this['re'] * places) / places,\n        Math.floor(this['im'] * places) / places);\n    },\n\n    /**\n     * Ceils the actual complex number\n     *\n     * @returns {Complex}\n     */\n    'round': function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      return new Complex(\n        Math.round(this['re'] * places) / places,\n        Math.round(this['im'] * places) / places);\n    },\n\n    /**\n     * Compares two complex numbers\n     *\n     * **Note:** new Complex(Infinity).equals(Infinity) === false\n     *\n     * @returns {boolean}\n     */\n    'equals': function(a, b) {\n\n      var z = new Complex(a, b);\n\n      return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&\n        Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * @returns {Complex}\n     */\n    'clone': function() {\n\n      return new Complex(this['re'], this['im']);\n    },\n\n    /**\n     * Gets a string of the actual complex number\n     *\n     * @returns {string}\n     */\n    'toString': function() {\n\n      var a = this['re'];\n      var b = this['im'];\n      var ret = \"\";\n\n      if (this['isNaN']()) {\n        return 'NaN';\n      }\n\n      if (this['isInfinite']()) {\n        return 'Infinity';\n      }\n\n      if (Math.abs(a) < Complex['EPSILON']) {\n        a = 0;\n      }\n\n      if (Math.abs(b) < Complex['EPSILON']) {\n        b = 0;\n      }\n\n      // If is real number\n      if (b === 0) {\n        return ret + a;\n      }\n\n      if (a !== 0) {\n        ret += a;\n        ret += \" \";\n        if (b < 0) {\n          b = -b;\n          ret += \"-\";\n        } else {\n          ret += \"+\";\n        }\n        ret += \" \";\n      } else if (b < 0) {\n        b = -b;\n        ret += \"-\";\n      }\n\n      if (1 !== b) { // b is the absolute imaginary part\n        ret += b;\n      }\n      return ret + \"i\";\n    },\n\n    /**\n     * Returns the actual number as a vector\n     *\n     * @returns {Array}\n     */\n    'toVector': function() {\n\n      return [this['re'], this['im']];\n    },\n\n    /**\n     * Returns the actual real value of the current object\n     *\n     * @returns {number|null}\n     */\n    'valueOf': function() {\n\n      if (this['im'] === 0) {\n        return this['re'];\n      }\n      return null;\n    },\n\n    /**\n     * Determines whether a complex number is not on the Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isNaN': function() {\n      return isNaN(this['re']) || isNaN(this['im']);\n    },\n\n    /**\n     * Determines whether or not a complex number is at the zero pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isZero': function() {\n      return this['im'] === 0 && this['re'] === 0;\n    },\n\n    /**\n     * Determines whether a complex number is not at the infinity pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isFinite': function() {\n      return isFinite(this['re']) && isFinite(this['im']);\n    },\n\n    /**\n     * Determines whether or not a complex number is at the infinity pole of the\n     * Riemann sphere.\n     *\n     * @returns {boolean}\n     */\n    'isInfinite': function() {\n      return !(this['isNaN']() || this['isFinite']());\n    }\n  };\n\n  Complex['ZERO'] = new Complex(0, 0);\n  Complex['ONE'] = new Complex(1, 0);\n  Complex['I'] = new Complex(0, 1);\n  Complex['PI'] = new Complex(Math.PI, 0);\n  Complex['E'] = new Complex(Math.E, 0);\n  Complex['INFINITY'] = new Complex(Infinity, Infinity);\n  Complex['NAN'] = new Complex(NaN, NaN);\n  Complex['EPSILON'] = 1e-15;\n\n  if (typeof define === 'function' && define['amd']) {\n    define([], function() {\n      return Complex;\n    });\n  } else if (typeof exports === 'object') {\n    Object.defineProperty(Complex, \"__esModule\", { 'value': true });\n    Complex['default'] = Complex;\n    Complex['Complex'] = Complex;\n    module['exports'] = Complex;\n  } else {\n    root['Complex'] = Complex;\n  }\n\n})(this);\n","/**\n * @license Fraction.js v4.3.0 20/08/2023\n * https://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2023, Robert Eisele (robert@raw.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <numerator>, 1 => <denominator> ]\n * [ n => <numerator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n(function(root) {\n\n  \"use strict\";\n\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n  var MAX_CYCLE_LEN = 2000;\n\n  // Parsed data to avoid calling \"new\" all the time\n  var P = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1\n  };\n\n  function assign(n, s) {\n\n    if (isNaN(n = parseInt(n, 10))) {\n      throw InvalidParameter();\n    }\n    return n * s;\n  }\n\n  // Creates a new Fraction internally without the need of the bulky constructor\n  function newFraction(n, d) {\n\n    if (d === 0) {\n      throw DivisionByZero();\n    }\n\n    var f = Object.create(Fraction.prototype);\n    f[\"s\"] = n < 0 ? -1 : 1;\n\n    n = n < 0 ? -n : n;\n\n    var a = gcd(n, d);\n\n    f[\"n\"] = n / a;\n    f[\"d\"] = d / a;\n    return f;\n  }\n\n  function factorize(num) {\n\n    var factors = {};\n\n    var n = num;\n    var i = 2;\n    var s = 4;\n\n    while (s <= n) {\n\n      while (n % i === 0) {\n        n/= i;\n        factors[i] = (factors[i] || 0) + 1;\n      }\n      s+= 1 + 2 * i++;\n    }\n\n    if (n !== num) {\n      if (n > 1)\n        factors[n] = (factors[n] || 0) + 1;\n    } else {\n      factors[num] = (factors[num] || 0) + 1;\n    }\n    return factors;\n  }\n\n  var parse = function(p1, p2) {\n\n    var n = 0, d = 1, s = 1;\n    var v = 0, w = 0, x = 0, y = 1, z = 1;\n\n    var A = 0, B = 1;\n    var C = 1, D = 1;\n\n    var N = 10000000;\n    var M;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = p1;\n      d = p2;\n      s = n * d;\n\n      if (n % 1 !== 0 || d % 1 !== 0) {\n        throw NonIntegerParameter();\n      }\n\n    } else\n      switch (typeof p1) {\n\n        case \"object\":\n          {\n            if (\"d\" in p1 && \"n\" in p1) {\n              n = p1[\"n\"];\n              d = p1[\"d\"];\n              if (\"s\" in p1)\n                n*= p1[\"s\"];\n            } else if (0 in p1) {\n              n = p1[0];\n              if (1 in p1)\n                d = p1[1];\n            } else {\n              throw InvalidParameter();\n            }\n            s = n * d;\n            break;\n          }\n        case \"number\":\n          {\n            if (p1 < 0) {\n              s = p1;\n              p1 = -p1;\n            }\n\n            if (p1 % 1 === 0) {\n              n = p1;\n            } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n              if (p1 >= 1) {\n                z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n                p1/= z;\n              }\n\n              // Using Farey Sequences\n              // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n              while (B <= N && D <= N) {\n                M = (A + C) / (B + D);\n\n                if (p1 === M) {\n                  if (B + D <= N) {\n                    n = A + C;\n                    d = B + D;\n                  } else if (D > B) {\n                    n = C;\n                    d = D;\n                  } else {\n                    n = A;\n                    d = B;\n                  }\n                  break;\n\n                } else {\n\n                  if (p1 > M) {\n                    A+= C;\n                    B+= D;\n                  } else {\n                    C+= A;\n                    D+= B;\n                  }\n\n                  if (B > N) {\n                    n = C;\n                    d = D;\n                  } else {\n                    n = A;\n                    d = B;\n                  }\n                }\n              }\n              n*= z;\n            } else if (isNaN(p1) || isNaN(p2)) {\n              d = n = NaN;\n            }\n            break;\n          }\n        case \"string\":\n          {\n            B = p1.match(/\\d+|./g);\n\n            if (B === null)\n              throw InvalidParameter();\n\n            if (B[A] === '-') {// Check for minus sign at the beginning\n              s = -1;\n              A++;\n            } else if (B[A] === '+') {// Check for plus sign at the beginning\n              A++;\n            }\n\n            if (B.length === A + 1) { // Check if it's just a simple number \"1234\"\n              w = assign(B[A++], s);\n            } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\n\n              if (B[A] !== '.') { // Handle 0.5 and .5\n                v = assign(B[A++], s);\n              }\n              A++;\n\n              // Check for decimal places\n              if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n                w = assign(B[A], s);\n                y = Math.pow(10, B[A].length);\n                A++;\n              }\n\n              // Check for repeating places\n              if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n                x = assign(B[A + 1], s);\n                z = Math.pow(10, B[A + 1].length) - 1;\n                A+= 3;\n              }\n\n            } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n              w = assign(B[A], s);\n              y = assign(B[A + 2], 1);\n              A+= 3;\n            } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n              v = assign(B[A], s);\n              w = assign(B[A + 2], s);\n              y = assign(B[A + 4], 1);\n              A+= 5;\n            }\n\n            if (B.length <= A) { // Check for more tokens on the stack\n              d = y * z;\n              s = /* void */\n              n = x + d * v + z * w;\n              break;\n            }\n\n            /* Fall through on error */\n          }\n        default:\n          throw InvalidParameter();\n      }\n\n    if (d === 0) {\n      throw DivisionByZero();\n    }\n\n    P[\"s\"] = s < 0 ? -1 : 1;\n    P[\"n\"] = Math.abs(n);\n    P[\"d\"] = Math.abs(d);\n  };\n\n  function modpow(b, e, m) {\n\n    var r = 1;\n    for (; e > 0; b = (b * b) % m, e >>= 1) {\n\n      if (e & 1) {\n        r = (r * b) % m;\n      }\n    }\n    return r;\n  }\n\n\n  function cycleLen(n, d) {\n\n    for (; d % 2 === 0;\n      d/= 2) {\n    }\n\n    for (; d % 5 === 0;\n      d/= 5) {\n    }\n\n    if (d === 1) // Catch non-cyclic numbers\n      return 0;\n\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    var rem = 10 % d;\n    var t = 1;\n\n    for (; rem !== 1; t++) {\n      rem = rem * 10 % d;\n\n      if (t > MAX_CYCLE_LEN)\n        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n    return t;\n  }\n\n\n  function cycleStart(n, d, len) {\n\n    var rem1 = 1;\n    var rem2 = modpow(10, len, d);\n\n    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n\n      if (rem1 === rem2)\n        return t;\n\n      rem1 = rem1 * 10 % d;\n      rem2 = rem2 * 10 % d;\n    }\n    return 0;\n  }\n\n  function gcd(a, b) {\n\n    if (!a)\n      return b;\n    if (!b)\n      return a;\n\n    while (1) {\n      a%= b;\n      if (!a)\n        return b;\n      b%= a;\n      if (!b)\n        return a;\n    }\n  };\n\n  /**\n   * Module constructor\n   *\n   * @constructor\n   * @param {number|Fraction=} a\n   * @param {number=} b\n   */\n  function Fraction(a, b) {\n\n    parse(a, b);\n\n    if (this instanceof Fraction) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse variable a\n      this[\"s\"] = P[\"s\"];\n      this[\"n\"] = P[\"n\"] / a;\n      this[\"d\"] = P[\"d\"] / a;\n    } else {\n      return newFraction(P['s'] * P['n'], P['d']);\n    }\n  }\n\n  var DivisionByZero = function() { return new Error(\"Division by Zero\"); };\n  var InvalidParameter = function() { return new Error(\"Invalid argument\"); };\n  var NonIntegerParameter = function() { return new Error(\"Parameters must be integer\"); };\n\n  Fraction.prototype = {\n\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1,\n\n    /**\n     * Calculates the absolute value\n     *\n     * Ex: new Fraction(-4).abs() => 4\n     **/\n    \"abs\": function() {\n\n      return newFraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Inverts the sign of the current fraction\n     *\n     * Ex: new Fraction(-4).neg() => 4\n     **/\n    \"neg\": function() {\n\n      return newFraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\n     * Adds two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n     **/\n    \"add\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Subtracts two rational numbers\n     *\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n     **/\n    \"sub\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Multiplies two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n     **/\n    \"mul\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n        this[\"d\"] * P[\"d\"]\n      );\n    },\n\n    /**\n     * Divides two rational numbers\n     *\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n     **/\n    \"div\": function(a, b) {\n\n      parse(a, b);\n      return newFraction(\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n        this[\"d\"] * P[\"n\"]\n      );\n    },\n\n    /**\n     * Clones the actual object\n     *\n     * Ex: new Fraction(\"-17.(345)\").clone()\n     **/\n    \"clone\": function() {\n      return newFraction(this['s'] * this['n'], this['d']);\n    },\n\n    /**\n     * Calculates the modulo of two rational numbers - a more precise fmod\n     *\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n     **/\n    \"mod\": function(a, b) {\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return new Fraction(NaN);\n      }\n\n      if (a === undefined) {\n        return newFraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n      }\n\n      parse(a, b);\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        throw DivisionByZero();\n      }\n\n      /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n      /*\n       * New attempt: a1 / b1 = a2 / b2 * q + r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\n       */\n      return newFraction(\n        this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n        P[\"d\"] * this[\"d\"]\n      );\n    },\n\n    /**\n     * Calculates the fractional gcd of two rational numbers\n     *\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n     */\n    \"gcd\": function(a, b) {\n\n      parse(a, b);\n\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return newFraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\n     * Calculates the fractional lcm of two rational numbers\n     *\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\n     */\n    \"lcm\": function(a, b) {\n\n      parse(a, b);\n\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n        return newFraction(0, 1);\n      }\n      return newFraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\n     * Calculates the ceil of a rational number\n     *\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n     **/\n    \"ceil\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return newFraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Calculates the floor of a rational number\n     *\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n     **/\n    \"floor\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return newFraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Rounds a rational numbers\n     *\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\n     **/\n    \"round\": function(places) {\n\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n      return newFraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\n     *\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n     **/\n    \"inverse\": function() {\n\n      return newFraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\n     * Calculates the fraction to some rational exponent, if possible\n     *\n     * Ex: new Fraction(-1,2).pow(-3) => -8\n     */\n    \"pow\": function(a, b) {\n\n      parse(a, b);\n\n      // Trivial case when exp is an integer\n\n      if (P['d'] === 1) {\n\n        if (P['s'] < 0) {\n          return newFraction(Math.pow(this['s'] * this[\"d\"], P['n']), Math.pow(this[\"n\"], P['n']));\n        } else {\n          return newFraction(Math.pow(this['s'] * this[\"n\"], P['n']), Math.pow(this[\"d\"], P['n']));\n        }\n      }\n\n      // Negative roots become complex\n      //     (-a/b)^(c/d) = x\n      // <=> (-1)^(c/d) * (a/b)^(c/d) = x\n      // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180°\n      // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )\n      // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.\n      if (this['s'] < 0) return null;\n\n      // Now prime factor n and d\n      var N = factorize(this['n']);\n      var D = factorize(this['d']);\n\n      // Exponentiate and take root for n and d individually\n      var n = 1;\n      var d = 1;\n      for (var k in N) {\n        if (k === '1') continue;\n        if (k === '0') {\n          n = 0;\n          break;\n        }\n        N[k]*= P['n'];\n\n        if (N[k] % P['d'] === 0) {\n          N[k]/= P['d'];\n        } else return null;\n        n*= Math.pow(k, N[k]);\n      }\n\n      for (var k in D) {\n        if (k === '1') continue;\n        D[k]*= P['n'];\n\n        if (D[k] % P['d'] === 0) {\n          D[k]/= P['d'];\n        } else return null;\n        d*= Math.pow(k, D[k]);\n      }\n\n      if (P['s'] < 0) {\n        return newFraction(d, n);\n      }\n      return newFraction(n, d);\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"equals\": function(a, b) {\n\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\n     * Check if two rational numbers are the same\n     *\n     * Ex: new Fraction(19.6).equals([98, 5]);\n     **/\n    \"compare\": function(a, b) {\n\n      parse(a, b);\n      var t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\n      return (0 < t) - (t < 0);\n    },\n\n    \"simplify\": function(eps) {\n\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return this;\n      }\n\n      eps = eps || 0.001;\n\n      var thisABS = this['abs']();\n      var cont = thisABS['toContinued']();\n\n      for (var i = 1; i < cont.length; i++) {\n\n        var s = newFraction(cont[i - 1], 1);\n        for (var k = i - 2; k >= 0; k--) {\n          s = s['inverse']()['add'](cont[k]);\n        }\n\n        if (Math.abs(s['sub'](thisABS).valueOf()) < eps) {\n          return s['mul'](this['s']);\n        }\n      }\n      return this;\n    },\n\n    /**\n     * Check if two rational numbers are divisible\n     *\n     * Ex: new Fraction(19.6).divisible(1.5);\n     */\n    \"divisible\": function(a, b) {\n\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n    },\n\n    /**\n     * Returns a decimal representation of the fraction\n     *\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n     **/\n    'valueOf': function() {\n\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\n    },\n\n    /**\n     * Returns a string-fraction representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toFraction(true) => \"4 1/3\"\n     **/\n    'toFraction': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str+= '-';\n      }\n\n      if (d === 1) {\n        str+= n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str+= whole;\n          str+= \" \";\n          n%= d;\n        }\n\n        str+= n;\n        str+= '/';\n        str+= d;\n      }\n      return str;\n    },\n\n    /**\n     * Returns a latex representation of a Fraction object\n     *\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n     **/\n    'toLatex': function(excludeWhole) {\n\n      var whole, str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n      if (this[\"s\"] < 0) {\n        str+= '-';\n      }\n\n      if (d === 1) {\n        str+= n;\n      } else {\n\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str+= whole;\n          n%= d;\n        }\n\n        str+= \"\\\\frac{\";\n        str+= n;\n        str+= '}{';\n        str+= d;\n        str+= '}';\n      }\n      return str;\n    },\n\n    /**\n     * Returns an array of continued fraction elements\n     *\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n     */\n    'toContinued': function() {\n\n      var t;\n      var a = this['n'];\n      var b = this['d'];\n      var res = [];\n\n      if (isNaN(a) || isNaN(b)) {\n        return res;\n      }\n\n      do {\n        res.push(Math.floor(a / b));\n        t = a % b;\n        a = b;\n        b = t;\n      } while (a !== 1);\n\n      return res;\n    },\n\n    /**\n     * Creates a string representation of a fraction with all digits\n     *\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n     **/\n    'toString': function(dec) {\n\n      var N = this[\"n\"];\n      var D = this[\"d\"];\n\n      if (isNaN(N) || isNaN(D)) {\n        return \"NaN\";\n      }\n\n      dec = dec || 15; // 15 = decimal places when no repetation\n\n      var cycLen = cycleLen(N, D); // Cycle length\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      var str = this['s'] < 0 ? \"-\" : \"\";\n\n      str+= N / D | 0;\n\n      N%= D;\n      N*= 10;\n\n      if (N)\n        str+= \".\";\n\n      if (cycLen) {\n\n        for (var i = cycOff; i--;) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n        str+= \"(\";\n        for (var i = cycLen; i--;) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n        str+= \")\";\n      } else {\n        for (var i = dec; N && i--;) {\n          str+= N / D | 0;\n          N%= D;\n          N*= 10;\n        }\n      }\n      return str;\n    }\n  };\n\n  if (typeof exports === \"object\") {\n    Object.defineProperty(Fraction, \"__esModule\", { 'value': true });\n    Fraction['default'] = Fraction;\n    Fraction['Fraction'] = Fraction;\n    module['exports'] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n\n})(this);\n","function ok() {\n  return true;\n}\n\nfunction notOk() {\n  return false;\n}\n\nfunction undef() {\n  return undefined;\n}\n\nconst NOT_TYPED_FUNCTION = 'Argument is not a typed-function.';\n/**\n * @typedef {{\n *   params: Param[],\n *   fn: function,\n *   test: function,\n *   implementation: function\n * }} Signature\n *\n * @typedef {{\n *   types: Type[],\n *   hasAny: boolean,\n *   hasConversion: boolean,\n *   restParam: boolean\n * }} Param\n *\n * @typedef {{\n *   name: string,\n *   typeIndex: number,\n *   test: function,\n *   isAny: boolean,\n *   conversion?: ConversionDef,\n *   conversionIndex: number,\n * }} Type\n *\n * @typedef {{\n *   from: string,\n *   to: string,\n *   convert: function (*) : *\n * }} ConversionDef\n *\n * @typedef {{\n *   name: string,\n *   test: function(*) : boolean,\n *   isAny?: boolean\n * }} TypeDef\n */\n\n/**\n * @returns {() => function}\n */\n\nfunction create() {\n  // data type tests\n\n  /**\n   * Returns true if the argument is a non-null \"plain\" object\n   */\n  function isPlainObject(x) {\n    return typeof x === 'object' && x !== null && x.constructor === Object;\n  }\n\n  const _types = [{\n    name: 'number',\n    test: function (x) {\n      return typeof x === 'number';\n    }\n  }, {\n    name: 'string',\n    test: function (x) {\n      return typeof x === 'string';\n    }\n  }, {\n    name: 'boolean',\n    test: function (x) {\n      return typeof x === 'boolean';\n    }\n  }, {\n    name: 'Function',\n    test: function (x) {\n      return typeof x === 'function';\n    }\n  }, {\n    name: 'Array',\n    test: Array.isArray\n  }, {\n    name: 'Date',\n    test: function (x) {\n      return x instanceof Date;\n    }\n  }, {\n    name: 'RegExp',\n    test: function (x) {\n      return x instanceof RegExp;\n    }\n  }, {\n    name: 'Object',\n    test: isPlainObject\n  }, {\n    name: 'null',\n    test: function (x) {\n      return x === null;\n    }\n  }, {\n    name: 'undefined',\n    test: function (x) {\n      return x === undefined;\n    }\n  }];\n  const anyType = {\n    name: 'any',\n    test: ok,\n    isAny: true\n  }; // Data structures to track the types. As these are local variables in\n  // create(), each typed universe will get its own copy, but the variables\n  // will only be accessible through the (closures of the) functions supplied\n  // as properties of the typed object, not directly.\n  // These will be initialized in clear() below\n\n  let typeMap; // primary store of all types\n\n  let typeList; // Array of just type names, for the sake of ordering\n  // And similar data structures for the type conversions:\n\n  let nConversions = 0; // the actual conversions are stored on a property of the destination types\n  // This is a temporary object, will be replaced with a function at the end\n\n  let typed = {\n    createCount: 0\n  };\n  /**\n   * Takes a type name and returns the corresponding official type object\n   * for that type.\n   *\n   * @param {string} typeName\n   * @returns {TypeDef} type\n   */\n\n  function findType(typeName) {\n    const type = typeMap.get(typeName);\n\n    if (type) {\n      return type;\n    } // Remainder is error handling\n\n\n    let message = 'Unknown type \"' + typeName + '\"';\n    const name = typeName.toLowerCase();\n    let otherName;\n\n    for (otherName of typeList) {\n      if (otherName.toLowerCase() === name) {\n        message += '. Did you mean \"' + otherName + '\" ?';\n        break;\n      }\n    }\n\n    throw new TypeError(message);\n  }\n  /**\n   * Adds an array `types` of type definitions to this typed instance.\n   * Each type definition should be an object with properties:\n   * 'name' - a string giving the name of the type; 'test' - function\n   * returning a boolean that tests membership in the type; and optionally\n   * 'isAny' - true only for the 'any' type.\n   *\n   * The second optional argument, `before`, gives the name of a type that\n   * these types should be added before. The new types are added in the\n   * order specified.\n   * @param {TypeDef[]} types\n   * @param {string | boolean} [beforeSpec='any'] before\n   */\n\n\n  function addTypes(types) {\n    let beforeSpec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'any';\n    const beforeIndex = beforeSpec ? findType(beforeSpec).index : typeList.length;\n    const newTypes = [];\n\n    for (let i = 0; i < types.length; ++i) {\n      if (!types[i] || typeof types[i].name !== 'string' || typeof types[i].test !== 'function') {\n        throw new TypeError('Object with properties {name: string, test: function} expected');\n      }\n\n      const typeName = types[i].name;\n\n      if (typeMap.has(typeName)) {\n        throw new TypeError('Duplicate type name \"' + typeName + '\"');\n      }\n\n      newTypes.push(typeName);\n      typeMap.set(typeName, {\n        name: typeName,\n        test: types[i].test,\n        isAny: types[i].isAny,\n        index: beforeIndex + i,\n        conversionsTo: [] // Newly added type can't have any conversions to it\n\n      });\n    } // update the typeList\n\n\n    const affectedTypes = typeList.slice(beforeIndex);\n    typeList = typeList.slice(0, beforeIndex).concat(newTypes).concat(affectedTypes); // Fix the indices\n\n    for (let i = beforeIndex + newTypes.length; i < typeList.length; ++i) {\n      typeMap.get(typeList[i]).index = i;\n    }\n  }\n  /**\n   * Removes all types and conversions from this typed instance.\n   * May cause previously constructed typed-functions to throw\n   * strange errors when they are called with types that do not\n   * match any of their signatures.\n   */\n\n\n  function clear() {\n    typeMap = new Map();\n    typeList = [];\n    nConversions = 0;\n    addTypes([anyType], false);\n  } // initialize the types to the default list\n\n\n  clear();\n  addTypes(_types);\n  /**\n   * Removes all conversions, leaving the types alone.\n   */\n\n  function clearConversions() {\n    let typeName;\n\n    for (typeName of typeList) {\n      typeMap.get(typeName).conversionsTo = [];\n    }\n\n    nConversions = 0;\n  }\n  /**\n   * Find the type names that match a value.\n   * @param {*} value\n   * @return {string[]} Array of names of types for which\n   *                  the type test matches the value.\n   */\n\n\n  function findTypeNames(value) {\n    const matches = typeList.filter(name => {\n      const type = typeMap.get(name);\n      return !type.isAny && type.test(value);\n    });\n\n    if (matches.length) {\n      return matches;\n    }\n\n    return ['any'];\n  }\n  /**\n   * Check if an entity is a typed function created by any instance\n   * @param {any} entity\n   * @returns {boolean}\n   */\n\n\n  function isTypedFunction(entity) {\n    return entity && typeof entity === 'function' && '_typedFunctionData' in entity;\n  }\n  /**\n   * Find a specific signature from a (composed) typed function, for example:\n   *\n   *   typed.findSignature(fn, ['number', 'string'])\n   *   typed.findSignature(fn, 'number, string')\n   *   typed.findSignature(fn, 'number,string', {exact: true})\n   *\n   * This function findSignature will by default return the best match to\n   * the given signature, possibly employing type conversions.\n   *\n   * The (optional) third argument is a plain object giving options\n   * controlling the signature search. Currently the only implemented\n   * option is `exact`: if specified as true (default is false), only\n   * exact matches will be returned (i.e. signatures for which `fn` was\n   * directly defined). Note that a (possibly different) type matching\n   * `any`, or one or more instances of TYPE matching `...TYPE` are\n   * considered exact matches in this regard, as no conversions are used.\n   *\n   * This function returns a \"signature\" object, as does `typed.resolve()`,\n   * which is a plain object with four keys: `params` (the array of parameters\n   * for this signature), `fn` (the originally supplied function for this\n   * signature), `test` (a generated function that determines if an argument\n   * list matches this signature, and `implementation` (the function to call\n   * on a matching argument list, that performs conversions if necessary and\n   * then calls the originally supplied function).\n   *\n   * @param {Function} fn                   A typed-function\n   * @param {string | string[]} signature\n   *     Signature to be found, can be an array or a comma separated string.\n   * @param {object} options  Controls the signature search as documented\n   * @return {{ params: Param[], fn: function, test: function, implementation: function }}\n   *     Returns the matching signature, or throws an error when no signature\n   *     is found.\n   */\n\n\n  function findSignature(fn, signature, options) {\n    if (!isTypedFunction(fn)) {\n      throw new TypeError(NOT_TYPED_FUNCTION);\n    } // Canonicalize input\n\n\n    const exact = options && options.exact;\n    const stringSignature = Array.isArray(signature) ? signature.join(',') : signature;\n    const params = parseSignature(stringSignature);\n    const canonicalSignature = stringifyParams(params); // First hope we get lucky and exactly match a signature\n\n    if (!exact || canonicalSignature in fn.signatures) {\n      // OK, we can check the internal signatures\n      const match = fn._typedFunctionData.signatureMap.get(canonicalSignature);\n\n      if (match) {\n        return match;\n      }\n    } // Oh well, we did not; so we have to go back and check the parameters\n    // one by one, in order to catch things like `any` and rest params.\n    // Note here we can assume there is at least one parameter, because\n    // the empty signature would have matched successfully above.\n\n\n    const nParams = params.length;\n    let remainingSignatures;\n\n    if (exact) {\n      remainingSignatures = [];\n      let name;\n\n      for (name in fn.signatures) {\n        remainingSignatures.push(fn._typedFunctionData.signatureMap.get(name));\n      }\n    } else {\n      remainingSignatures = fn._typedFunctionData.signatures;\n    }\n\n    for (let i = 0; i < nParams; ++i) {\n      const want = params[i];\n      const filteredSignatures = [];\n      let possibility;\n\n      for (possibility of remainingSignatures) {\n        const have = getParamAtIndex(possibility.params, i);\n\n        if (!have || want.restParam && !have.restParam) {\n          continue;\n        }\n\n        if (!have.hasAny) {\n          // have to check all of the wanted types are available\n          const haveTypes = paramTypeSet(have);\n\n          if (want.types.some(wtype => !haveTypes.has(wtype.name))) {\n            continue;\n          }\n        } // OK, this looks good\n\n\n        filteredSignatures.push(possibility);\n      }\n\n      remainingSignatures = filteredSignatures;\n      if (remainingSignatures.length === 0) break;\n    } // Return the first remaining signature that was totally matched:\n\n\n    let candidate;\n\n    for (candidate of remainingSignatures) {\n      if (candidate.params.length <= nParams) {\n        return candidate;\n      }\n    }\n\n    throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + stringifyParams(params, ', ') + '))');\n  }\n  /**\n   * Find the proper function to call for a specific signature from\n   * a (composed) typed function, for example:\n   *\n   *   typed.find(fn, ['number', 'string'])\n   *   typed.find(fn, 'number, string')\n   *   typed.find(fn, 'number,string', {exact: true})\n   *\n   * This function find will by default return the best match to\n   * the given signature, possibly employing type conversions (and returning\n   * a function that will perform those conversions as needed). The\n   * (optional) third argument is a plain object giving options contolling\n   * the signature search. Currently only the option `exact` is implemented,\n   * which defaults to \"false\". If `exact` is specified as true, then only\n   * exact matches will be returned (i.e. signatures for which `fn` was\n   * directly defined). Uses of `any` and `...TYPE` are considered exact if\n   * no conversions are necessary to apply the corresponding function.\n   *\n   * @param {Function} fn                   A typed-function\n   * @param {string | string[]} signature\n   *     Signature to be found, can be an array or a comma separated string.\n   * @param {object} options  Controls the signature match as documented\n   * @return {function}\n   *     Returns the function to call for the given signature, or throws an\n   *     error if no match is found.\n   */\n\n\n  function find(fn, signature, options) {\n    return findSignature(fn, signature, options).implementation;\n  }\n  /**\n   * Convert a given value to another data type, specified by type name.\n   *\n   * @param {*} value\n   * @param {string} typeName\n   */\n\n\n  function convert(value, typeName) {\n    // check conversion is needed\n    const type = findType(typeName);\n\n    if (type.test(value)) {\n      return value;\n    }\n\n    const conversions = type.conversionsTo;\n\n    if (conversions.length === 0) {\n      throw new Error('There are no conversions to ' + typeName + ' defined.');\n    }\n\n    for (let i = 0; i < conversions.length; i++) {\n      const fromType = findType(conversions[i].from);\n\n      if (fromType.test(value)) {\n        return conversions[i].convert(value);\n      }\n    }\n\n    throw new Error('Cannot convert ' + value + ' to ' + typeName);\n  }\n  /**\n   * Stringify parameters in a normalized way\n   * @param {Param[]} params\n   * @param {string} [','] separator\n   * @return {string}\n   */\n\n\n  function stringifyParams(params) {\n    let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n    return params.map(p => p.name).join(separator);\n  }\n  /**\n   * Parse a parameter, like \"...number | boolean\"\n   * @param {string} param\n   * @return {Param} param\n   */\n\n\n  function parseParam(param) {\n    const restParam = param.indexOf('...') === 0;\n    const types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';\n    const typeDefs = types.split('|').map(s => findType(s.trim()));\n    let hasAny = false;\n    let paramName = restParam ? '...' : '';\n    const exactTypes = typeDefs.map(function (type) {\n      hasAny = type.isAny || hasAny;\n      paramName += type.name + '|';\n      return {\n        name: type.name,\n        typeIndex: type.index,\n        test: type.test,\n        isAny: type.isAny,\n        conversion: null,\n        conversionIndex: -1\n      };\n    });\n    return {\n      types: exactTypes,\n      name: paramName.slice(0, -1),\n      // remove trailing '|' from above\n      hasAny,\n      hasConversion: false,\n      restParam\n    };\n  }\n  /**\n   * Expands a parsed parameter with the types available from currently\n   * defined conversions.\n   * @param {Param} param\n   * @return {Param} param\n   */\n\n\n  function expandParam(param) {\n    const typeNames = param.types.map(t => t.name);\n    const matchingConversions = availableConversions(typeNames);\n    let hasAny = param.hasAny;\n    let newName = param.name;\n    const convertibleTypes = matchingConversions.map(function (conversion) {\n      const type = findType(conversion.from);\n      hasAny = type.isAny || hasAny;\n      newName += '|' + conversion.from;\n      return {\n        name: conversion.from,\n        typeIndex: type.index,\n        test: type.test,\n        isAny: type.isAny,\n        conversion,\n        conversionIndex: conversion.index\n      };\n    });\n    return {\n      types: param.types.concat(convertibleTypes),\n      name: newName,\n      hasAny,\n      hasConversion: convertibleTypes.length > 0,\n      restParam: param.restParam\n    };\n  }\n  /**\n   * Return the set of type names in a parameter.\n   * Caches the result for efficiency\n   *\n   * @param {Param} param\n   * @return {Set<string>} typenames\n   */\n\n\n  function paramTypeSet(param) {\n    if (!param.typeSet) {\n      param.typeSet = new Set();\n      param.types.forEach(type => param.typeSet.add(type.name));\n    }\n\n    return param.typeSet;\n  }\n  /**\n   * Parse a signature with comma separated parameters,\n   * like \"number | boolean, ...string\"\n   *\n   * @param {string} signature\n   * @return {Param[]} params\n   */\n\n\n  function parseSignature(rawSignature) {\n    const params = [];\n\n    if (typeof rawSignature !== 'string') {\n      throw new TypeError('Signatures must be strings');\n    }\n\n    const signature = rawSignature.trim();\n\n    if (signature === '') {\n      return params;\n    }\n\n    const rawParams = signature.split(',');\n\n    for (let i = 0; i < rawParams.length; ++i) {\n      const parsedParam = parseParam(rawParams[i].trim());\n\n      if (parsedParam.restParam && i !== rawParams.length - 1) {\n        throw new SyntaxError('Unexpected rest parameter \"' + rawParams[i] + '\": ' + 'only allowed for the last parameter');\n      } // if invalid, short-circuit (all the types may have been filtered)\n\n\n      if (parsedParam.types.length === 0) {\n        return null;\n      }\n\n      params.push(parsedParam);\n    }\n\n    return params;\n  }\n  /**\n   * Test whether a set of params contains a restParam\n   * @param {Param[]} params\n   * @return {boolean} Returns true when the last parameter is a restParam\n   */\n\n\n  function hasRestParam(params) {\n    const param = last(params);\n    return param ? param.restParam : false;\n  }\n  /**\n   * Create a type test for a single parameter, which can have one or multiple\n   * types.\n   * @param {Param} param\n   * @return {function(x: *) : boolean} Returns a test function\n   */\n\n\n  function compileTest(param) {\n    if (!param || param.types.length === 0) {\n      // nothing to do\n      return ok;\n    } else if (param.types.length === 1) {\n      return findType(param.types[0].name).test;\n    } else if (param.types.length === 2) {\n      const test0 = findType(param.types[0].name).test;\n      const test1 = findType(param.types[1].name).test;\n      return function or(x) {\n        return test0(x) || test1(x);\n      };\n    } else {\n      // param.types.length > 2\n      const tests = param.types.map(function (type) {\n        return findType(type.name).test;\n      });\n      return function or(x) {\n        for (let i = 0; i < tests.length; i++) {\n          if (tests[i](x)) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n    }\n  }\n  /**\n   * Create a test for all parameters of a signature\n   * @param {Param[]} params\n   * @return {function(args: Array<*>) : boolean}\n   */\n\n\n  function compileTests(params) {\n    let tests, test0, test1;\n\n    if (hasRestParam(params)) {\n      // variable arguments like '...number'\n      tests = initial(params).map(compileTest);\n      const varIndex = tests.length;\n      const lastTest = compileTest(last(params));\n\n      const testRestParam = function (args) {\n        for (let i = varIndex; i < args.length; i++) {\n          if (!lastTest(args[i])) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n\n      return function testArgs(args) {\n        for (let i = 0; i < tests.length; i++) {\n          if (!tests[i](args[i])) {\n            return false;\n          }\n        }\n\n        return testRestParam(args) && args.length >= varIndex + 1;\n      };\n    } else {\n      // no variable arguments\n      if (params.length === 0) {\n        return function testArgs(args) {\n          return args.length === 0;\n        };\n      } else if (params.length === 1) {\n        test0 = compileTest(params[0]);\n        return function testArgs(args) {\n          return test0(args[0]) && args.length === 1;\n        };\n      } else if (params.length === 2) {\n        test0 = compileTest(params[0]);\n        test1 = compileTest(params[1]);\n        return function testArgs(args) {\n          return test0(args[0]) && test1(args[1]) && args.length === 2;\n        };\n      } else {\n        // arguments.length > 2\n        tests = params.map(compileTest);\n        return function testArgs(args) {\n          for (let i = 0; i < tests.length; i++) {\n            if (!tests[i](args[i])) {\n              return false;\n            }\n          }\n\n          return args.length === tests.length;\n        };\n      }\n    }\n  }\n  /**\n   * Find the parameter at a specific index of a Params list.\n   * Handles rest parameters.\n   * @param {Param[]} params\n   * @param {number} index\n   * @return {Param | null} Returns the matching parameter when found,\n   *                        null otherwise.\n   */\n\n\n  function getParamAtIndex(params, index) {\n    return index < params.length ? params[index] : hasRestParam(params) ? last(params) : null;\n  }\n  /**\n   * Get all type names of a parameter\n   * @param {Params[]} params\n   * @param {number} index\n   * @return {string[]} Returns an array with type names\n   */\n\n\n  function getTypeSetAtIndex(params, index) {\n    const param = getParamAtIndex(params, index);\n\n    if (!param) {\n      return new Set();\n    }\n\n    return paramTypeSet(param);\n  }\n  /**\n   * Test whether a type is an exact type or conversion\n   * @param {Type} type\n   * @return {boolean} Returns true when\n   */\n\n\n  function isExactType(type) {\n    return type.conversion === null || type.conversion === undefined;\n  }\n  /**\n   * Helper function for creating error messages: create an array with\n   * all available types on a specific argument index.\n   * @param {Signature[]} signatures\n   * @param {number} index\n   * @return {string[]} Returns an array with available types\n   */\n\n\n  function mergeExpectedParams(signatures, index) {\n    const typeSet = new Set();\n    signatures.forEach(signature => {\n      const paramSet = getTypeSetAtIndex(signature.params, index);\n      let name;\n\n      for (name of paramSet) {\n        typeSet.add(name);\n      }\n    });\n    return typeSet.has('any') ? ['any'] : Array.from(typeSet);\n  }\n  /**\n   * Create\n   * @param {string} name             The name of the function\n   * @param {array.<*>} args          The actual arguments passed to the function\n   * @param {Signature[]} signatures  A list with available signatures\n   * @return {TypeError} Returns a type error with additional data\n   *                     attached to it in the property `data`\n   */\n\n\n  function createError(name, args, signatures) {\n    let err, expected;\n\n    const _name = name || 'unnamed'; // test for wrong type at some index\n\n\n    let matchingSignatures = signatures;\n    let index;\n\n    for (index = 0; index < args.length; index++) {\n      const nextMatchingDefs = [];\n      matchingSignatures.forEach(signature => {\n        const param = getParamAtIndex(signature.params, index);\n        const test = compileTest(param);\n\n        if ((index < signature.params.length || hasRestParam(signature.params)) && test(args[index])) {\n          nextMatchingDefs.push(signature);\n        }\n      });\n\n      if (nextMatchingDefs.length === 0) {\n        // no matching signatures anymore, throw error \"wrong type\"\n        expected = mergeExpectedParams(matchingSignatures, index);\n\n        if (expected.length > 0) {\n          const actualTypes = findTypeNames(args[index]);\n          err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualTypes.join(' | ') + ', index: ' + index + ')');\n          err.data = {\n            category: 'wrongType',\n            fn: _name,\n            index,\n            actual: actualTypes,\n            expected\n          };\n          return err;\n        }\n      } else {\n        matchingSignatures = nextMatchingDefs;\n      }\n    } // test for too few arguments\n\n\n    const lengths = matchingSignatures.map(function (signature) {\n      return hasRestParam(signature.params) ? Infinity : signature.params.length;\n    });\n\n    if (args.length < Math.min.apply(null, lengths)) {\n      expected = mergeExpectedParams(matchingSignatures, index);\n      err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');\n      err.data = {\n        category: 'tooFewArgs',\n        fn: _name,\n        index: args.length,\n        expected\n      };\n      return err;\n    } // test for too many arguments\n\n\n    const maxLength = Math.max.apply(null, lengths);\n\n    if (args.length > maxLength) {\n      err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');\n      err.data = {\n        category: 'tooManyArgs',\n        fn: _name,\n        index: args.length,\n        expectedLength: maxLength\n      };\n      return err;\n    } // Generic error\n\n\n    const argTypes = [];\n\n    for (let i = 0; i < args.length; ++i) {\n      argTypes.push(findTypeNames(args[i]).join('|'));\n    }\n\n    err = new TypeError('Arguments of type \"' + argTypes.join(', ') + '\" do not match any of the defined signatures of function ' + _name + '.');\n    err.data = {\n      category: 'mismatch',\n      actual: argTypes\n    };\n    return err;\n  }\n  /**\n   * Find the lowest index of all exact types of a parameter (no conversions)\n   * @param {Param} param\n   * @return {number} Returns the index of the lowest type in typed.types\n   */\n\n\n  function getLowestTypeIndex(param) {\n    let min = typeList.length + 1;\n\n    for (let i = 0; i < param.types.length; i++) {\n      if (isExactType(param.types[i])) {\n        min = Math.min(min, param.types[i].typeIndex);\n      }\n    }\n\n    return min;\n  }\n  /**\n   * Find the lowest index of the conversion of all types of the parameter\n   * having a conversion\n   * @param {Param} param\n   * @return {number} Returns the lowest index of the conversions of this type\n   */\n\n\n  function getLowestConversionIndex(param) {\n    let min = nConversions + 1;\n\n    for (let i = 0; i < param.types.length; i++) {\n      if (!isExactType(param.types[i])) {\n        min = Math.min(min, param.types[i].conversionIndex);\n      }\n    }\n\n    return min;\n  }\n  /**\n   * Compare two params\n   * @param {Param} param1\n   * @param {Param} param2\n   * @return {number} returns -1 when param1 must get a lower\n   *                  index than param2, 1 when the opposite,\n   *                  or zero when both are equal\n   */\n\n\n  function compareParams(param1, param2) {\n    // We compare a number of metrics on a param in turn:\n    // 1) 'any' parameters are the least preferred\n    if (param1.hasAny) {\n      if (!param2.hasAny) {\n        return 1;\n      }\n    } else if (param2.hasAny) {\n      return -1;\n    } // 2) Prefer non-rest to rest parameters\n\n\n    if (param1.restParam) {\n      if (!param2.restParam) {\n        return 1;\n      }\n    } else if (param2.restParam) {\n      return -1;\n    } // 3) Prefer exact type match to conversions\n\n\n    if (param1.hasConversion) {\n      if (!param2.hasConversion) {\n        return 1;\n      }\n    } else if (param2.hasConversion) {\n      return -1;\n    } // 4) Prefer lower type index:\n\n\n    const typeDiff = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);\n\n    if (typeDiff < 0) {\n      return -1;\n    }\n\n    if (typeDiff > 0) {\n      return 1;\n    } // 5) Prefer lower conversion index\n\n\n    const convDiff = getLowestConversionIndex(param1) - getLowestConversionIndex(param2);\n\n    if (convDiff < 0) {\n      return -1;\n    }\n\n    if (convDiff > 0) {\n      return 1;\n    } // Don't have a basis for preference\n\n\n    return 0;\n  }\n  /**\n   * Compare two signatures\n   * @param {Signature} signature1\n   * @param {Signature} signature2\n   * @return {number} returns a negative number when param1 must get a lower\n   *                  index than param2, a positive number when the opposite,\n   *                  or zero when both are equal\n   */\n\n\n  function compareSignatures(signature1, signature2) {\n    const pars1 = signature1.params;\n    const pars2 = signature2.params;\n    const last1 = last(pars1);\n    const last2 = last(pars2);\n    const hasRest1 = hasRestParam(pars1);\n    const hasRest2 = hasRestParam(pars2); // We compare a number of metrics on signatures in turn:\n    // 1) An \"any rest param\" is least preferred\n\n    if (hasRest1 && last1.hasAny) {\n      if (!hasRest2 || !last2.hasAny) {\n        return 1;\n      }\n    } else if (hasRest2 && last2.hasAny) {\n      return -1;\n    } // 2) Minimize the number of 'any' parameters\n\n\n    let any1 = 0;\n    let conv1 = 0;\n    let par;\n\n    for (par of pars1) {\n      if (par.hasAny) ++any1;\n      if (par.hasConversion) ++conv1;\n    }\n\n    let any2 = 0;\n    let conv2 = 0;\n\n    for (par of pars2) {\n      if (par.hasAny) ++any2;\n      if (par.hasConversion) ++conv2;\n    }\n\n    if (any1 !== any2) {\n      return any1 - any2;\n    } // 3) A conversion rest param is less preferred\n\n\n    if (hasRest1 && last1.hasConversion) {\n      if (!hasRest2 || !last2.hasConversion) {\n        return 1;\n      }\n    } else if (hasRest2 && last2.hasConversion) {\n      return -1;\n    } // 4) Minimize the number of conversions\n\n\n    if (conv1 !== conv2) {\n      return conv1 - conv2;\n    } // 5) Prefer no rest param\n\n\n    if (hasRest1) {\n      if (!hasRest2) {\n        return 1;\n      }\n    } else if (hasRest2) {\n      return -1;\n    } // 6) Prefer shorter with rest param, longer without\n\n\n    const lengthCriterion = (pars1.length - pars2.length) * (hasRest1 ? -1 : 1);\n\n    if (lengthCriterion !== 0) {\n      return lengthCriterion;\n    } // Signatures are identical in each of the above metrics.\n    // In particular, they are the same length.\n    // We can therefore compare the parameters one by one.\n    // First we count which signature has more preferred parameters.\n\n\n    const comparisons = [];\n    let tc = 0;\n\n    for (let i = 0; i < pars1.length; ++i) {\n      const thisComparison = compareParams(pars1[i], pars2[i]);\n      comparisons.push(thisComparison);\n      tc += thisComparison;\n    }\n\n    if (tc !== 0) {\n      return tc;\n    } // They have the same number of preferred parameters, so go by the\n    // earliest parameter in which we have a preference.\n    // In other words, dispatch is driven somewhat more by earlier\n    // parameters than later ones.\n\n\n    let c;\n\n    for (c of comparisons) {\n      if (c !== 0) {\n        return c;\n      }\n    } // It's a tossup:\n\n\n    return 0;\n  }\n  /**\n   * Produce a list of all conversions from distinct types to one of\n   * the given types.\n   *\n   * @param {string[]} typeNames\n   * @return {ConversionDef[]} Returns the conversions that are available\n   *                        resulting in any given type (if any)\n   */\n\n\n  function availableConversions(typeNames) {\n    if (typeNames.length === 0) {\n      return [];\n    }\n\n    const types = typeNames.map(findType);\n\n    if (typeNames.length > 1) {\n      types.sort((t1, t2) => t1.index - t2.index);\n    }\n\n    let matches = types[0].conversionsTo;\n\n    if (typeNames.length === 1) {\n      return matches;\n    }\n\n    matches = matches.concat([]); // shallow copy the matches\n    // Since the types are now in index order, we just want the first\n    // occurrence of any from type:\n\n    const knownTypes = new Set(typeNames);\n\n    for (let i = 1; i < types.length; ++i) {\n      let newMatch;\n\n      for (newMatch of types[i].conversionsTo) {\n        if (!knownTypes.has(newMatch.from)) {\n          matches.push(newMatch);\n          knownTypes.add(newMatch.from);\n        }\n      }\n    }\n\n    return matches;\n  }\n  /**\n   * Preprocess arguments before calling the original function:\n   * - if needed convert the parameters\n   * - in case of rest parameters, move the rest parameters into an Array\n   * @param {Param[]} params\n   * @param {function} fn\n   * @return {function} Returns a wrapped function\n   */\n\n\n  function compileArgsPreprocessing(params, fn) {\n    let fnConvert = fn; // TODO: can we make this wrapper function smarter/simpler?\n\n    if (params.some(p => p.hasConversion)) {\n      const restParam = hasRestParam(params);\n      const compiledConversions = params.map(compileArgConversion);\n\n      fnConvert = function convertArgs() {\n        const args = [];\n        const last = restParam ? arguments.length - 1 : arguments.length;\n\n        for (let i = 0; i < last; i++) {\n          args[i] = compiledConversions[i](arguments[i]);\n        }\n\n        if (restParam) {\n          args[last] = arguments[last].map(compiledConversions[last]);\n        }\n\n        return fn.apply(this, args);\n      };\n    }\n\n    let fnPreprocess = fnConvert;\n\n    if (hasRestParam(params)) {\n      const offset = params.length - 1;\n\n      fnPreprocess = function preprocessRestParams() {\n        return fnConvert.apply(this, slice(arguments, 0, offset).concat([slice(arguments, offset)]));\n      };\n    }\n\n    return fnPreprocess;\n  }\n  /**\n   * Compile conversion for a parameter to the right type\n   * @param {Param} param\n   * @return {function} Returns the wrapped function that will convert arguments\n   *\n   */\n\n\n  function compileArgConversion(param) {\n    let test0, test1, conversion0, conversion1;\n    const tests = [];\n    const conversions = [];\n    param.types.forEach(function (type) {\n      if (type.conversion) {\n        tests.push(findType(type.conversion.from).test);\n        conversions.push(type.conversion.convert);\n      }\n    }); // create optimized conversion functions depending on the number of conversions\n\n    switch (conversions.length) {\n      case 0:\n        return function convertArg(arg) {\n          return arg;\n        };\n\n      case 1:\n        test0 = tests[0];\n        conversion0 = conversions[0];\n        return function convertArg(arg) {\n          if (test0(arg)) {\n            return conversion0(arg);\n          }\n\n          return arg;\n        };\n\n      case 2:\n        test0 = tests[0];\n        test1 = tests[1];\n        conversion0 = conversions[0];\n        conversion1 = conversions[1];\n        return function convertArg(arg) {\n          if (test0(arg)) {\n            return conversion0(arg);\n          }\n\n          if (test1(arg)) {\n            return conversion1(arg);\n          }\n\n          return arg;\n        };\n\n      default:\n        return function convertArg(arg) {\n          for (let i = 0; i < conversions.length; i++) {\n            if (tests[i](arg)) {\n              return conversions[i](arg);\n            }\n          }\n\n          return arg;\n        };\n    }\n  }\n  /**\n   * Split params with union types in to separate params.\n   *\n   * For example:\n   *\n   *     splitParams([['Array', 'Object'], ['string', 'RegExp'])\n   *     // returns:\n   *     // [\n   *     //   ['Array', 'string'],\n   *     //   ['Array', 'RegExp'],\n   *     //   ['Object', 'string'],\n   *     //   ['Object', 'RegExp']\n   *     // ]\n   *\n   * @param {Param[]} params\n   * @return {Param[]}\n   */\n\n\n  function splitParams(params) {\n    function _splitParams(params, index, paramsSoFar) {\n      if (index < params.length) {\n        const param = params[index];\n        let resultingParams = [];\n\n        if (param.restParam) {\n          // split the types of a rest parameter in two:\n          // one with only exact types, and one with exact types and conversions\n          const exactTypes = param.types.filter(isExactType);\n\n          if (exactTypes.length < param.types.length) {\n            resultingParams.push({\n              types: exactTypes,\n              name: '...' + exactTypes.map(t => t.name).join('|'),\n              hasAny: exactTypes.some(t => t.isAny),\n              hasConversion: false,\n              restParam: true\n            });\n          }\n\n          resultingParams.push(param);\n        } else {\n          // split all the types of a regular parameter into one type per param\n          resultingParams = param.types.map(function (type) {\n            return {\n              types: [type],\n              name: type.name,\n              hasAny: type.isAny,\n              hasConversion: type.conversion,\n              restParam: false\n            };\n          });\n        } // recurse over the groups with types\n\n\n        return flatMap(resultingParams, function (nextParam) {\n          return _splitParams(params, index + 1, paramsSoFar.concat([nextParam]));\n        });\n      } else {\n        // we've reached the end of the parameters.\n        return [paramsSoFar];\n      }\n    }\n\n    return _splitParams(params, 0, []);\n  }\n  /**\n   * Test whether two param lists represent conflicting signatures\n   * @param {Param[]} params1\n   * @param {Param[]} params2\n   * @return {boolean} Returns true when the signatures conflict, false otherwise.\n   */\n\n\n  function conflicting(params1, params2) {\n    const ii = Math.max(params1.length, params2.length);\n\n    for (let i = 0; i < ii; i++) {\n      const typeSet1 = getTypeSetAtIndex(params1, i);\n      const typeSet2 = getTypeSetAtIndex(params2, i);\n      let overlap = false;\n      let name;\n\n      for (name of typeSet2) {\n        if (typeSet1.has(name)) {\n          overlap = true;\n          break;\n        }\n      }\n\n      if (!overlap) {\n        return false;\n      }\n    }\n\n    const len1 = params1.length;\n    const len2 = params2.length;\n    const restParam1 = hasRestParam(params1);\n    const restParam2 = hasRestParam(params2);\n    return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;\n  }\n  /**\n   * Helper function for `resolveReferences` that returns a copy of\n   * functionList wihe any prior resolutions cleared out, in case we are\n   * recycling signatures from a prior typed function construction.\n   *\n   * @param {Array.<function|typed-reference>} functionList\n   * @return {Array.<function|typed-reference>}\n   */\n\n\n  function clearResolutions(functionList) {\n    return functionList.map(fn => {\n      if (isReferToSelf(fn)) {\n        return referToSelf(fn.referToSelf.callback);\n      }\n\n      if (isReferTo(fn)) {\n        return makeReferTo(fn.referTo.references, fn.referTo.callback);\n      }\n\n      return fn;\n    });\n  }\n  /**\n   * Take a list of references, a list of functions functionList, and a\n   * signatureMap indexing signatures into functionList, and return\n   * the list of resolutions, or a false-y value if they don't all\n   * resolve in a valid way (yet).\n   *\n   * @param {string[]} references\n   * @param {Array<function|typed-reference} functionList\n   * @param {Object.<string, integer>} signatureMap\n   * @return {function[] | false} resolutions\n   */\n\n\n  function collectResolutions(references, functionList, signatureMap) {\n    const resolvedReferences = [];\n    let reference;\n\n    for (reference of references) {\n      let resolution = signatureMap[reference];\n\n      if (typeof resolution !== 'number') {\n        throw new TypeError('No definition for referenced signature \"' + reference + '\"');\n      }\n\n      resolution = functionList[resolution];\n\n      if (typeof resolution !== 'function') {\n        return false;\n      }\n\n      resolvedReferences.push(resolution);\n    }\n\n    return resolvedReferences;\n  }\n  /**\n   * Resolve any references in the functionList for the typed function\n   * itself. The signatureMap tells which index in the functionList a\n   * given signature should be mapped to (for use in resolving typed.referTo)\n   * and self provides the destions of a typed.referToSelf.\n   *\n   * @param {Array<function | typed-reference-object>} functionList\n   * @param {Object.<string, function>} signatureMap\n   * @param {function} self  The typed-function itself\n   * @return {Array<function>} The list of resolved functions\n   */\n\n\n  function resolveReferences(functionList, signatureMap, self) {\n    const resolvedFunctions = clearResolutions(functionList);\n    const isResolved = new Array(resolvedFunctions.length).fill(false);\n    let leftUnresolved = true;\n\n    while (leftUnresolved) {\n      leftUnresolved = false;\n      let nothingResolved = true;\n\n      for (let i = 0; i < resolvedFunctions.length; ++i) {\n        if (isResolved[i]) continue;\n        const fn = resolvedFunctions[i];\n\n        if (isReferToSelf(fn)) {\n          resolvedFunctions[i] = fn.referToSelf.callback(self); // Preserve reference in case signature is reused someday:\n\n          resolvedFunctions[i].referToSelf = fn.referToSelf;\n          isResolved[i] = true;\n          nothingResolved = false;\n        } else if (isReferTo(fn)) {\n          const resolvedReferences = collectResolutions(fn.referTo.references, resolvedFunctions, signatureMap);\n\n          if (resolvedReferences) {\n            resolvedFunctions[i] = fn.referTo.callback.apply(this, resolvedReferences); // Preserve reference in case signature is reused someday:\n\n            resolvedFunctions[i].referTo = fn.referTo;\n            isResolved[i] = true;\n            nothingResolved = false;\n          } else {\n            leftUnresolved = true;\n          }\n        }\n      }\n\n      if (nothingResolved && leftUnresolved) {\n        throw new SyntaxError('Circular reference detected in resolving typed.referTo');\n      }\n    }\n\n    return resolvedFunctions;\n  }\n  /**\n   * Validate whether any of the function bodies contains a self-reference\n   * usage like `this(...)` or `this.signatures`. This self-referencing is\n   * deprecated since typed-function v3. It has been replaced with\n   * the functions typed.referTo and typed.referToSelf.\n   * @param {Object.<string, function>} signaturesMap\n   */\n\n\n  function validateDeprecatedThis(signaturesMap) {\n    // TODO: remove this deprecation warning logic some day (it's introduced in v3)\n    // match occurrences like 'this(' and 'this.signatures'\n    const deprecatedThisRegex = /\\bthis(\\(|\\.signatures\\b)/;\n    Object.keys(signaturesMap).forEach(signature => {\n      const fn = signaturesMap[signature];\n\n      if (deprecatedThisRegex.test(fn.toString())) {\n        throw new SyntaxError('Using `this` to self-reference a function ' + 'is deprecated since typed-function@3. ' + 'Use typed.referTo and typed.referToSelf instead.');\n      }\n    });\n  }\n  /**\n   * Create a typed function\n   * @param {String} name               The name for the typed function\n   * @param {Object.<string, function>} rawSignaturesMap\n   *                                    An object with one or\n   *                                    multiple signatures as key, and the\n   *                                    function corresponding to the\n   *                                    signature as value.\n   * @return {function}  Returns the created typed function.\n   */\n\n\n  function createTypedFunction(name, rawSignaturesMap) {\n    typed.createCount++;\n\n    if (Object.keys(rawSignaturesMap).length === 0) {\n      throw new SyntaxError('No signatures provided');\n    }\n\n    if (typed.warnAgainstDeprecatedThis) {\n      validateDeprecatedThis(rawSignaturesMap);\n    } // Main processing loop for signatures\n\n\n    const parsedParams = [];\n    const originalFunctions = [];\n    const signaturesMap = {};\n    const preliminarySignatures = []; // may have duplicates from conversions\n\n    let signature;\n\n    for (signature in rawSignaturesMap) {\n      // A) Protect against polluted Object prototype:\n      if (!Object.prototype.hasOwnProperty.call(rawSignaturesMap, signature)) {\n        continue;\n      } // B) Parse the signature\n\n\n      const params = parseSignature(signature);\n      if (!params) continue; // C) Check for conflicts\n\n      parsedParams.forEach(function (pp) {\n        if (conflicting(pp, params)) {\n          throw new TypeError('Conflicting signatures \"' + stringifyParams(pp) + '\" and \"' + stringifyParams(params) + '\".');\n        }\n      });\n      parsedParams.push(params); // D) Store the provided function and add conversions\n\n      const functionIndex = originalFunctions.length;\n      originalFunctions.push(rawSignaturesMap[signature]);\n      const conversionParams = params.map(expandParam); // E) Split the signatures and collect them up\n\n      let sp;\n\n      for (sp of splitParams(conversionParams)) {\n        const spName = stringifyParams(sp);\n        preliminarySignatures.push({\n          params: sp,\n          name: spName,\n          fn: functionIndex\n        });\n\n        if (sp.every(p => !p.hasConversion)) {\n          signaturesMap[spName] = functionIndex;\n        }\n      }\n    }\n\n    preliminarySignatures.sort(compareSignatures); // Note the forward reference to theTypedFn\n\n    const resolvedFunctions = resolveReferences(originalFunctions, signaturesMap, theTypedFn); // Fill in the proper function for each signature\n\n    let s;\n\n    for (s in signaturesMap) {\n      if (Object.prototype.hasOwnProperty.call(signaturesMap, s)) {\n        signaturesMap[s] = resolvedFunctions[signaturesMap[s]];\n      }\n    }\n\n    const signatures = [];\n    const internalSignatureMap = new Map(); // benchmarks faster than object\n\n    for (s of preliminarySignatures) {\n      // Note it's only safe to eliminate duplicates like this\n      // _after_ the signature sorting step above; otherwise we might\n      // remove the wrong one.\n      if (!internalSignatureMap.has(s.name)) {\n        s.fn = resolvedFunctions[s.fn];\n        signatures.push(s);\n        internalSignatureMap.set(s.name, s);\n      }\n    } // we create a highly optimized checks for the first couple of signatures with max 2 arguments\n\n\n    const ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);\n    const ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);\n    const ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);\n    const ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);\n    const ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);\n    const ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);\n    const allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5; // compile the tests\n\n    for (let i = 0; i < signatures.length; ++i) {\n      signatures[i].test = compileTests(signatures[i].params);\n    }\n\n    const test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;\n    const test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;\n    const test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;\n    const test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;\n    const test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;\n    const test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;\n    const test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;\n    const test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;\n    const test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;\n    const test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;\n    const test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;\n    const test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk; // compile the functions\n\n    for (let i = 0; i < signatures.length; ++i) {\n      signatures[i].implementation = compileArgsPreprocessing(signatures[i].params, signatures[i].fn);\n    }\n\n    const fn0 = ok0 ? signatures[0].implementation : undef;\n    const fn1 = ok1 ? signatures[1].implementation : undef;\n    const fn2 = ok2 ? signatures[2].implementation : undef;\n    const fn3 = ok3 ? signatures[3].implementation : undef;\n    const fn4 = ok4 ? signatures[4].implementation : undef;\n    const fn5 = ok5 ? signatures[5].implementation : undef;\n    const len0 = ok0 ? signatures[0].params.length : -1;\n    const len1 = ok1 ? signatures[1].params.length : -1;\n    const len2 = ok2 ? signatures[2].params.length : -1;\n    const len3 = ok3 ? signatures[3].params.length : -1;\n    const len4 = ok4 ? signatures[4].params.length : -1;\n    const len5 = ok5 ? signatures[5].params.length : -1; // simple and generic, but also slow\n\n    const iStart = allOk ? 6 : 0;\n    const iEnd = signatures.length; // de-reference ahead for execution speed:\n\n    const tests = signatures.map(s => s.test);\n    const fns = signatures.map(s => s.implementation);\n\n    const generic = function generic() {\n      'use strict';\n\n      for (let i = iStart; i < iEnd; i++) {\n        if (tests[i](arguments)) {\n          return fns[i].apply(this, arguments);\n        }\n      }\n\n      return typed.onMismatch(name, arguments, signatures);\n    }; // create the typed function\n    // fast, specialized version. Falls back to the slower, generic one if needed\n\n\n    function theTypedFn(arg0, arg1) {\n      'use strict';\n\n      if (arguments.length === len0 && test00(arg0) && test01(arg1)) {\n        return fn0.apply(this, arguments);\n      }\n\n      if (arguments.length === len1 && test10(arg0) && test11(arg1)) {\n        return fn1.apply(this, arguments);\n      }\n\n      if (arguments.length === len2 && test20(arg0) && test21(arg1)) {\n        return fn2.apply(this, arguments);\n      }\n\n      if (arguments.length === len3 && test30(arg0) && test31(arg1)) {\n        return fn3.apply(this, arguments);\n      }\n\n      if (arguments.length === len4 && test40(arg0) && test41(arg1)) {\n        return fn4.apply(this, arguments);\n      }\n\n      if (arguments.length === len5 && test50(arg0) && test51(arg1)) {\n        return fn5.apply(this, arguments);\n      }\n\n      return generic.apply(this, arguments);\n    } // attach name the typed function\n\n\n    try {\n      Object.defineProperty(theTypedFn, 'name', {\n        value: name\n      });\n    } catch (err) {// old browsers do not support Object.defineProperty and some don't support setting the name property\n      // the function name is not essential for the functioning, it's mostly useful for debugging,\n      // so it's fine to have unnamed functions.\n    } // attach signatures to the function.\n    // This property is close to the original collection of signatures\n    // used to create the typed-function, just with unions split:\n\n\n    theTypedFn.signatures = signaturesMap; // Store internal data for functions like resolve, find, etc.\n    // Also serves as the flag that this is a typed-function\n\n    theTypedFn._typedFunctionData = {\n      signatures,\n      signatureMap: internalSignatureMap\n    };\n    return theTypedFn;\n  }\n  /**\n   * Action to take on mismatch\n   * @param {string} name      Name of function that was attempted to be called\n   * @param {Array} args       Actual arguments to the call\n   * @param {Array} signatures Known signatures of the named typed-function\n   */\n\n\n  function _onMismatch(name, args, signatures) {\n    throw createError(name, args, signatures);\n  }\n  /**\n   * Return all but the last items of an array or function Arguments\n   * @param {Array | Arguments} arr\n   * @return {Array}\n   */\n\n\n  function initial(arr) {\n    return slice(arr, 0, arr.length - 1);\n  }\n  /**\n   * return the last item of an array or function Arguments\n   * @param {Array | Arguments} arr\n   * @return {*}\n   */\n\n\n  function last(arr) {\n    return arr[arr.length - 1];\n  }\n  /**\n   * Slice an array or function Arguments\n   * @param {Array | Arguments | IArguments} arr\n   * @param {number} start\n   * @param {number} [end]\n   * @return {Array}\n   */\n\n\n  function slice(arr, start, end) {\n    return Array.prototype.slice.call(arr, start, end);\n  }\n  /**\n   * Return the first item from an array for which test(arr[i]) returns true\n   * @param {Array} arr\n   * @param {function} test\n   * @return {* | undefined} Returns the first matching item\n   *                         or undefined when there is no match\n   */\n\n\n  function findInArray(arr, test) {\n    for (let i = 0; i < arr.length; i++) {\n      if (test(arr[i])) {\n        return arr[i];\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * Flat map the result invoking a callback for every item in an array.\n   * https://gist.github.com/samgiles/762ee337dff48623e729\n   * @param {Array} arr\n   * @param {function} callback\n   * @return {Array}\n   */\n\n\n  function flatMap(arr, callback) {\n    return Array.prototype.concat.apply([], arr.map(callback));\n  }\n  /**\n   * Create a reference callback to one or multiple signatures\n   *\n   * Syntax:\n   *\n   *     typed.referTo(signature1, signature2, ..., function callback(fn1, fn2, ...) {\n   *       // ...\n   *     })\n   *\n   * @returns {{referTo: {references: string[], callback}}}\n   */\n\n\n  function referTo() {\n    const references = initial(arguments).map(s => stringifyParams(parseSignature(s)));\n    const callback = last(arguments);\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback function expected as last argument');\n    }\n\n    return makeReferTo(references, callback);\n  }\n\n  function makeReferTo(references, callback) {\n    return {\n      referTo: {\n        references,\n        callback\n      }\n    };\n  }\n  /**\n   * Create a reference callback to the typed-function itself\n   *\n   * @param {(self: function) => function} callback\n   * @returns {{referToSelf: { callback: function }}}\n   */\n\n\n  function referToSelf(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback function expected as first argument');\n    }\n\n    return {\n      referToSelf: {\n        callback\n      }\n    };\n  }\n  /**\n   * Test whether something is a referTo object, holding a list with reference\n   * signatures and a callback.\n   *\n   * @param {Object | function} objectOrFn\n   * @returns {boolean}\n   */\n\n\n  function isReferTo(objectOrFn) {\n    return objectOrFn && typeof objectOrFn.referTo === 'object' && Array.isArray(objectOrFn.referTo.references) && typeof objectOrFn.referTo.callback === 'function';\n  }\n  /**\n   * Test whether something is a referToSelf object, holding a callback where\n   * to pass `self`.\n   *\n   * @param {Object | function} objectOrFn\n   * @returns {boolean}\n   */\n\n\n  function isReferToSelf(objectOrFn) {\n    return objectOrFn && typeof objectOrFn.referToSelf === 'object' && typeof objectOrFn.referToSelf.callback === 'function';\n  }\n  /**\n   * Check if name is (A) new, (B) a match, or (C) a mismatch; and throw\n   * an error in case (C).\n   *\n   * @param { string | undefined } nameSoFar\n   * @param { string | undefined } newName\n   * @returns { string } updated name\n   */\n\n\n  function checkName(nameSoFar, newName) {\n    if (!nameSoFar) {\n      return newName;\n    }\n\n    if (newName && newName !== nameSoFar) {\n      const err = new Error('Function names do not match (expected: ' + nameSoFar + ', actual: ' + newName + ')');\n      err.data = {\n        actual: newName,\n        expected: nameSoFar\n      };\n      throw err;\n    }\n\n    return nameSoFar;\n  }\n  /**\n   * Retrieve the implied name from an object with signature keys\n   * and function values, checking whether all value names match\n   *\n   * @param { {string: function} } obj\n   */\n\n\n  function getObjectName(obj) {\n    let name;\n\n    for (const key in obj) {\n      // Only pay attention to own properties, and only if their values\n      // are typed functions or functions with a signature property\n      if (Object.prototype.hasOwnProperty.call(obj, key) && (isTypedFunction(obj[key]) || typeof obj[key].signature === 'string')) {\n        name = checkName(name, obj[key].name);\n      }\n    }\n\n    return name;\n  }\n  /**\n   * Copy all of the signatures from the second argument into the first,\n   * which is modified by side effect, checking for conflicts\n   *\n   * @param {Object.<string, function|typed-reference>} dest\n   * @param {Object.<string, function|typed-reference>} source\n   */\n\n\n  function mergeSignatures(dest, source) {\n    let key;\n\n    for (key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        if (key in dest) {\n          if (source[key] !== dest[key]) {\n            const err = new Error('Signature \"' + key + '\" is defined twice');\n            err.data = {\n              signature: key,\n              sourceFunction: source[key],\n              destFunction: dest[key]\n            };\n            throw err;\n          } // else: both signatures point to the same function, that's fine\n\n        }\n\n        dest[key] = source[key];\n      }\n    }\n  }\n\n  const saveTyped = typed;\n  /**\n   * Originally the main function was a typed function itself, but then\n   * it might not be able to generate error messages if the client\n   * replaced the type system with different names.\n   *\n   * Main entry: typed([name], functions/objects with signatures...)\n   *\n   * Assembles and returns a new typed-function from the given items\n   * that provide signatures and implementations, each of which may be\n   * * a plain object mapping (string) signatures to implementing functions,\n   * * a previously constructed typed function, or\n   * * any other single function with a string-valued property `signature`.\n    * The name of the resulting typed-function will be given by the\n   * string-valued name argument if present, or if not, by the name\n   * of any of the arguments that have one, as long as any that do are\n   * consistent with each other. If no name is specified, the name will be\n   * an empty string.\n   *\n   * @param {string} maybeName [optional]\n   * @param {(function|object)[]} signature providers\n   * @returns {typed-function}\n   */\n\n  typed = function (maybeName) {\n    const named = typeof maybeName === 'string';\n    const start = named ? 1 : 0;\n    let name = named ? maybeName : '';\n    const allSignatures = {};\n\n    for (let i = start; i < arguments.length; ++i) {\n      const item = arguments[i];\n      let theseSignatures = {};\n      let thisName;\n\n      if (typeof item === 'function') {\n        thisName = item.name;\n\n        if (typeof item.signature === 'string') {\n          // Case 1: Ordinary function with a string 'signature' property\n          theseSignatures[item.signature] = item;\n        } else if (isTypedFunction(item)) {\n          // Case 2: Existing typed function\n          theseSignatures = item.signatures;\n        }\n      } else if (isPlainObject(item)) {\n        // Case 3: Plain object, assume keys = signatures, values = functions\n        theseSignatures = item;\n\n        if (!named) {\n          thisName = getObjectName(item);\n        }\n      }\n\n      if (Object.keys(theseSignatures).length === 0) {\n        const err = new TypeError('Argument to \\'typed\\' at index ' + i + ' is not a (typed) function, ' + 'nor an object with signatures as keys and functions as values.');\n        err.data = {\n          index: i,\n          argument: item\n        };\n        throw err;\n      }\n\n      if (!named) {\n        name = checkName(name, thisName);\n      }\n\n      mergeSignatures(allSignatures, theseSignatures);\n    }\n\n    return createTypedFunction(name || '', allSignatures);\n  };\n\n  typed.create = create;\n  typed.createCount = saveTyped.createCount;\n  typed.onMismatch = _onMismatch;\n  typed.throwMismatchError = _onMismatch;\n  typed.createError = createError;\n  typed.clear = clear;\n  typed.clearConversions = clearConversions;\n  typed.addTypes = addTypes;\n  typed._findType = findType; // For unit testing only\n\n  typed.referTo = referTo;\n  typed.referToSelf = referToSelf;\n  typed.convert = convert;\n  typed.findSignature = findSignature;\n  typed.find = find;\n  typed.isTypedFunction = isTypedFunction;\n  typed.warnAgainstDeprecatedThis = true;\n  /**\n   * add a type (convenience wrapper for typed.addTypes)\n   * @param {{name: string, test: function}} type\n   * @param {boolean} [beforeObjectTest=true]\n   *                          If true, the new test will be inserted before\n   *                          the test with name 'Object' (if any), since\n   *                          tests for Object match Array and classes too.\n   */\n\n  typed.addType = function (type, beforeObjectTest) {\n    let before = 'any';\n\n    if (beforeObjectTest !== false && typeMap.has('Object')) {\n      before = 'Object';\n    }\n\n    typed.addTypes([type], before);\n  };\n  /**\n   * Verify that the ConversionDef conversion has a valid format.\n   *\n   * @param {conversionDef} conversion\n   * @return {void}\n   * @throws {TypeError|SyntaxError}\n   */\n\n\n  function _validateConversion(conversion) {\n    if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {\n      throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n    }\n\n    if (conversion.to === conversion.from) {\n      throw new SyntaxError('Illegal to define conversion from \"' + conversion.from + '\" to itself.');\n    }\n  }\n  /**\n   * Add a conversion\n   *\n   * @param {ConversionDef} conversion\n   * @returns {void}\n   * @throws {TypeError}\n   */\n\n\n  typed.addConversion = function (conversion) {\n    _validateConversion(conversion);\n\n    const to = findType(conversion.to);\n\n    if (to.conversionsTo.every(function (other) {\n      return other.from !== conversion.from;\n    })) {\n      to.conversionsTo.push({\n        from: conversion.from,\n        convert: conversion.convert,\n        index: nConversions++\n      });\n    } else {\n      throw new Error('There is already a conversion from \"' + conversion.from + '\" to \"' + to.name + '\"');\n    }\n  };\n  /**\n   * Convenience wrapper to call addConversion on each conversion in a list.\n   *\n   @param {ConversionDef[]} conversions\n   @returns {void}\n   @throws {TypeError}\n   */\n\n\n  typed.addConversions = function (conversions) {\n    conversions.forEach(typed.addConversion);\n  };\n  /**\n   * Remove the specified conversion. The format is the same as for\n   * addConversion, and the convert function must match or an error\n   * is thrown.\n   *\n   * @param {{from: string, to: string, convert: function}} conversion\n   * @returns {void}\n   * @throws {TypeError|SyntaxError|Error}\n   */\n\n\n  typed.removeConversion = function (conversion) {\n    _validateConversion(conversion);\n\n    const to = findType(conversion.to);\n    const existingConversion = findInArray(to.conversionsTo, c => c.from === conversion.from);\n\n    if (!existingConversion) {\n      throw new Error('Attempt to remove nonexistent conversion from ' + conversion.from + ' to ' + conversion.to);\n    }\n\n    if (existingConversion.convert !== conversion.convert) {\n      throw new Error('Conversion to remove does not match existing conversion');\n    }\n\n    const index = to.conversionsTo.indexOf(existingConversion);\n    to.conversionsTo.splice(index, 1);\n  };\n  /**\n   * Produce the specific signature that a typed function\n   * will execute on the given arguments. Here, a \"signature\" is an\n   * object with properties 'params', 'test', 'fn', and 'implementation'.\n   * This last property is a function that converts params as necessary\n   * and then calls 'fn'. Returns null if there is no matching signature.\n   * @param {typed-function} tf\n   * @param {any[]} argList\n   * @returns {{params: string, test: function, fn: function, implementation: function}}\n   */\n\n\n  typed.resolve = function (tf, argList) {\n    if (!isTypedFunction(tf)) {\n      throw new TypeError(NOT_TYPED_FUNCTION);\n    }\n\n    const sigs = tf._typedFunctionData.signatures;\n\n    for (let i = 0; i < sigs.length; ++i) {\n      if (sigs[i].test(argList)) {\n        return sigs[i];\n      }\n    }\n\n    return null;\n  };\n\n  return typed;\n}\n\nexport default create();\n//# sourceMappingURL=typed-function.mjs.map","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","import { hasOwnProperty } from './object.js';\n\n/**\n * Get a property of a plain object\n * Throws an error in case the object is not a plain object or the\n * property is not defined on the object itself\n * @param {Object} object\n * @param {string} prop\n * @return {*} Returns the property value when safe\n */\nfunction getSafeProperty(object, prop) {\n  // only allow getting safe properties of a plain object\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\n    return object[prop];\n  }\n  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {\n    throw new Error('Cannot access method \"' + prop + '\" as a property');\n  }\n  throw new Error('No access to property \"' + prop + '\"');\n}\n\n/**\n * Set a property on a plain object.\n * Throws an error in case the object is not a plain object or the\n * property would override an inherited property like .constructor or .toString\n * @param {Object} object\n * @param {string} prop\n * @param {*} value\n * @return {*} Returns the value\n */\n// TODO: merge this function into access.js?\nfunction setSafeProperty(object, prop, value) {\n  // only allow setting safe properties of a plain object\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\n    object[prop] = value;\n    return value;\n  }\n  throw new Error('No access to property \"' + prop + '\"');\n}\nfunction getSafeProperties(object) {\n  return Object.keys(object).filter(prop => hasOwnProperty(object, prop));\n}\nfunction hasSafeProperty(object, prop) {\n  return prop in object;\n}\n\n/**\n * Test whether a property is safe to use for an object.\n * For example .toString and .constructor are not safe\n * @param {string} prop\n * @return {boolean} Returns true when safe\n */\nfunction isSafeProperty(object, prop) {\n  if (!object || typeof object !== 'object') {\n    return false;\n  }\n  // SAFE: whitelisted\n  // e.g length\n  if (hasOwnProperty(safeNativeProperties, prop)) {\n    return true;\n  }\n  // UNSAFE: inherited from Object prototype\n  // e.g constructor\n  if (prop in Object.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Object.prototype is a root object\n    return false;\n  }\n  // UNSAFE: inherited from Function prototype\n  // e.g call, apply\n  if (prop in Function.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Function.prototype is a root object\n    return false;\n  }\n  return true;\n}\n\n/**\n * Validate whether a method is safe.\n * Throws an error when that's not the case.\n * @param {Object} object\n * @param {string} method\n * @return {function} Returns the method when valid\n */\nfunction getSafeMethod(object, method) {\n  if (!isSafeMethod(object, method)) {\n    throw new Error('No access to method \"' + method + '\"');\n  }\n  return object[method];\n}\n\n/**\n * Check whether a method is safe.\n * Throws an error when that's not the case (for example for `constructor`).\n * @param {Object} object\n * @param {string} method\n * @return {boolean} Returns true when safe, false otherwise\n */\nfunction isSafeMethod(object, method) {\n  if (object === null || object === undefined || typeof object[method] !== 'function') {\n    return false;\n  }\n  // UNSAFE: ghosted\n  // e.g overridden toString\n  // Note that IE10 doesn't support __proto__ and we can't do this check there.\n  if (hasOwnProperty(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {\n    return false;\n  }\n  // SAFE: whitelisted\n  // e.g toString\n  if (hasOwnProperty(safeNativeMethods, method)) {\n    return true;\n  }\n  // UNSAFE: inherited from Object prototype\n  // e.g constructor\n  if (method in Object.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Object.prototype is a root object\n    return false;\n  }\n  // UNSAFE: inherited from Function prototype\n  // e.g call, apply\n  if (method in Function.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Function.prototype is a root object\n    return false;\n  }\n  return true;\n}\nfunction isPlainObject(object) {\n  return typeof object === 'object' && object && object.constructor === Object;\n}\nvar safeNativeProperties = {\n  length: true,\n  name: true\n};\nvar safeNativeMethods = {\n  toString: true,\n  valueOf: true,\n  toLocaleString: true\n};\nexport { getSafeProperty };\nexport { setSafeProperty };\nexport { isSafeProperty };\nexport { hasSafeProperty };\nexport { getSafeProperties };\nexport { getSafeMethod };\nexport { isSafeMethod };\nexport { isPlainObject };","import { setSafeProperty, hasSafeProperty, getSafeProperty } from './customs.js';\nimport { isObject } from './is.js';\n\n/**\n * A map facade on a bare object.\n *\n * The small number of methods needed to implement a scope,\n * forwarding on to the SafeProperty functions. Over time, the codebase\n * will stop using this method, as all objects will be Maps, rather than\n * more security prone objects.\n */\nexport class ObjectWrappingMap {\n  constructor(object) {\n    this.wrappedObject = object;\n  }\n  keys() {\n    return Object.keys(this.wrappedObject);\n  }\n  get(key) {\n    return getSafeProperty(this.wrappedObject, key);\n  }\n  set(key, value) {\n    setSafeProperty(this.wrappedObject, key, value);\n    return this;\n  }\n  has(key) {\n    return hasSafeProperty(this.wrappedObject, key);\n  }\n}\n\n/**\n * Creates an empty map, or whatever your platform's polyfill is.\n *\n * @returns an empty Map or Map like object.\n */\nexport function createEmptyMap() {\n  return new Map();\n}\n\n/**\n * Creates a Map from the given object.\n *\n * @param { Map | { [key: string]: unknown } | undefined } mapOrObject\n * @returns\n */\nexport function createMap(mapOrObject) {\n  if (!mapOrObject) {\n    return createEmptyMap();\n  }\n  if (isMap(mapOrObject)) {\n    return mapOrObject;\n  }\n  if (isObject(mapOrObject)) {\n    return new ObjectWrappingMap(mapOrObject);\n  }\n  throw new Error('createMap can create maps from objects or Maps');\n}\n\n/**\n * Unwraps a map into an object.\n *\n * @param {Map} map\n * @returns { [key: string]: unknown }\n */\nexport function toObject(map) {\n  if (map instanceof ObjectWrappingMap) {\n    return map.wrappedObject;\n  }\n  var object = {};\n  for (var key of map.keys()) {\n    var value = map.get(key);\n    setSafeProperty(object, key, value);\n  }\n  return object;\n}\n\n/**\n * Returns `true` if the passed object appears to be a Map (i.e. duck typing).\n *\n * Methods looked for are `get`, `set`, `keys` and `has`.\n *\n * @param {Map | object} object\n * @returns\n */\nexport function isMap(object) {\n  // We can use the fast instanceof, or a slower duck typing check.\n  // The duck typing method needs to cover enough methods to not be confused with DenseMatrix.\n  if (!object) {\n    return false;\n  }\n  return object instanceof Map || object instanceof ObjectWrappingMap || typeof object.set === 'function' && typeof object.get === 'function' && typeof object.keys === 'function' && typeof object.has === 'function';\n}\n\n/**\n * Copies the contents of key-value pairs from each `objects` in to `map`.\n *\n * Object is `objects` can be a `Map` or object.\n *\n * This is the `Map` analog to `Object.assign`.\n */\nexport function assign(map) {\n  for (var _len = arguments.length, objects = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    objects[_key - 1] = arguments[_key];\n  }\n  for (var args of objects) {\n    if (!args) {\n      continue;\n    }\n    if (isMap(args)) {\n      for (var key of args.keys()) {\n        map.set(key, args.get(key));\n      }\n    } else if (isObject(args)) {\n      for (var _key2 of Object.keys(args)) {\n        map.set(_key2, args[_key2]);\n      }\n    }\n  }\n  return map;\n}","/**\n * Create a typed-function which checks the types of the arguments and\n * can match them against multiple provided signatures. The typed-function\n * automatically converts inputs in order to find a matching signature.\n * Typed functions throw informative errors in case of wrong input arguments.\n *\n * See the library [typed-function](https://github.com/josdejong/typed-function)\n * for detailed documentation.\n *\n * Syntax:\n *\n *     math.typed(name, signatures) : function\n *     math.typed(signatures) : function\n *\n * Examples:\n *\n *     // create a typed function with multiple types per argument (type union)\n *     const fn2 = typed({\n *       'number | boolean': function (b) {\n *         return 'b is a number or boolean'\n *       },\n *       'string, number | boolean': function (a, b) {\n *         return 'a is a string, b is a number or boolean'\n *       }\n *     })\n *\n *     // create a typed function with an any type argument\n *     const log = typed({\n *       'string, any': function (event, data) {\n *         console.log('event: ' + event + ', data: ' + JSON.stringify(data))\n *       }\n *     })\n *\n * @param {string} [name]                          Optional name for the typed-function\n * @param {Object<string, function>} signatures   Object with one or multiple function signatures\n * @returns {function} The created typed-function.\n */\n\nimport { isAccessorNode, isArray, isArrayNode, isAssignmentNode, isBigNumber, isBlockNode, isBoolean, isChain, isCollection, isComplex, isConditionalNode, isConstantNode, isDate, isDenseMatrix, isFraction, isFunction, isFunctionAssignmentNode, isFunctionNode, isHelp, isIndex, isIndexNode, isMatrix, isNode, isNull, isNumber, isObject, isObjectNode, isOperatorNode, isParenthesisNode, isRange, isRangeNode, isRelationalNode, isRegExp, isResultSet, isSparseMatrix, isString, isSymbolNode, isUndefined, isUnit } from '../../utils/is.js';\nimport typedFunction from 'typed-function';\nimport { digits } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { isMap } from '../../utils/map.js';\n\n// returns a new instance of typed-function\nvar _createTyped2 = function _createTyped() {\n  // initially, return the original instance of typed-function\n  // consecutively, return a new instance from typed.create.\n  _createTyped2 = typedFunction.create;\n  return typedFunction;\n};\nvar dependencies = ['?BigNumber', '?Complex', '?DenseMatrix', '?Fraction'];\n\n/**\n * Factory function for creating a new typed instance\n * @param {Object} dependencies   Object with data types like Complex and BigNumber\n * @returns {Function}\n */\nexport var createTyped = /* #__PURE__ */factory('typed', dependencies, function createTyped(_ref) {\n  var {\n    BigNumber,\n    Complex,\n    DenseMatrix,\n    Fraction\n  } = _ref;\n  // TODO: typed-function must be able to silently ignore signatures with unknown data types\n\n  // get a new instance of typed-function\n  var typed = _createTyped2();\n\n  // define all types. The order of the types determines in which order function\n  // arguments are type-checked (so for performance it's important to put the\n  // most used types first).\n  typed.clear();\n  typed.addTypes([{\n    name: 'number',\n    test: isNumber\n  }, {\n    name: 'Complex',\n    test: isComplex\n  }, {\n    name: 'BigNumber',\n    test: isBigNumber\n  }, {\n    name: 'Fraction',\n    test: isFraction\n  }, {\n    name: 'Unit',\n    test: isUnit\n  },\n  // The following type matches a valid variable name, i.e., an alphanumeric\n  // string starting with an alphabetic character. It is used (at least)\n  // in the definition of the derivative() function, as the argument telling\n  // what to differentiate over must (currently) be a variable.\n  {\n    name: 'identifier',\n    test: s => isString && /^(?:[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDF70-\\uDF81\\uDFB0-\\uDFC4\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE3F\\uDE40\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2\\uDF02\\uDF04-\\uDF10\\uDF12-\\uDF33\\uDFB0]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883\\uD885-\\uD887][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2F\\uDC41-\\uDC46]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE70-\\uDEBE\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD32\\uDD50-\\uDD52\\uDD55\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD837[\\uDF00-\\uDF1E\\uDF25-\\uDF2A]|\\uD838[\\uDC30-\\uDC6D\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB]|\\uD839[\\uDCD0-\\uDCEB\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF39\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A\\uDF50-\\uDFFF]|\\uD888[\\uDC00-\\uDFAF])(?:[0-9A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45\\uDF70-\\uDF81\\uDFB0-\\uDFC4\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE3F\\uDE40\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDEB8\\uDF00-\\uDF1A\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2\\uDF02\\uDF04-\\uDF10\\uDF12-\\uDF33\\uDFB0]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883\\uD885-\\uD887][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2F\\uDC41-\\uDC46]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE70-\\uDEBE\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD32\\uDD50-\\uDD52\\uDD55\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD837[\\uDF00-\\uDF1E\\uDF25-\\uDF2A]|\\uD838[\\uDC30-\\uDC6D\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB]|\\uD839[\\uDCD0-\\uDCEB\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD4B]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF39\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A\\uDF50-\\uDFFF]|\\uD888[\\uDC00-\\uDFAF])*$/.test(s)\n  }, {\n    name: 'string',\n    test: isString\n  }, {\n    name: 'Chain',\n    test: isChain\n  }, {\n    name: 'Array',\n    test: isArray\n  }, {\n    name: 'Matrix',\n    test: isMatrix\n  }, {\n    name: 'DenseMatrix',\n    test: isDenseMatrix\n  }, {\n    name: 'SparseMatrix',\n    test: isSparseMatrix\n  }, {\n    name: 'Range',\n    test: isRange\n  }, {\n    name: 'Index',\n    test: isIndex\n  }, {\n    name: 'boolean',\n    test: isBoolean\n  }, {\n    name: 'ResultSet',\n    test: isResultSet\n  }, {\n    name: 'Help',\n    test: isHelp\n  }, {\n    name: 'function',\n    test: isFunction\n  }, {\n    name: 'Date',\n    test: isDate\n  }, {\n    name: 'RegExp',\n    test: isRegExp\n  }, {\n    name: 'null',\n    test: isNull\n  }, {\n    name: 'undefined',\n    test: isUndefined\n  }, {\n    name: 'AccessorNode',\n    test: isAccessorNode\n  }, {\n    name: 'ArrayNode',\n    test: isArrayNode\n  }, {\n    name: 'AssignmentNode',\n    test: isAssignmentNode\n  }, {\n    name: 'BlockNode',\n    test: isBlockNode\n  }, {\n    name: 'ConditionalNode',\n    test: isConditionalNode\n  }, {\n    name: 'ConstantNode',\n    test: isConstantNode\n  }, {\n    name: 'FunctionNode',\n    test: isFunctionNode\n  }, {\n    name: 'FunctionAssignmentNode',\n    test: isFunctionAssignmentNode\n  }, {\n    name: 'IndexNode',\n    test: isIndexNode\n  }, {\n    name: 'Node',\n    test: isNode\n  }, {\n    name: 'ObjectNode',\n    test: isObjectNode\n  }, {\n    name: 'OperatorNode',\n    test: isOperatorNode\n  }, {\n    name: 'ParenthesisNode',\n    test: isParenthesisNode\n  }, {\n    name: 'RangeNode',\n    test: isRangeNode\n  }, {\n    name: 'RelationalNode',\n    test: isRelationalNode\n  }, {\n    name: 'SymbolNode',\n    test: isSymbolNode\n  }, {\n    name: 'Map',\n    test: isMap\n  }, {\n    name: 'Object',\n    test: isObject\n  } // order 'Object' last, it matches on other classes too\n  ]);\n\n  typed.addConversions([{\n    from: 'number',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      if (!BigNumber) {\n        throwNoBignumber(x);\n      }\n\n      // note: conversion from number to BigNumber can fail if x has >15 digits\n      if (digits(x) > 15) {\n        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');\n      }\n      return new BigNumber(x);\n    }\n  }, {\n    from: 'number',\n    to: 'Complex',\n    convert: function convert(x) {\n      if (!Complex) {\n        throwNoComplex(x);\n      }\n      return new Complex(x, 0);\n    }\n  }, {\n    from: 'BigNumber',\n    to: 'Complex',\n    convert: function convert(x) {\n      if (!Complex) {\n        throwNoComplex(x);\n      }\n      return new Complex(x.toNumber(), 0);\n    }\n  }, {\n    from: 'Fraction',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');\n    }\n  }, {\n    from: 'Fraction',\n    to: 'Complex',\n    convert: function convert(x) {\n      if (!Complex) {\n        throwNoComplex(x);\n      }\n      return new Complex(x.valueOf(), 0);\n    }\n  }, {\n    from: 'number',\n    to: 'Fraction',\n    convert: function convert(x) {\n      if (!Fraction) {\n        throwNoFraction(x);\n      }\n      var f = new Fraction(x);\n      if (f.valueOf() !== x) {\n        throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');\n      }\n      return f;\n    }\n  }, {\n    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`\n    //  from: 'Fraction',\n    //  to: 'number',\n    //  convert: function (x) {\n    //    return x.valueOf()\n    //  }\n    // }, {\n    from: 'string',\n    to: 'number',\n    convert: function convert(x) {\n      var n = Number(x);\n      if (isNaN(n)) {\n        throw new Error('Cannot convert \"' + x + '\" to a number');\n      }\n      return n;\n    }\n  }, {\n    from: 'string',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      if (!BigNumber) {\n        throwNoBignumber(x);\n      }\n      try {\n        return new BigNumber(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to BigNumber');\n      }\n    }\n  }, {\n    from: 'string',\n    to: 'Fraction',\n    convert: function convert(x) {\n      if (!Fraction) {\n        throwNoFraction(x);\n      }\n      try {\n        return new Fraction(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to Fraction');\n      }\n    }\n  }, {\n    from: 'string',\n    to: 'Complex',\n    convert: function convert(x) {\n      if (!Complex) {\n        throwNoComplex(x);\n      }\n      try {\n        return new Complex(x);\n      } catch (err) {\n        throw new Error('Cannot convert \"' + x + '\" to Complex');\n      }\n    }\n  }, {\n    from: 'boolean',\n    to: 'number',\n    convert: function convert(x) {\n      return +x;\n    }\n  }, {\n    from: 'boolean',\n    to: 'BigNumber',\n    convert: function convert(x) {\n      if (!BigNumber) {\n        throwNoBignumber(x);\n      }\n      return new BigNumber(+x);\n    }\n  }, {\n    from: 'boolean',\n    to: 'Fraction',\n    convert: function convert(x) {\n      if (!Fraction) {\n        throwNoFraction(x);\n      }\n      return new Fraction(+x);\n    }\n  }, {\n    from: 'boolean',\n    to: 'string',\n    convert: function convert(x) {\n      return String(x);\n    }\n  }, {\n    from: 'Array',\n    to: 'Matrix',\n    convert: function convert(array) {\n      if (!DenseMatrix) {\n        throwNoMatrix();\n      }\n      return new DenseMatrix(array);\n    }\n  }, {\n    from: 'Matrix',\n    to: 'Array',\n    convert: function convert(matrix) {\n      return matrix.valueOf();\n    }\n  }]);\n\n  // Provide a suggestion on how to call a function elementwise\n  // This was added primarily as guidance for the v10 -> v11 transition,\n  // and could potentially be removed in the future if it no longer seems\n  // to be helpful.\n  typed.onMismatch = (name, args, signatures) => {\n    var usualError = typed.createError(name, args, signatures);\n    if (['wrongType', 'mismatch'].includes(usualError.data.category) && args.length === 1 && isCollection(args[0]) &&\n    // check if the function can be unary:\n    signatures.some(sig => !sig.params.includes(','))) {\n      var err = new TypeError(\"Function '\".concat(name, \"' doesn't apply to matrices. To call it \") + \"elementwise on a matrix 'M', try 'map(M, \".concat(name, \")'.\"));\n      err.data = usualError.data;\n      throw err;\n    }\n    throw usualError;\n  };\n\n  // Provide a suggestion on how to call a function elementwise\n  // This was added primarily as guidance for the v10 -> v11 transition,\n  // and could potentially be removed in the future if it no longer seems\n  // to be helpful.\n  typed.onMismatch = (name, args, signatures) => {\n    var usualError = typed.createError(name, args, signatures);\n    if (['wrongType', 'mismatch'].includes(usualError.data.category) && args.length === 1 && isCollection(args[0]) &&\n    // check if the function can be unary:\n    signatures.some(sig => !sig.params.includes(','))) {\n      var err = new TypeError(\"Function '\".concat(name, \"' doesn't apply to matrices. To call it \") + \"elementwise on a matrix 'M', try 'map(M, \".concat(name, \")'.\"));\n      err.data = usualError.data;\n      throw err;\n    }\n    throw usualError;\n  };\n  return typed;\n});\nfunction throwNoBignumber(x) {\n  throw new Error(\"Cannot convert value \".concat(x, \" into a BigNumber: no class 'BigNumber' provided\"));\n}\nfunction throwNoComplex(x) {\n  throw new Error(\"Cannot convert value \".concat(x, \" into a Complex number: no class 'Complex' provided\"));\n}\nfunction throwNoMatrix() {\n  throw new Error('Cannot convert array into a Matrix: no class \\'DenseMatrix\\' provided');\n}\nfunction throwNoFraction(x) {\n  throw new Error(\"Cannot convert value \".concat(x, \" into a Fraction, no class 'Fraction' provided.\"));\n}","export var DEFAULT_CONFIG = {\n  // minimum relative difference between two compared values,\n  // used by all comparison functions\n  epsilon: 1e-12,\n  // type of default matrix output. Choose 'matrix' (default) or 'array'\n  matrix: 'Matrix',\n  // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction\n  number: 'number',\n  // number of significant digits in BigNumbers\n  precision: 64,\n  // predictable output type of functions. When true, output type depends only\n  // on the input types. When false (default), output type can vary depending\n  // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when\n  // predictable is false, and returns `NaN` when true.\n  predictable: false,\n  // random seed for seeded pseudo random number generation\n  // null = randomly seed\n  randomSeed: null\n};","import _extends from \"@babel/runtime/helpers/extends\";\nimport { DEFAULT_CONFIG } from '../core/config.js';\nimport { MATRIX_OPTIONS, NUMBER_OPTIONS } from '../core/function/config.js';\n\n// create a read-only version of config\nexport var config = /* #__PURE__ */function config(options) {\n  if (options) {\n    throw new Error('The global config is readonly. \\n' + 'Please create a mathjs instance if you want to change the default configuration. \\n' + 'Example:\\n' + '\\n' + '  import { create, all } from \\'mathjs\\';\\n' + '  const mathjs = create(all);\\n' + '  mathjs.config({ number: \\'BigNumber\\' });\\n');\n  }\n  return Object.freeze(DEFAULT_CONFIG);\n};\n_extends(config, DEFAULT_CONFIG, {\n  MATRIX_OPTIONS,\n  NUMBER_OPTIONS\n});","import { clone, mapObject, deepExtend } from '../../utils/object.js';\nimport { DEFAULT_CONFIG } from '../config.js';\nexport var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix\nexport var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number\n\nexport function configFactory(config, emit) {\n  /**\n   * Set configuration options for math.js, and get current options.\n   * Will emit a 'config' event, with arguments (curr, prev, changes).\n   *\n   * This function is only available on a mathjs instance created using `create`.\n   *\n   * Syntax:\n   *\n   *     math.config(config: Object): Object\n   *\n   * Examples:\n   *\n   *\n   *     import { create, all } from 'mathjs'\n   *\n   *     // create a mathjs instance\n   *     const math = create(all)\n   *\n   *     math.config().number                // outputs 'number'\n   *     math.evaluate('0.4')                // outputs number 0.4\n   *     math.config({number: 'Fraction'})\n   *     math.evaluate('0.4')                // outputs Fraction 2/5\n   *\n   * @param {Object} [options] Available options:\n   *                            {number} epsilon\n   *                              Minimum relative difference between two\n   *                              compared values, used by all comparison functions.\n   *                            {string} matrix\n   *                              A string 'Matrix' (default) or 'Array'.\n   *                            {string} number\n   *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n   *                            {number} precision\n   *                              The number of significant digits for BigNumbers.\n   *                              Not applicable for Numbers.\n   *                            {string} parenthesis\n   *                              How to display parentheses in LaTeX and string\n   *                              output.\n   *                            {string} randomSeed\n   *                              Random seed for seeded pseudo random number generator.\n   *                              Set to null to randomly seed.\n   * @return {Object} Returns the current configuration\n   */\n  function _config(options) {\n    if (options) {\n      var prev = mapObject(config, clone);\n\n      // validate some of the options\n      validateOption(options, 'matrix', MATRIX_OPTIONS);\n      validateOption(options, 'number', NUMBER_OPTIONS);\n\n      // merge options\n      deepExtend(config, options);\n      var curr = mapObject(config, clone);\n      var changes = mapObject(options, clone);\n\n      // emit 'config' event\n      emit('config', curr, prev, changes);\n      return curr;\n    } else {\n      return mapObject(config, clone);\n    }\n  }\n\n  // attach the valid options to the function so they can be extended\n  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;\n  _config.NUMBER_OPTIONS = NUMBER_OPTIONS;\n\n  // attach the config properties as readonly properties to the config function\n  Object.keys(DEFAULT_CONFIG).forEach(key => {\n    Object.defineProperty(_config, key, {\n      get: () => config[key],\n      enumerable: true,\n      configurable: true\n    });\n  });\n  return _config;\n}\n\n/**\n * Test whether an Array contains a specific item.\n * @param {Array.<string>} array\n * @param {string} item\n * @return {boolean}\n */\nfunction contains(array, item) {\n  return array.indexOf(item) !== -1;\n}\n\n/**\n * Validate an option\n * @param {Object} options         Object with options\n * @param {string} name            Name of the option to validate\n * @param {Array.<string>} values  Array with valid values for this option\n */\nfunction validateOption(options, name, values) {\n  if (options[name] !== undefined && !contains(values, options[name])) {\n    // unknown value\n    console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". ' + 'Available options: ' + values.map(value => JSON.stringify(value)).join(', ') + '.');\n  }\n}","/**\n * Create a range error with the message:\n *     'Dimension mismatch (<actual size> != <expected size>)'\n * @param {number | number[]} actual        The actual size\n * @param {number | number[]} expected      The expected size\n * @param {string} [relation='!=']          Optional relation between actual\n *                                          and expected size: '!=', '<', etc.\n * @extends RangeError\n */\nexport function DimensionError(actual, expected, relation) {\n  if (!(this instanceof DimensionError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n  this.actual = actual;\n  this.expected = expected;\n  this.relation = relation;\n  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';\n  this.stack = new Error().stack;\n}\nDimensionError.prototype = new RangeError();\nDimensionError.prototype.constructor = RangeError;\nDimensionError.prototype.name = 'DimensionError';\nDimensionError.prototype.isDimensionError = true;","/**\n * Create a range error with the message:\n *     'Index out of range (index < min)'\n *     'Index out of range (index < max)'\n *\n * @param {number} index     The actual index\n * @param {number} [min=0]   Minimum index (included)\n * @param {number} [max]     Maximum index (excluded)\n * @extends RangeError\n */\nexport function IndexError(index, min, max) {\n  if (!(this instanceof IndexError)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n  this.index = index;\n  if (arguments.length < 3) {\n    this.min = 0;\n    this.max = min;\n  } else {\n    this.min = min;\n    this.max = max;\n  }\n  if (this.min !== undefined && this.index < this.min) {\n    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';\n  } else if (this.max !== undefined && this.index >= this.max) {\n    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';\n  } else {\n    this.message = 'Index out of range (' + this.index + ')';\n  }\n  this.stack = new Error().stack;\n}\nIndexError.prototype = new RangeError();\nIndexError.prototype.constructor = RangeError;\nIndexError.prototype.name = 'IndexError';\nIndexError.prototype.isIndexError = true;","import { clone } from '../../../utils/object.js';\nimport { factory } from '../../../utils/factory.js';\nvar name = 'lup';\nvar dependencies = ['typed', 'matrix', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtractScalar', 'larger', 'equalScalar', 'unaryMinus', 'DenseMatrix', 'SparseMatrix', 'Spa'];\nexport var createLup = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    abs,\n    addScalar,\n    divideScalar,\n    multiplyScalar,\n    subtractScalar,\n    larger,\n    equalScalar,\n    unaryMinus,\n    DenseMatrix,\n    SparseMatrix,\n    Spa\n  } = _ref;\n  /**\n   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a\n   * row permutation vector `p` where `A[p,:] = L * U`\n   *\n   * Syntax:\n   *\n   *    math.lup(A)\n   *\n   * Example:\n   *\n   *    const m = [[2, 1], [1, 4]]\n   *    const r = math.lup(m)\n   *    // r = {\n   *    //   L: [[1, 0], [0.5, 1]],\n   *    //   U: [[2, 1], [0, 3.5]],\n   *    //   P: [0, 1]\n   *    // }\n   *\n   * See also:\n   *\n   *    slu, lsolve, lusolve, usolve\n   *\n   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.\n   *\n   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.\n   */\n  return typed(name, {\n    DenseMatrix: function DenseMatrix(m) {\n      return _denseLUP(m);\n    },\n    SparseMatrix: function SparseMatrix(m) {\n      return _sparseLUP(m);\n    },\n    Array: function Array(a) {\n      // create dense matrix from array\n      var m = matrix(a);\n      // lup, use matrix implementation\n      var r = _denseLUP(m);\n      // result\n      return {\n        L: r.L.valueOf(),\n        U: r.U.valueOf(),\n        p: r.p\n      };\n    }\n  });\n  function _denseLUP(m) {\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1];\n    // minimum rows and columns\n    var n = Math.min(rows, columns);\n    // matrix array, clone original data\n    var data = clone(m._data);\n    // l matrix arrays\n    var ldata = [];\n    var lsize = [rows, n];\n    // u matrix arrays\n    var udata = [];\n    var usize = [n, columns];\n    // vars\n    var i, j, k;\n    // permutation vector\n    var p = [];\n    for (i = 0; i < rows; i++) {\n      p[i] = i;\n    }\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // skip first column in upper triangular matrix\n      if (j > 0) {\n        // loop rows\n        for (i = 0; i < rows; i++) {\n          // min i,j\n          var min = Math.min(i, j);\n          // v[i, j]\n          var s = 0;\n          // loop up to min\n          for (k = 0; k < min; k++) {\n            // s = l[i, k] - data[k, j]\n            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));\n          }\n          data[i][j] = subtractScalar(data[i][j], s);\n        }\n      }\n      // row with larger value in cvector, row >= j\n      var pi = j;\n      var pabsv = 0;\n      var vjj = 0;\n      // loop rows\n      for (i = j; i < rows; i++) {\n        // data @ i, j\n        var v = data[i][j];\n        // absolute value\n        var absv = abs(v);\n        // value is greater than pivote value\n        if (larger(absv, pabsv)) {\n          // store row\n          pi = i;\n          // update max value\n          pabsv = absv;\n          // value @ [j, j]\n          vjj = v;\n        }\n      }\n      // swap rows (j <-> pi)\n      if (j !== pi) {\n        // swap values j <-> pi in p\n        p[j] = [p[pi], p[pi] = p[j]][0];\n        // swap j <-> pi in data\n        DenseMatrix._swapRows(j, pi, data);\n      }\n      // check column is in lower triangular matrix\n      if (j < rows) {\n        // loop rows (lower triangular matrix)\n        for (i = j + 1; i < rows; i++) {\n          // value @ i, j\n          var vij = data[i][j];\n          if (!equalScalar(vij, 0)) {\n            // update data\n            data[i][j] = divideScalar(data[i][j], vjj);\n          }\n        }\n      }\n    }\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // initialize row in arrays\n        if (j === 0) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i] = [];\n          }\n          // L\n          ldata[i] = [];\n        }\n        // check we are in the upper triangular matrix\n        if (i < j) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i][j] = data[i][j];\n          }\n          // check column exists in lower triangular matrix\n          if (j < rows) {\n            // L\n            ldata[i][j] = 0;\n          }\n          continue;\n        }\n        // diagonal value\n        if (i === j) {\n          // check row exists in upper triangular matrix\n          if (i < columns) {\n            // U\n            udata[i][j] = data[i][j];\n          }\n          // check column exists in lower triangular matrix\n          if (j < rows) {\n            // L\n            ldata[i][j] = 1;\n          }\n          continue;\n        }\n        // check row exists in upper triangular matrix\n        if (i < columns) {\n          // U\n          udata[i][j] = 0;\n        }\n        // check column exists in lower triangular matrix\n        if (j < rows) {\n          // L\n          ldata[i][j] = data[i][j];\n        }\n      }\n    }\n    // l matrix\n    var l = new DenseMatrix({\n      data: ldata,\n      size: lsize\n    });\n    // u matrix\n    var u = new DenseMatrix({\n      data: udata,\n      size: usize\n    });\n    // p vector\n    var pv = [];\n    for (i = 0, n = p.length; i < n; i++) {\n      pv[p[i]] = i;\n    }\n    // return matrices\n    return {\n      L: l,\n      U: u,\n      p: pv,\n      toString: function toString() {\n        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n      }\n    };\n  }\n  function _sparseLUP(m) {\n    // rows & columns\n    var rows = m._size[0];\n    var columns = m._size[1];\n    // minimum rows and columns\n    var n = Math.min(rows, columns);\n    // matrix arrays (will not be modified, thanks to permutation vector)\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // l matrix arrays\n    var lvalues = [];\n    var lindex = [];\n    var lptr = [];\n    var lsize = [rows, n];\n    // u matrix arrays\n    var uvalues = [];\n    var uindex = [];\n    var uptr = [];\n    var usize = [n, columns];\n    // vars\n    var i, j, k;\n    // permutation vectors, (current index -> original index) and (original index -> current index)\n    var pvCo = [];\n    var pvOc = [];\n    for (i = 0; i < rows; i++) {\n      pvCo[i] = i;\n      pvOc[i] = i;\n    }\n    // swap indices in permutation vectors (condition x < y)!\n    var swapIndeces = function swapIndeces(x, y) {\n      // find pv indeces getting data from x and y\n      var kx = pvOc[x];\n      var ky = pvOc[y];\n      // update permutation vector current -> original\n      pvCo[kx] = y;\n      pvCo[ky] = x;\n      // update permutation vector original -> current\n      pvOc[x] = ky;\n      pvOc[y] = kx;\n    };\n    // loop columns\n    var _loop = function _loop() {\n      // sparse accumulator\n      var spa = new Spa();\n      // check lower triangular matrix has a value @ column j\n      if (j < rows) {\n        // update ptr\n        lptr.push(lvalues.length);\n        // first value in j column for lower triangular matrix\n        lvalues.push(1);\n        lindex.push(j);\n      }\n      // update ptr\n      uptr.push(uvalues.length);\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // copy column j into sparse accumulator\n      for (k = k0; k < k1; k++) {\n        // row\n        i = index[k];\n        // copy column values into sparse accumulator (use permutation vector)\n        spa.set(pvCo[i], values[k]);\n      }\n      // skip first column in upper triangular matrix\n      if (j > 0) {\n        // loop rows in column j (above diagonal)\n        spa.forEach(0, j - 1, function (k, vkj) {\n          // loop rows in column k (L)\n          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {\n            // check row is below k\n            if (i > k) {\n              // update spa value\n              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));\n            }\n          });\n        });\n      }\n      // row with larger value in spa, row >= j\n      var pi = j;\n      var vjj = spa.get(j);\n      var pabsv = abs(vjj);\n      // loop values in spa (order by row, below diagonal)\n      spa.forEach(j + 1, rows - 1, function (x, v) {\n        // absolute value\n        var absv = abs(v);\n        // value is greater than pivote value\n        if (larger(absv, pabsv)) {\n          // store row\n          pi = x;\n          // update max value\n          pabsv = absv;\n          // value @ [j, j]\n          vjj = v;\n        }\n      });\n      // swap rows (j <-> pi)\n      if (j !== pi) {\n        // swap values j <-> pi in L\n        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr);\n        // swap values j <-> pi in U\n        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr);\n        // swap values in spa\n        spa.swap(j, pi);\n        // update permutation vector (swap values @ j, pi)\n        swapIndeces(j, pi);\n      }\n      // loop values in spa (order by row)\n      spa.forEach(0, rows - 1, function (x, v) {\n        // check we are above diagonal\n        if (x <= j) {\n          // update upper triangular matrix\n          uvalues.push(v);\n          uindex.push(x);\n        } else {\n          // update value\n          v = divideScalar(v, vjj);\n          // check value is non zero\n          if (!equalScalar(v, 0)) {\n            // update lower triangular matrix\n            lvalues.push(v);\n            lindex.push(x);\n          }\n        }\n      });\n    };\n    for (j = 0; j < columns; j++) {\n      _loop();\n    }\n    // update ptrs\n    uptr.push(uvalues.length);\n    lptr.push(lvalues.length);\n\n    // return matrices\n    return {\n      L: new SparseMatrix({\n        values: lvalues,\n        index: lindex,\n        ptr: lptr,\n        size: lsize\n      }),\n      U: new SparseMatrix({\n        values: uvalues,\n        index: uindex,\n        ptr: uptr,\n        size: usize\n      }),\n      p: pvCo,\n      toString: function toString() {\n        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;\n      }\n    };\n  }\n});","/**\n * Depth-first search and postorder of a tree rooted at node j\n *\n * @param {Number}  j               The tree node\n * @param {Number}  k\n * @param {Array}   w               The workspace array\n * @param {Number}  head            The index offset within the workspace for the head array\n * @param {Number}  next            The index offset within the workspace for the next array\n * @param {Array}   post            The post ordering array\n * @param {Number}  stack           The index offset within the workspace for the stack array\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csTdfs(j, k, w, head, next, post, stack) {\n  // variables\n  var top = 0;\n  // place j on the stack\n  w[stack] = j;\n  // while (stack is not empty)\n  while (top >= 0) {\n    // p = top of stack\n    var p = w[stack + top];\n    // i = youngest child of p\n    var i = w[head + p];\n    if (i === -1) {\n      // p has no unordered children left\n      top--;\n      // node p is the kth postordered node\n      post[k++] = p;\n    } else {\n      // remove i from children of p\n      w[head + p] = w[next + i];\n      // increment top\n      ++top;\n      // start dfs on child node i\n      w[stack + top] = i;\n    }\n  }\n  return k;\n}","import { factory } from '../../../utils/factory.js';\nimport { csFkeep } from './csFkeep.js';\nimport { csFlip } from './csFlip.js';\nimport { csTdfs } from './csTdfs.js';\nvar name = 'csAmd';\nvar dependencies = ['add', 'multiply', 'transpose'];\nexport var createCsAmd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    add,\n    multiply,\n    transpose\n  } = _ref;\n  /**\n   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used\n   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization\n   * than A. It is a gready method that selects the sparsest pivot row and column during the course\n   * of a right looking sparse Cholesky factorization.\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   *\n   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR\n   * @param {Matrix} m        Sparse Matrix\n   */\n  return function csAmd(order, a) {\n    // check input parameters\n    if (!a || order <= 0 || order > 3) {\n      return null;\n    }\n    // a matrix arrays\n    var asize = a._size;\n    // rows and columns\n    var m = asize[0];\n    var n = asize[1];\n    // initialize vars\n    var lemax = 0;\n    // dense threshold\n    var dense = Math.max(16, 10 * Math.sqrt(n));\n    dense = Math.min(n - 2, dense);\n    // create target matrix C\n    var cm = _createTargetMatrix(order, a, m, n, dense);\n    // drop diagonal entries\n    csFkeep(cm, _diag, null);\n    // C matrix arrays\n    var cindex = cm._index;\n    var cptr = cm._ptr;\n\n    // number of nonzero elements in C\n    var cnz = cptr[n];\n\n    // allocate result (n+1)\n    var P = [];\n\n    // create workspace (8 * (n + 1))\n    var W = [];\n    var len = 0; // first n + 1 entries\n    var nv = n + 1; // next n + 1 entries\n    var next = 2 * (n + 1); // next n + 1 entries\n    var head = 3 * (n + 1); // next n + 1 entries\n    var elen = 4 * (n + 1); // next n + 1 entries\n    var degree = 5 * (n + 1); // next n + 1 entries\n    var w = 6 * (n + 1); // next n + 1 entries\n    var hhead = 7 * (n + 1); // last n + 1 entries\n\n    // use P as workspace for last\n    var last = P;\n\n    // initialize quotient graph\n    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree);\n\n    // initialize degree lists\n    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next);\n\n    // minimum degree node\n    var mindeg = 0;\n\n    // vars\n    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d;\n\n    // while (selecting pivots) do\n    while (nel < n) {\n      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first\n      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow\n      // many nodes have been eliminated.\n      for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++);\n      if (W[next + k] !== -1) {\n        last[W[next + k]] = -1;\n      }\n      // remove k from degree list\n      W[head + mindeg] = W[next + k];\n      // elenk = |Ek|\n      var elenk = W[elen + k];\n      // # of nodes k represents\n      var nvk = W[nv + k];\n      // W[nv + k] nodes of A eliminated\n      nel += nvk;\n\n      // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is\n      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the\n      // degree lists. All elements e in Ek are absorved into element k.\n      var dk = 0;\n      // flag k as in Lk\n      W[nv + k] = -nvk;\n      var p = cptr[k];\n      // do in place if W[elen + k] === 0\n      var pk1 = elenk === 0 ? p : cnz;\n      var pk2 = pk1;\n      for (k1 = 1; k1 <= elenk + 1; k1++) {\n        if (k1 > elenk) {\n          // search the nodes in k\n          e = k;\n          // list of nodes starts at cindex[pj]\n          pj = p;\n          // length of list of nodes in k\n          ln = W[len + k] - elenk;\n        } else {\n          // search the nodes in e\n          e = cindex[p++];\n          pj = cptr[e];\n          // length of list of nodes in e\n          ln = W[len + e];\n        }\n        for (k2 = 1; k2 <= ln; k2++) {\n          i = cindex[pj++];\n          // check  node i dead, or seen\n          if ((nvi = W[nv + i]) <= 0) {\n            continue;\n          }\n          // W[degree + Lk] += size of node i\n          dk += nvi;\n          // negate W[nv + i] to denote i in Lk\n          W[nv + i] = -nvi;\n          // place i in Lk\n          cindex[pk2++] = i;\n          if (W[next + i] !== -1) {\n            last[W[next + i]] = last[i];\n          }\n          // check we need to remove i from degree list\n          if (last[i] !== -1) {\n            W[next + last[i]] = W[next + i];\n          } else {\n            W[head + W[degree + i]] = W[next + i];\n          }\n        }\n        if (e !== k) {\n          // absorb e into k\n          cptr[e] = csFlip(k);\n          // e is now a dead element\n          W[w + e] = 0;\n        }\n      }\n      // cindex[cnz...nzmax] is free\n      if (elenk !== 0) {\n        cnz = pk2;\n      }\n      // external degree of k - |Lk\\i|\n      W[degree + k] = dk;\n      // element k is in cindex[pk1..pk2-1]\n      cptr[k] = pk1;\n      W[len + k] = pk2 - pk1;\n      // k is now an element\n      W[elen + k] = -2;\n\n      // Find set differences. The scan1 function now computes the set differences |Le \\ Lk| for all elements e. At the start of the\n      // scan, no entry in the w array is greater than or equal to mark.\n\n      // clear w if necessary\n      mark = _wclear(mark, lemax, W, w, n);\n      // scan 1: find |Le\\Lk|\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk];\n        // check if W[elen + i] empty, skip it\n        if ((eln = W[elen + i]) <= 0) {\n          continue;\n        }\n        // W[nv + i] was negated\n        nvi = -W[nv + i];\n        var wnvi = mark - nvi;\n        // scan Ei\n        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {\n          e = cindex[p];\n          if (W[w + e] >= mark) {\n            // decrement |Le\\Lk|\n            W[w + e] -= nvi;\n          } else if (W[w + e] !== 0) {\n            // ensure e is a live element, 1st time e seen in scan 1\n            W[w + e] = W[degree + e] + wnvi;\n          }\n        }\n      }\n\n      // degree update\n      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash\n      // function h(i) for all nodes in Lk.\n\n      // scan2: degree update\n      for (pk = pk1; pk < pk2; pk++) {\n        // consider node i in Lk\n        i = cindex[pk];\n        p1 = cptr[i];\n        p2 = p1 + W[elen + i] - 1;\n        pn = p1;\n        // scan Ei\n        for (h = 0, d = 0, p = p1; p <= p2; p++) {\n          e = cindex[p];\n          // check e is an unabsorbed element\n          if (W[w + e] !== 0) {\n            // dext = |Le\\Lk|\n            var dext = W[w + e] - mark;\n            if (dext > 0) {\n              // sum up the set differences\n              d += dext;\n              // keep e in Ei\n              cindex[pn++] = e;\n              // compute the hash of node i\n              h += e;\n            } else {\n              // aggressive absorb. e->k\n              cptr[e] = csFlip(k);\n              // e is a dead element\n              W[w + e] = 0;\n            }\n          }\n        }\n        // W[elen + i] = |Ei|\n        W[elen + i] = pn - p1 + 1;\n        var p3 = pn;\n        var p4 = p1 + W[len + i];\n        // prune edges in Ai\n        for (p = p2 + 1; p < p4; p++) {\n          j = cindex[p];\n          // check node j dead or in Lk\n          var nvj = W[nv + j];\n          if (nvj <= 0) {\n            continue;\n          }\n          // degree(i) += |j|\n          d += nvj;\n          // place j in node list of i\n          cindex[pn++] = j;\n          // compute hash for node i\n          h += j;\n        }\n        // check for mass elimination\n        if (d === 0) {\n          // absorb i into k\n          cptr[i] = csFlip(k);\n          nvi = -W[nv + i];\n          // |Lk| -= |i|\n          dk -= nvi;\n          // |k| += W[nv + i]\n          nvk += nvi;\n          nel += nvi;\n          W[nv + i] = 0;\n          // node i is dead\n          W[elen + i] = -1;\n        } else {\n          // update degree(i)\n          W[degree + i] = Math.min(W[degree + i], d);\n          // move first node to end\n          cindex[pn] = cindex[p3];\n          // move 1st el. to end of Ei\n          cindex[p3] = cindex[p1];\n          // add k as 1st element in of Ei\n          cindex[p1] = k;\n          // new len of adj. list of node i\n          W[len + i] = pn - p1 + 1;\n          // finalize hash of i\n          h = (h < 0 ? -h : h) % n;\n          // place i in hash bucket\n          W[next + i] = W[hhead + h];\n          W[hhead + h] = i;\n          // save hash of i in last[i]\n          last[i] = h;\n        }\n      }\n      // finalize |Lk|\n      W[degree + k] = dk;\n      lemax = Math.max(lemax, dk);\n      // clear w\n      mark = _wclear(mark + lemax, lemax, W, w, n);\n\n      // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.\n      // If two nodes have identical adjacency lists, their hash functions wil be identical.\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk];\n        // check i is dead, skip it\n        if (W[nv + i] >= 0) {\n          continue;\n        }\n        // scan hash bucket of node i\n        h = last[i];\n        i = W[hhead + h];\n        // hash bucket will be empty\n        W[hhead + h] = -1;\n        for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {\n          ln = W[len + i];\n          eln = W[elen + i];\n          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {\n            W[w + cindex[p]] = mark;\n          }\n          var jlast = i;\n          // compare i with all j\n          for (j = W[next + i]; j !== -1;) {\n            var ok = W[len + j] === ln && W[elen + j] === eln;\n            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {\n              // compare i and j\n              if (W[w + cindex[p]] !== mark) {\n                ok = 0;\n              }\n            }\n            // check i and j are identical\n            if (ok) {\n              // absorb j into i\n              cptr[j] = csFlip(i);\n              W[nv + i] += W[nv + j];\n              W[nv + j] = 0;\n              // node j is dead\n              W[elen + j] = -1;\n              // delete j from hash bucket\n              j = W[next + j];\n              W[next + jlast] = j;\n            } else {\n              // j and i are different\n              jlast = j;\n              j = W[next + j];\n            }\n          }\n        }\n      }\n\n      // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.\n      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.\n      for (p = pk1, pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk];\n        // check  i is dead, skip it\n        if ((nvi = -W[nv + i]) <= 0) {\n          continue;\n        }\n        // restore W[nv + i]\n        W[nv + i] = nvi;\n        // compute external degree(i)\n        d = W[degree + i] + dk - nvi;\n        d = Math.min(d, n - nel - nvi);\n        if (W[head + d] !== -1) {\n          last[W[head + d]] = i;\n        }\n        // put i back in degree list\n        W[next + i] = W[head + d];\n        last[i] = -1;\n        W[head + d] = i;\n        // find new minimum degree\n        mindeg = Math.min(mindeg, d);\n        W[degree + i] = d;\n        // place i in Lk\n        cindex[p++] = i;\n      }\n      // # nodes absorbed into k\n      W[nv + k] = nvk;\n      // length of adj list of element k\n      if ((W[len + k] = p - pk1) === 0) {\n        // k is a root of the tree\n        cptr[k] = -1;\n        // k is now a dead element\n        W[w + k] = 0;\n      }\n      if (elenk !== 0) {\n        // free unused space in Lk\n        cnz = p;\n      }\n    }\n\n    // Postordering. The elimination is complete, but no permutation has been computed. All that is left\n    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if\n    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation\n    // is computed. The tree is restored by unflipping all of ptr.\n\n    // fix assembly tree\n    for (i = 0; i < n; i++) {\n      cptr[i] = csFlip(cptr[i]);\n    }\n    for (j = 0; j <= n; j++) {\n      W[head + j] = -1;\n    }\n    // place unordered nodes in lists\n    for (j = n; j >= 0; j--) {\n      // skip if j is an element\n      if (W[nv + j] > 0) {\n        continue;\n      }\n      // place j in list of its parent\n      W[next + j] = W[head + cptr[j]];\n      W[head + cptr[j]] = j;\n    }\n    // place elements in lists\n    for (e = n; e >= 0; e--) {\n      // skip unless e is an element\n      if (W[nv + e] <= 0) {\n        continue;\n      }\n      if (cptr[e] !== -1) {\n        // place e in list of its parent\n        W[next + e] = W[head + cptr[e]];\n        W[head + cptr[e]] = e;\n      }\n    }\n    // postorder the assembly tree\n    for (k = 0, i = 0; i <= n; i++) {\n      if (cptr[i] === -1) {\n        k = csTdfs(i, k, W, head, next, P, w);\n      }\n    }\n    // remove last item in array\n    P.splice(P.length - 1, 1);\n    // return P\n    return P;\n  };\n\n  /**\n   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation\n   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.\n   *\n   * Order: 0\n   *   A natural ordering P=null matrix is returned.\n   *\n   * Order: 1\n   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.\n   *   P = M + M'\n   *\n   * Order: 2\n   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.\n   *   P = M' * M\n   *\n   * Order: 3\n   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\n   *   P = M' * M\n   */\n  function _createTargetMatrix(order, a, m, n, dense) {\n    // compute A'\n    var at = transpose(a);\n\n    // check order = 1, matrix must be square\n    if (order === 1 && n === m) {\n      // C = A + A'\n      return add(a, at);\n    }\n\n    // check order = 2, drop dense columns from M'\n    if (order === 2) {\n      // transpose arrays\n      var tindex = at._index;\n      var tptr = at._ptr;\n      // new column index\n      var p2 = 0;\n      // loop A' columns (rows)\n      for (var j = 0; j < m; j++) {\n        // column j of AT starts here\n        var p = tptr[j];\n        // new column j starts here\n        tptr[j] = p2;\n        // skip dense col j\n        if (tptr[j + 1] - p > dense) {\n          continue;\n        }\n        // map rows in column j of A\n        for (var p1 = tptr[j + 1]; p < p1; p++) {\n          tindex[p2++] = tindex[p];\n        }\n      }\n      // finalize AT\n      tptr[m] = p2;\n      // recreate A from new transpose matrix\n      a = transpose(at);\n      // use A' * A\n      return multiply(at, a);\n    }\n\n    // use A' * A, square or rectangular matrix\n    return multiply(at, a);\n  }\n\n  /**\n   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:\n   *\n   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.\n   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).\n   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.\n   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).\n   */\n  function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {\n    // Initialize quotient graph\n    for (var k = 0; k < n; k++) {\n      W[len + k] = cptr[k + 1] - cptr[k];\n    }\n    W[len + n] = 0;\n    // initialize workspace\n    for (var i = 0; i <= n; i++) {\n      // degree list i is empty\n      W[head + i] = -1;\n      last[i] = -1;\n      W[next + i] = -1;\n      // hash list i is empty\n      W[hhead + i] = -1;\n      // node i is just one node\n      W[nv + i] = 1;\n      // node i is alive\n      W[w + i] = 1;\n      // Ek of node i is empty\n      W[elen + i] = 0;\n      // degree of node i\n      W[degree + i] = W[len + i];\n    }\n    // clear w\n    var mark = _wclear(0, 0, W, w, n);\n    // n is a dead element\n    W[elen + n] = -2;\n    // n is a root of assembly tree\n    cptr[n] = -1;\n    // n is a dead element\n    W[w + n] = 0;\n    // return mark\n    return mark;\n  }\n\n  /**\n   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with\n   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the\n   * output permutation p.\n   */\n  function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {\n    // result\n    var nel = 0;\n    // loop columns\n    for (var i = 0; i < n; i++) {\n      // degree @ i\n      var d = W[degree + i];\n      // check node i is empty\n      if (d === 0) {\n        // element i is dead\n        W[elen + i] = -2;\n        nel++;\n        // i is a root of assembly tree\n        cptr[i] = -1;\n        W[w + i] = 0;\n      } else if (d > dense) {\n        // absorb i into element n\n        W[nv + i] = 0;\n        // node i is dead\n        W[elen + i] = -1;\n        nel++;\n        cptr[i] = csFlip(n);\n        W[nv + n]++;\n      } else {\n        var h = W[head + d];\n        if (h !== -1) {\n          last[h] = i;\n        }\n        // put node i in degree list d\n        W[next + i] = W[head + d];\n        W[head + d] = i;\n      }\n    }\n    return nel;\n  }\n  function _wclear(mark, lemax, W, w, n) {\n    if (mark < 2 || mark + lemax < 0) {\n      for (var k = 0; k < n; k++) {\n        if (W[w + k] !== 0) {\n          W[w + k] = 1;\n        }\n      }\n      mark = 2;\n    }\n    // at this point, W [0..n-1] < mark holds\n    return mark;\n  }\n  function _diag(i, j) {\n    return i !== j;\n  }\n});","/**\n * This function \"flips\" its input about the integer -1.\n *\n * @param {Number}  i               The value to flip\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csFlip(i) {\n  // flip the value\n  return -i - 2;\n}","/**\n * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise\n *\n * @param {Matrix}   a              The sparse matrix\n * @param {function} callback       The callback function, function will be invoked with the following args:\n *                                    - The entry row\n *                                    - The entry column\n *                                    - The entry value\n *                                    - The state parameter\n * @param {any}      other          The state\n *\n * @return                          The number of nonzero elements in the matrix\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csFkeep(a, callback, other) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr;\n  var asize = a._size;\n  // columns\n  var n = asize[1];\n  // nonzero items\n  var nz = 0;\n  // loop columns\n  for (var j = 0; j < n; j++) {\n    // get current location of col j\n    var p = aptr[j];\n    // record new location of col j\n    aptr[j] = nz;\n    for (; p < aptr[j + 1]; p++) {\n      // check we need to keep this item\n      if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {\n        // keep A(i,j)\n        aindex[nz] = aindex[p];\n        // check we need to process values (pattern only)\n        if (avalues) {\n          avalues[nz] = avalues[p];\n        }\n        // increment nonzero items\n        nz++;\n      }\n    }\n  }\n  // finalize A\n  aptr[n] = nz;\n  // trim arrays\n  aindex.splice(nz, aindex.length - nz);\n  // check we need to process values (pattern only)\n  if (avalues) {\n    avalues.splice(nz, avalues.length - nz);\n  }\n  // return number of nonzero items\n  return nz;\n}","import { factory } from '../../../utils/factory.js';\nimport { csLeaf } from './csLeaf.js';\nvar name = 'csCounts';\nvar dependencies = ['transpose'];\nexport var createCsCounts = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    transpose\n  } = _ref;\n  /**\n   * Computes the column counts using the upper triangular part of A.\n   * It transposes A internally, none of the input parameters are modified.\n   *\n   * @param {Matrix} a           The sparse matrix A\n   *\n   * @param {Matrix} ata         Count the columns of A'A instead\n   *\n   * @return                     An array of size n of the column counts or null on error\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  return function (a, parent, post, ata) {\n    // check inputs\n    if (!a || !parent || !post) {\n      return null;\n    }\n    // a matrix arrays\n    var asize = a._size;\n    // rows and columns\n    var m = asize[0];\n    var n = asize[1];\n    // variables\n    var i, j, k, J, p, p0, p1;\n\n    // workspace size\n    var s = 4 * n + (ata ? n + m + 1 : 0);\n    // allocate workspace\n    var w = []; // (s)\n    var ancestor = 0; // first n entries\n    var maxfirst = n; // next n entries\n    var prevleaf = 2 * n; // next n entries\n    var first = 3 * n; // next n entries\n    var head = 4 * n; // next n + 1 entries (used when ata is true)\n    var next = 5 * n + 1; // last entries in workspace\n    // clear workspace w[0..s-1]\n    for (k = 0; k < s; k++) {\n      w[k] = -1;\n    }\n\n    // allocate result\n    var colcount = []; // (n)\n\n    // AT = A'\n    var at = transpose(a);\n    // at arrays\n    var tindex = at._index;\n    var tptr = at._ptr;\n\n    // find w[first + j]\n    for (k = 0; k < n; k++) {\n      j = post[k];\n      // colcount[j]=1 if j is a leaf\n      colcount[j] = w[first + j] === -1 ? 1 : 0;\n      for (; j !== -1 && w[first + j] === -1; j = parent[j]) {\n        w[first + j] = k;\n      }\n    }\n\n    // initialize ata if needed\n    if (ata) {\n      // invert post\n      for (k = 0; k < n; k++) {\n        w[post[k]] = k;\n      }\n      // loop rows (columns in AT)\n      for (i = 0; i < m; i++) {\n        // values in column i of AT\n        for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) {\n          k = Math.min(k, w[tindex[p]]);\n        }\n        // place row i in linked list k\n        w[next + i] = w[head + k];\n        w[head + k] = i;\n      }\n    }\n\n    // each node in its own set\n    for (i = 0; i < n; i++) {\n      w[ancestor + i] = i;\n    }\n    for (k = 0; k < n; k++) {\n      // j is the kth node in postordered etree\n      j = post[k];\n      // check j is not a root\n      if (parent[j] !== -1) {\n        colcount[parent[j]]--;\n      }\n\n      // J=j for LL'=A case\n      for (J = ata ? w[head + k] : j; J !== -1; J = ata ? w[next + J] : -1) {\n        for (p = tptr[J]; p < tptr[J + 1]; p++) {\n          i = tindex[p];\n          var r = csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor);\n          // check A(i,j) is in skeleton\n          if (r.jleaf >= 1) {\n            colcount[j]++;\n          }\n          // check account for overlap in q\n          if (r.jleaf === 2) {\n            colcount[r.q]--;\n          }\n        }\n      }\n      if (parent[j] !== -1) {\n        w[ancestor + j] = parent[j];\n      }\n    }\n    // sum up colcount's of each child\n    for (j = 0; j < n; j++) {\n      if (parent[j] !== -1) {\n        colcount[parent[j]] += colcount[j];\n      }\n    }\n    return colcount;\n  };\n});","/**\n * This function determines if j is a leaf of the ith row subtree.\n * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)\n *\n * @param {Number}  i               The ith row subtree\n * @param {Number}  j               The node to test\n * @param {Array}   w               The workspace array\n * @param {Number}  first           The index offset within the workspace for the first array\n * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array\n * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array\n * @param {Number}  ancestor        The index offset within the workspace for the ancestor array\n *\n * @return {Object}\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor) {\n  var s, sparent;\n\n  // our result\n  var jleaf = 0;\n  var q;\n\n  // check j is a leaf\n  if (i <= j || w[first + j] <= w[maxfirst + i]) {\n    return -1;\n  }\n  // update max first[j] seen so far\n  w[maxfirst + i] = w[first + j];\n  // jprev = previous leaf of ith subtree\n  var jprev = w[prevleaf + i];\n  w[prevleaf + i] = j;\n\n  // check j is first or subsequent leaf\n  if (jprev === -1) {\n    // 1st leaf, q = root of ith subtree\n    jleaf = 1;\n    q = i;\n  } else {\n    // update jleaf\n    jleaf = 2;\n    // q = least common ancester (jprev,j)\n    for (q = jprev; q !== w[ancestor + q]; q = w[ancestor + q]);\n    for (s = jprev; s !== q; s = sparent) {\n      // path compression\n      sparent = w[ancestor + s];\n      w[ancestor + s] = q;\n    }\n  }\n  return {\n    jleaf,\n    q\n  };\n}","import { csPermute } from './csPermute.js';\nimport { csPost } from './csPost.js';\nimport { csEtree } from './csEtree.js';\nimport { createCsAmd } from './csAmd.js';\nimport { createCsCounts } from './csCounts.js';\nimport { factory } from '../../../utils/factory.js';\nvar name = 'csSqr';\nvar dependencies = ['add', 'multiply', 'transpose'];\nexport var createCsSqr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    add,\n    multiply,\n    transpose\n  } = _ref;\n  var csAmd = createCsAmd({\n    add,\n    multiply,\n    transpose\n  });\n  var csCounts = createCsCounts({\n    transpose\n  });\n\n  /**\n   * Symbolic ordering and analysis for QR and LU decompositions.\n   *\n   * @param {Number}  order           The ordering strategy (see csAmd for more details)\n   * @param {Matrix}  a               The A matrix\n   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or\n   *                                  symbolic ordering and analysis for LU decomposition (false)\n   *\n   * @return {Object}                 The Symbolic ordering and analysis for matrix A\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  return function csSqr(order, a, qr) {\n    // a arrays\n    var aptr = a._ptr;\n    var asize = a._size;\n    // columns\n    var n = asize[1];\n    // vars\n    var k;\n    // symbolic analysis result\n    var s = {};\n    // fill-reducing ordering\n    s.q = csAmd(order, a);\n    // validate results\n    if (order && !s.q) {\n      return null;\n    }\n    // QR symbolic analysis\n    if (qr) {\n      // apply permutations if needed\n      var c = order ? csPermute(a, null, s.q, 0) : a;\n      // etree of C'*C, where C=A(:,q)\n      s.parent = csEtree(c, 1);\n      // post order elimination tree\n      var post = csPost(s.parent, n);\n      // col counts chol(C'*C)\n      s.cp = csCounts(c, s.parent, post, 1);\n      // check we have everything needed to calculate number of nonzero elements\n      if (c && s.parent && s.cp && _vcount(c, s)) {\n        // calculate number of nonzero elements\n        for (s.unz = 0, k = 0; k < n; k++) {\n          s.unz += s.cp[k];\n        }\n      }\n    } else {\n      // for LU factorization only, guess nnz(L) and nnz(U)\n      s.unz = 4 * aptr[n] + n;\n      s.lnz = s.unz;\n    }\n    // return result S\n    return s;\n  };\n\n  /**\n   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent\n   */\n  function _vcount(a, s) {\n    // a arrays\n    var aptr = a._ptr;\n    var aindex = a._index;\n    var asize = a._size;\n    // rows & columns\n    var m = asize[0];\n    var n = asize[1];\n    // initialize s arrays\n    s.pinv = []; // (m + n)\n    s.leftmost = []; // (m)\n    // vars\n    var parent = s.parent;\n    var pinv = s.pinv;\n    var leftmost = s.leftmost;\n    // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries\n    var w = []; // (m + 3 * n)\n    var next = 0;\n    var head = m;\n    var tail = m + n;\n    var nque = m + 2 * n;\n    // vars\n    var i, k, p, p0, p1;\n    // initialize w\n    for (k = 0; k < n; k++) {\n      // queue k is empty\n      w[head + k] = -1;\n      w[tail + k] = -1;\n      w[nque + k] = 0;\n    }\n    // initialize row arrays\n    for (i = 0; i < m; i++) {\n      leftmost[i] = -1;\n    }\n    // loop columns backwards\n    for (k = n - 1; k >= 0; k--) {\n      // values & index for column k\n      for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {\n        // leftmost[i] = min(find(A(i,:)))\n        leftmost[aindex[p]] = k;\n      }\n    }\n    // scan rows in reverse order\n    for (i = m - 1; i >= 0; i--) {\n      // row i is not yet ordered\n      pinv[i] = -1;\n      k = leftmost[i];\n      // check row i is empty\n      if (k === -1) {\n        continue;\n      }\n      // first row in queue k\n      if (w[nque + k]++ === 0) {\n        w[tail + k] = i;\n      }\n      // put i at head of queue k\n      w[next + i] = w[head + k];\n      w[head + k] = i;\n    }\n    s.lnz = 0;\n    s.m2 = m;\n    // find row permutation and nnz(V)\n    for (k = 0; k < n; k++) {\n      // remove row i from queue k\n      i = w[head + k];\n      // count V(k,k) as nonzero\n      s.lnz++;\n      // add a fictitious row\n      if (i < 0) {\n        i = s.m2++;\n      }\n      // associate row i with V(:,k)\n      pinv[i] = k;\n      // skip if V(k+1:m,k) is empty\n      if (--nque[k] <= 0) {\n        continue;\n      }\n      // nque[k] is nnz (V(k+1:m,k))\n      s.lnz += w[nque + k];\n      // move all rows to parent of k\n      var pa = parent[k];\n      if (pa !== -1) {\n        if (w[nque + pa] === 0) {\n          w[tail + pa] = w[tail + k];\n        }\n        w[next + w[tail + k]] = w[head + pa];\n        w[head + pa] = w[next + i];\n        w[nque + pa] += w[nque + k];\n      }\n    }\n    for (i = 0; i < m; i++) {\n      if (pinv[i] < 0) {\n        pinv[i] = k++;\n      }\n    }\n    return true;\n  }\n});","/**\n * Permutes a sparse matrix C = P * A * Q\n *\n * @param {SparseMatrix}  a         The Matrix A\n * @param {Array}   pinv            The row permutation vector\n * @param {Array}   q               The column permutation vector\n * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise\n *\n * @return {Matrix}                 C = P * A * Q, null on error\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csPermute(a, pinv, q, values) {\n  // a arrays\n  var avalues = a._values;\n  var aindex = a._index;\n  var aptr = a._ptr;\n  var asize = a._size;\n  var adt = a._datatype;\n  // rows & columns\n  var m = asize[0];\n  var n = asize[1];\n  // c arrays\n  var cvalues = values && a._values ? [] : null;\n  var cindex = []; // (aptr[n])\n  var cptr = []; // (n + 1)\n  // initialize vars\n  var nz = 0;\n  // loop columns\n  for (var k = 0; k < n; k++) {\n    // column k of C is column q[k] of A\n    cptr[k] = nz;\n    // apply column permutation\n    var j = q ? q[k] : k;\n    // loop values in column j of A\n    for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {\n      // row i of A is row pinv[i] of C\n      var r = pinv ? pinv[aindex[t]] : aindex[t];\n      // index\n      cindex[nz] = r;\n      // check we need to populate values\n      if (cvalues) {\n        cvalues[nz] = avalues[t];\n      }\n      // increment number of nonzero elements\n      nz++;\n    }\n  }\n  // finalize the last column of C\n  cptr[n] = nz;\n  // return C matrix\n  return a.createSparseMatrix({\n    values: cvalues,\n    index: cindex,\n    ptr: cptr,\n    size: [m, n],\n    datatype: adt\n  });\n}","/**\n * Computes the elimination tree of Matrix A (using triu(A)) or the\n * elimination tree of A'A without forming A'A.\n *\n * @param {Matrix}  a               The A Matrix\n * @param {boolean} ata             A value of true the function computes the etree of A'A\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csEtree(a, ata) {\n  // check inputs\n  if (!a) {\n    return null;\n  }\n  // a arrays\n  var aindex = a._index;\n  var aptr = a._ptr;\n  var asize = a._size;\n  // rows & columns\n  var m = asize[0];\n  var n = asize[1];\n\n  // allocate result\n  var parent = []; // (n)\n\n  // allocate workspace\n  var w = []; // (n + (ata ? m : 0))\n  var ancestor = 0; // first n entries in w\n  var prev = n; // last m entries (ata = true)\n\n  var i, inext;\n\n  // check we are calculating A'A\n  if (ata) {\n    // initialize workspace\n    for (i = 0; i < m; i++) {\n      w[prev + i] = -1;\n    }\n  }\n  // loop columns\n  for (var k = 0; k < n; k++) {\n    // node k has no parent yet\n    parent[k] = -1;\n    // nor does k have an ancestor\n    w[ancestor + k] = -1;\n    // values in column k\n    for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {\n      // row\n      var r = aindex[p];\n      // node\n      i = ata ? w[prev + r] : r;\n      // traverse from i to k\n      for (; i !== -1 && i < k; i = inext) {\n        // inext = ancestor of i\n        inext = w[ancestor + i];\n        // path compression\n        w[ancestor + i] = k;\n        // check no anc., parent is k\n        if (inext === -1) {\n          parent[i] = k;\n        }\n      }\n      if (ata) {\n        w[prev + r] = k;\n      }\n    }\n  }\n  return parent;\n}","import { csTdfs } from './csTdfs.js';\n\n/**\n * Post order a tree of forest\n *\n * @param {Array}   parent          The tree or forest\n * @param {Number}  n               Number of columns\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csPost(parent, n) {\n  // check inputs\n  if (!parent) {\n    return null;\n  }\n  // vars\n  var k = 0;\n  var j;\n  // allocate result\n  var post = []; // (n)\n  // workspace, head: first n entries, next: next n entries, stack: last n entries\n  var w = []; // (3 * n)\n  var head = 0;\n  var next = n;\n  var stack = 2 * n;\n  // initialize workspace\n  for (j = 0; j < n; j++) {\n    // empty linked lists\n    w[head + j] = -1;\n  }\n  // traverse nodes in reverse order\n  for (j = n - 1; j >= 0; j--) {\n    // check j is a root\n    if (parent[j] === -1) {\n      continue;\n    }\n    // add j to list of its parent\n    w[next + j] = w[head + parent[j]];\n    w[head + parent[j]] = j;\n  }\n  // loop nodes\n  for (j = 0; j < n; j++) {\n    // skip j if it is not a root\n    if (parent[j] !== -1) {\n      continue;\n    }\n    // depth-first search\n    k = csTdfs(j, k, w, head, next, post, stack);\n  }\n  return post;\n}","import { csFlip } from './csFlip.js';\n\n/**\n * Marks the node at w[j]\n *\n * @param {Array}   w               The array\n * @param {Number}  j               The array index\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csMark(w, j) {\n  // mark w[j]\n  w[j] = csFlip(w[j]);\n}","import { csFlip } from './csFlip.js';\n\n/**\n * Flips the value if it is negative of returns the same value otherwise.\n *\n * @param {Number}  i               The value to flip\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csUnflip(i) {\n  // flip the value if it is negative\n  return i < 0 ? csFlip(i) : i;\n}","import { csReach } from './csReach.js';\nimport { factory } from '../../../utils/factory.js';\nvar name = 'csSpsolve';\nvar dependencies = ['divideScalar', 'multiply', 'subtract'];\nexport var createCsSpsolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    divideScalar,\n    multiply,\n    subtract\n  } = _ref;\n  /**\n   * The function csSpsolve() computes the solution to G * x = bk, where bk is the\n   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the\n   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U\n   * is upper triangular with the diagonal entry as the last entry in each column.\n   *\n   * @param {Matrix}  g               The G matrix\n   * @param {Matrix}  b               The B matrix\n   * @param {Number}  k               The kth column in B\n   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n   *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n   * @param {Array}   x               The soluton to the linear system G * x = b\n   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n   * @param {boolean} lo              The lower (true) upper triangular (false) flag\n   *\n   * @return {Number}                 The index for the nonzero pattern\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  return function csSpsolve(g, b, k, xi, x, pinv, lo) {\n    // g arrays\n    var gvalues = g._values;\n    var gindex = g._index;\n    var gptr = g._ptr;\n    var gsize = g._size;\n    // columns\n    var n = gsize[1];\n    // b arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    // vars\n    var p, p0, p1, q;\n    // xi[top..n-1] = csReach(B(:,k))\n    var top = csReach(g, b, k, xi, pinv);\n    // clear x\n    for (p = top; p < n; p++) {\n      x[xi[p]] = 0;\n    }\n    // scatter b\n    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {\n      x[bindex[p]] = bvalues[p];\n    }\n    // loop columns\n    for (var px = top; px < n; px++) {\n      // x array index for px\n      var j = xi[px];\n      // apply permutation vector (U x = b), j maps to column J of G\n      var J = pinv ? pinv[j] : j;\n      // check column J is empty\n      if (J < 0) {\n        continue;\n      }\n      // column value indeces in G, p0 <= p < p1\n      p0 = gptr[J];\n      p1 = gptr[J + 1];\n      // x(j) /= G(j,j)\n      x[j] = divideScalar(x[j], gvalues[lo ? p0 : p1 - 1]);\n      // first entry L(j,j)\n      p = lo ? p0 + 1 : p0;\n      q = lo ? p1 : p1 - 1;\n      // loop\n      for (; p < q; p++) {\n        // row\n        var i = gindex[p];\n        // x(i) -= G(i,j) * x(j)\n        x[i] = subtract(x[i], multiply(gvalues[p], x[j]));\n      }\n    }\n    // return top of stack\n    return top;\n  };\n});","import { csMarked } from './csMarked.js';\nimport { csMark } from './csMark.js';\nimport { csDfs } from './csDfs.js';\n\n/**\n * The csReach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1\n * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The\n * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).\n *\n * @param {Matrix}  g               The G matrix\n * @param {Matrix}  b               The B matrix\n * @param {Number}  k               The kth column in B\n * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n * @param {Array}   pinv            The inverse row permutation vector\n *\n * @return {Number}                 The index for the nonzero pattern\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csReach(g, b, k, xi, pinv) {\n  // g arrays\n  var gptr = g._ptr;\n  var gsize = g._size;\n  // b arrays\n  var bindex = b._index;\n  var bptr = b._ptr;\n  // columns\n  var n = gsize[1];\n  // vars\n  var p, p0, p1;\n  // initialize top\n  var top = n;\n  // loop column indeces in B\n  for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {\n    // node i\n    var i = bindex[p];\n    // check node i is marked\n    if (!csMarked(gptr, i)) {\n      // start a dfs at unmarked node i\n      top = csDfs(i, g, top, xi, pinv);\n    }\n  }\n  // loop columns from top -> n - 1\n  for (p = top; p < n; p++) {\n    // restore G\n    csMark(gptr, xi[p]);\n  }\n  return top;\n}","/**\n * Checks if the node at w[j] is marked\n *\n * @param {Array}   w               The array\n * @param {Number}  j               The array index\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csMarked(w, j) {\n  // check node is marked\n  return w[j] < 0;\n}","import { csMarked } from './csMarked.js';\nimport { csMark } from './csMark.js';\nimport { csUnflip } from './csUnflip.js';\n\n/**\n * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting\n * at nodes in B (see csReach()).\n *\n * @param {Number}  j               The starting node for the DFS algorithm\n * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored\n * @param {Number}  top             Start index in stack xi[top..n-1]\n * @param {Number}  k               The kth column in B\n * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n\n *                                  The first n entries is the nonzero pattern, the last n entries is the stack\n * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b\n *\n * @return {Number}                 New value of top\n *\n * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n */\nexport function csDfs(j, g, top, xi, pinv) {\n  // g arrays\n  var index = g._index;\n  var ptr = g._ptr;\n  var size = g._size;\n  // columns\n  var n = size[1];\n  // vars\n  var i, p, p2;\n  // initialize head\n  var head = 0;\n  // initialize the recursion stack\n  xi[0] = j;\n  // loop\n  while (head >= 0) {\n    // get j from the top of the recursion stack\n    j = xi[head];\n    // apply permutation vector\n    var jnew = pinv ? pinv[j] : j;\n    // check node j is marked\n    if (!csMarked(ptr, j)) {\n      // mark node j as visited\n      csMark(ptr, j);\n      // update stack (last n entries in xi)\n      xi[n + head] = jnew < 0 ? 0 : csUnflip(ptr[jnew]);\n    }\n    // node j done if no unvisited neighbors\n    var done = 1;\n    // examine all neighbors of j, stack (last n entries in xi)\n    for (p = xi[n + head], p2 = jnew < 0 ? 0 : csUnflip(ptr[jnew + 1]); p < p2; p++) {\n      // consider neighbor node i\n      i = index[p];\n      // check we have visited node i, skip it\n      if (csMarked(ptr, i)) {\n        continue;\n      }\n      // pause depth-first search of node j, update stack (last n entries in xi)\n      xi[n + head] = p;\n      // start dfs at node i\n      xi[++head] = i;\n      // node j is not done\n      done = 0;\n      // break, to start dfs(i)\n      break;\n    }\n    // check depth-first search at node j is done\n    if (done) {\n      // remove j from the recursion stack\n      head--;\n      // and place in the output stack\n      xi[--top] = j;\n    }\n  }\n  return top;\n}","import { factory } from '../../../utils/factory.js';\nimport { createCsSpsolve } from './csSpsolve.js';\nvar name = 'csLu';\nvar dependencies = ['abs', 'divideScalar', 'multiply', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];\nexport var createCsLu = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    abs,\n    divideScalar,\n    multiply,\n    subtract,\n    larger,\n    largerEq,\n    SparseMatrix\n  } = _ref;\n  var csSpsolve = createCsSpsolve({\n    divideScalar,\n    multiply,\n    subtract\n  });\n\n  /**\n   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization\n   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L\n   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so\n   * L * U = A(p, q), where p is the inverse of pinv.\n   *\n   * @param {Matrix}  m               The A Matrix to factorize\n   * @param {Object}  s               The symbolic analysis from csSqr(). Provides the fill-reducing\n   *                                  column ordering q\n   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)\n   *\n   * @return {Number}                 The numeric LU factorization of A or null\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  return function csLu(m, s, tol) {\n    // validate input\n    if (!m) {\n      return null;\n    }\n    // m arrays\n    var size = m._size;\n    // columns\n    var n = size[1];\n    // symbolic analysis result\n    var q;\n    var lnz = 100;\n    var unz = 100;\n    // update symbolic analysis parameters\n    if (s) {\n      q = s.q;\n      lnz = s.lnz || lnz;\n      unz = s.unz || unz;\n    }\n    // L arrays\n    var lvalues = []; // (lnz)\n    var lindex = []; // (lnz)\n    var lptr = []; // (n + 1)\n    // L\n    var L = new SparseMatrix({\n      values: lvalues,\n      index: lindex,\n      ptr: lptr,\n      size: [n, n]\n    });\n    // U arrays\n    var uvalues = []; // (unz)\n    var uindex = []; // (unz)\n    var uptr = []; // (n + 1)\n    // U\n    var U = new SparseMatrix({\n      values: uvalues,\n      index: uindex,\n      ptr: uptr,\n      size: [n, n]\n    });\n    // inverse of permutation vector\n    var pinv = []; // (n)\n    // vars\n    var i, p;\n    // allocate arrays\n    var x = []; // (n)\n    var xi = []; // (2 * n)\n    // initialize variables\n    for (i = 0; i < n; i++) {\n      // clear workspace\n      x[i] = 0;\n      // no rows pivotal yet\n      pinv[i] = -1;\n      // no cols of L yet\n      lptr[i + 1] = 0;\n    }\n    // reset number of nonzero elements in L and U\n    lnz = 0;\n    unz = 0;\n    // compute L(:,k) and U(:,k)\n    for (var k = 0; k < n; k++) {\n      // update ptr\n      lptr[k] = lnz;\n      uptr[k] = unz;\n      // apply column permutations if needed\n      var col = q ? q[k] : k;\n      // solve triangular system, x = L\\A(:,col)\n      var top = csSpsolve(L, m, col, xi, x, pinv, 1);\n      // find pivot\n      var ipiv = -1;\n      var a = -1;\n      // loop xi[] from top -> n\n      for (p = top; p < n; p++) {\n        // x[i] is nonzero\n        i = xi[p];\n        // check row i is not yet pivotal\n        if (pinv[i] < 0) {\n          // absolute value of x[i]\n          var xabs = abs(x[i]);\n          // check absoulte value is greater than pivot value\n          if (larger(xabs, a)) {\n            // largest pivot candidate so far\n            a = xabs;\n            ipiv = i;\n          }\n        } else {\n          // x(i) is the entry U(pinv[i],k)\n          uindex[unz] = pinv[i];\n          uvalues[unz++] = x[i];\n        }\n      }\n      // validate we found a valid pivot\n      if (ipiv === -1 || a <= 0) {\n        return null;\n      }\n      // update actual pivot column, give preference to diagonal value\n      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol))) {\n        ipiv = col;\n      }\n      // the chosen pivot\n      var pivot = x[ipiv];\n      // last entry in U(:,k) is U(k,k)\n      uindex[unz] = k;\n      uvalues[unz++] = pivot;\n      // ipiv is the kth pivot row\n      pinv[ipiv] = k;\n      // first entry in L(:,k) is L(k,k) = 1\n      lindex[lnz] = ipiv;\n      lvalues[lnz++] = 1;\n      // L(k+1:n,k) = x / pivot\n      for (p = top; p < n; p++) {\n        // row\n        i = xi[p];\n        // check x(i) is an entry in L(:,k)\n        if (pinv[i] < 0) {\n          // save unpermuted row in L\n          lindex[lnz] = i;\n          // scale pivot column\n          lvalues[lnz++] = divideScalar(x[i], pivot);\n        }\n        // x[0..n-1] = 0 for next k\n        x[i] = 0;\n      }\n    }\n    // update ptr\n    lptr[n] = lnz;\n    uptr[n] = unz;\n    // fix row indices of L for final pinv\n    for (p = 0; p < lnz; p++) {\n      lindex[p] = pinv[lindex[p]];\n    }\n    // trim arrays\n    lvalues.splice(lnz, lvalues.length - lnz);\n    lindex.splice(lnz, lindex.length - lnz);\n    uvalues.splice(unz, uvalues.length - unz);\n    uindex.splice(unz, uindex.length - unz);\n    // return LU factor\n    return {\n      L,\n      U,\n      pinv\n    };\n  };\n});","import { isInteger } from '../../../utils/number.js';\nimport { factory } from '../../../utils/factory.js';\nimport { createCsSqr } from '../sparse/csSqr.js';\nimport { createCsLu } from '../sparse/csLu.js';\nvar name = 'slu';\nvar dependencies = ['typed', 'abs', 'add', 'multiply', 'transpose', 'divideScalar', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];\nexport var createSlu = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    multiply,\n    transpose,\n    divideScalar,\n    subtract,\n    larger,\n    largerEq,\n    SparseMatrix\n  } = _ref;\n  var csSqr = createCsSqr({\n    add,\n    multiply,\n    transpose\n  });\n  var csLu = createCsLu({\n    abs,\n    divideScalar,\n    multiply,\n    subtract,\n    larger,\n    largerEq,\n    SparseMatrix\n  });\n\n  /**\n   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where\n   *\n   * `P * A * Q = L * U`\n   *\n   * Syntax:\n   *\n   *    math.slu(A, order, threshold)\n   *\n   * Examples:\n   *\n   *    const A = math.sparse([[4,3], [6, 3]])\n   *    math.slu(A, 1, 0.001)\n   *    // returns:\n   *    // {\n   *    //   L: [[1, 0], [1.5, 1]]\n   *    //   U: [[4, 3], [0, -1.5]]\n   *    //   p: [0, 1]\n   *    //   q: [0, 1]\n   *    // }\n   *\n   * See also:\n   *\n   *    lup, lsolve, usolve, lusolve\n   *\n   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.\n   * @param {Number}       order          The Symbolic Ordering and Analysis order:\n   *                                       0 - Natural ordering, no permutation vector q is returned\n   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'\n   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'.\n   *                                           This is appropriatefor LU factorization of unsymmetric matrices.\n   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.\n   *                                           A dense row is a row with more than 10*sqr(columns) entries.\n   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)\n   *\n   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.\n   */\n  return typed(name, {\n    'SparseMatrix, number, number': function SparseMatrixNumberNumber(a, order, threshold) {\n      // verify order\n      if (!isInteger(order) || order < 0 || order > 3) {\n        throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');\n      }\n      // verify threshold\n      if (threshold < 0 || threshold > 1) {\n        throw new Error('Partial pivoting threshold must be a number from 0 to 1');\n      }\n\n      // perform symbolic ordering and analysis\n      var s = csSqr(order, a, false);\n\n      // perform lu decomposition\n      var f = csLu(a, s, threshold);\n\n      // return decomposition\n      return {\n        L: f.L,\n        U: f.U,\n        p: f.pinv,\n        q: s.q,\n        toString: function toString() {\n          return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\np: ' + this.p.toString() + (this.q ? '\\nq: ' + this.q.toString() : '') + '\\n';\n        }\n      };\n    }\n  });\n});","import { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nvar name = 'lsolve';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtractScalar', 'equalScalar', 'DenseMatrix'];\nexport var createLsolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    multiplyScalar,\n    subtractScalar,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n\n  /**\n   * Finds one solution of a linear equation system by forwards substitution. Matrix must be a lower triangular matrix. Throws an error if there's no solution.\n   *\n   * `L * x = b`\n   *\n   * Syntax:\n   *\n   *    math.lsolve(L, b)\n   *\n   * Examples:\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = lsolve(a, b)  // [[-5.5], [20]]\n   *\n   * See also:\n   *\n   *    lsolveAll, lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} L       A N x N matrix or array (L)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)\n   */\n  return typed(name, {\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {\n      return _sparseForwardSubstitution(m, b);\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {\n      return _denseForwardSubstitution(m, b);\n    },\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      var m = matrix(a);\n      var r = _denseForwardSubstitution(m, b);\n      return r.valueOf();\n    }\n  });\n  function _denseForwardSubstitution(m, b) {\n    // validate matrix and vector, return copy of column vector b\n    b = solveValidation(m, b, true);\n    var bdata = b._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n\n    // result\n    var x = [];\n    var mdata = m._data;\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      var bj = bdata[j][0] || 0;\n      var xj = void 0;\n      if (!equalScalar(bj, 0)) {\n        // non-degenerate row, find solution\n\n        var vjj = mdata[j][j];\n        if (equalScalar(vjj, 0)) {\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        xj = divideScalar(bj, vjj);\n\n        // loop rows\n        for (var i = j + 1; i < rows; i++) {\n          bdata[i] = [subtractScalar(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];\n        }\n      } else {\n        // degenerate row, we can choose any value\n        xj = 0;\n      }\n      x[j] = [xj];\n    }\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  }\n  function _sparseForwardSubstitution(m, b) {\n    // validate matrix and vector, return copy of column vector b\n    b = solveValidation(m, b, true);\n    var bdata = b._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n\n    // result\n    var x = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      var bj = bdata[j][0] || 0;\n      if (!equalScalar(bj, 0)) {\n        // non-degenerate row, find solution\n\n        var vjj = 0;\n        // matrix values & indices (column j)\n        var jValues = [];\n        var jIndices = [];\n\n        // first and last index in the column\n        var firstIndex = ptr[j];\n        var lastIndex = ptr[j + 1];\n\n        // values in column, find value at [j, j]\n        for (var k = firstIndex; k < lastIndex; k++) {\n          var i = index[k];\n\n          // check row (rows are not sorted!)\n          if (i === j) {\n            vjj = values[k];\n          } else if (i > j) {\n            // store lower triangular\n            jValues.push(values[k]);\n            jIndices.push(i);\n          }\n        }\n\n        // at this point we must have a value in vjj\n        if (equalScalar(vjj, 0)) {\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        var xj = divideScalar(bj, vjj);\n        for (var _k = 0, l = jIndices.length; _k < l; _k++) {\n          var _i = jIndices[_k];\n          bdata[_i] = [subtractScalar(bdata[_i][0] || 0, multiplyScalar(xj, jValues[_k]))];\n        }\n        x[j] = [xj];\n      } else {\n        // degenerate row, we can choose any value\n        x[j] = [0];\n      }\n    }\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  }\n});","/**\n * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.\n *\n * @param {Array} p           The permutation vector of length n. null value denotes identity\n * @param {Array} b           The input vector\n *\n * @return {Array}            The output vector x = P'b\n */\nexport function csIpvec(p, b) {\n  // vars\n  var k;\n  var n = b.length;\n  var x = [];\n  // check permutation vector was provided, p = null denotes identity\n  if (p) {\n    // loop vector\n    for (k = 0; k < n; k++) {\n      // apply permutation\n      x[p[k]] = b[k];\n    }\n  } else {\n    // loop vector\n    for (k = 0; k < n; k++) {\n      // x[i] = b[i]\n      x[k] = b[k];\n    }\n  }\n  return x;\n}","import { isArray, isMatrix } from '../../../utils/is.js';\nimport { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nimport { csIpvec } from '../sparse/csIpvec.js';\nvar name = 'lusolve';\nvar dependencies = ['typed', 'matrix', 'lup', 'slu', 'usolve', 'lsolve', 'DenseMatrix'];\nexport var createLusolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    lup,\n    slu,\n    usolve,\n    lsolve,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n\n  /**\n   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.\n   *\n   * Syntax:\n   *\n   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b\n   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)\n   *\n   * Examples:\n   *\n   *    const m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]\n   *\n   *    const x = math.lusolve(m, [-1, -1, -1, -1])        // x = [[-1], [-0.5], [-1/3], [-0.25]]\n   *\n   *    const f = math.lup(m)\n   *    const x1 = math.lusolve(f, [-1, -1, -1, -1])       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]\n   *    const x2 = math.lusolve(f, [1, 2, 1, -1])          // x2 = [[1], [1], [1/3], [-0.25]]\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = math.lusolve(a, b)  // [[2], [5]]\n   *\n   * See also:\n   *\n   *    lup, slu, lsolve, usolve\n   *\n   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition\n   * @param {Matrix | Array} b               Column Vector\n   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix\n   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.\n   *\n   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b\n   */\n  return typed(name, {\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      a = matrix(a);\n      var d = lup(a);\n      var x = _lusolve(d.L, d.U, d.p, null, b);\n      return x.valueOf();\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(a, b) {\n      var d = lup(a);\n      return _lusolve(d.L, d.U, d.p, null, b);\n    },\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(a, b) {\n      var d = lup(a);\n      return _lusolve(d.L, d.U, d.p, null, b);\n    },\n    'SparseMatrix, Array | Matrix, number, number': function SparseMatrixArrayMatrixNumberNumber(a, b, order, threshold) {\n      var d = slu(a, order, threshold);\n      return _lusolve(d.L, d.U, d.p, d.q, b);\n    },\n    'Object, Array | Matrix': function ObjectArrayMatrix(d, b) {\n      return _lusolve(d.L, d.U, d.p, d.q, b);\n    }\n  });\n  function _toMatrix(a) {\n    if (isMatrix(a)) {\n      return a;\n    }\n    if (isArray(a)) {\n      return matrix(a);\n    }\n    throw new TypeError('Invalid Matrix LU decomposition');\n  }\n  function _lusolve(l, u, p, q, b) {\n    // verify decomposition\n    l = _toMatrix(l);\n    u = _toMatrix(u);\n\n    // apply row permutations if needed (b is a DenseMatrix)\n    if (p) {\n      b = solveValidation(l, b, true);\n      b._data = csIpvec(p, b._data);\n    }\n\n    // use forward substitution to resolve L * y = b\n    var y = lsolve(l, b);\n    // use backward substitution to resolve U * x = y\n    var x = usolve(u, y);\n\n    // apply column permutations if needed (x is a DenseMatrix)\n    if (q) {\n      x._data = csIpvec(q, x._data);\n    }\n    return x;\n  }\n});","import { factory } from '../../../utils/factory.js';\nimport { createSolveValidation } from './utils/solveValidation.js';\nvar name = 'usolve';\nvar dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtractScalar', 'equalScalar', 'DenseMatrix'];\nexport var createUsolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    divideScalar,\n    multiplyScalar,\n    subtractScalar,\n    equalScalar,\n    DenseMatrix\n  } = _ref;\n  var solveValidation = createSolveValidation({\n    DenseMatrix\n  });\n\n  /**\n   * Finds one solution of a linear equation system by backward substitution. Matrix must be an upper triangular matrix. Throws an error if there's no solution.\n   *\n   * `U * x = b`\n   *\n   * Syntax:\n   *\n   *    math.usolve(U, b)\n   *\n   * Examples:\n   *\n   *    const a = [[-2, 3], [2, 1]]\n   *    const b = [11, 9]\n   *    const x = usolve(a, b)  // [[8], [9]]\n   *\n   * See also:\n   *\n   *    usolveAll, lup, slu, usolve, lusolve\n   *\n   * @param {Matrix, Array} U       A N x N matrix or array (U)\n   * @param {Matrix, Array} b       A column vector with the b values\n   *\n   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)\n   */\n  return typed(name, {\n    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {\n      return _sparseBackwardSubstitution(m, b);\n    },\n    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {\n      return _denseBackwardSubstitution(m, b);\n    },\n    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {\n      var m = matrix(a);\n      var r = _denseBackwardSubstitution(m, b);\n      return r.valueOf();\n    }\n  });\n  function _denseBackwardSubstitution(m, b) {\n    // make b into a column vector\n    b = solveValidation(m, b, true);\n    var bdata = b._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n\n    // result\n    var x = [];\n    var mdata = m._data;\n    // loop columns backwards\n    for (var j = columns - 1; j >= 0; j--) {\n      // b[j]\n      var bj = bdata[j][0] || 0;\n      // x[j]\n      var xj = void 0;\n      if (!equalScalar(bj, 0)) {\n        // value at [j, j]\n        var vjj = mdata[j][j];\n        if (equalScalar(vjj, 0)) {\n          // system cannot be solved\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        xj = divideScalar(bj, vjj);\n\n        // loop rows\n        for (var i = j - 1; i >= 0; i--) {\n          // update copy of b\n          bdata[i] = [subtractScalar(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];\n        }\n      } else {\n        // zero value at j\n        xj = 0;\n      }\n      // update x\n      x[j] = [xj];\n    }\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  }\n  function _sparseBackwardSubstitution(m, b) {\n    // make b into a column vector\n    b = solveValidation(m, b, true);\n    var bdata = b._data;\n    var rows = m._size[0];\n    var columns = m._size[1];\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n\n    // result\n    var x = [];\n\n    // loop columns backwards\n    for (var j = columns - 1; j >= 0; j--) {\n      var bj = bdata[j][0] || 0;\n      if (!equalScalar(bj, 0)) {\n        // non-degenerate row, find solution\n\n        var vjj = 0;\n\n        // upper triangular matrix values & index (column j)\n        var jValues = [];\n        var jIndices = [];\n\n        // first & last indeces in column\n        var firstIndex = ptr[j];\n        var lastIndex = ptr[j + 1];\n\n        // values in column, find value at [j, j], loop backwards\n        for (var k = lastIndex - 1; k >= firstIndex; k--) {\n          var i = index[k];\n\n          // check row (rows are not sorted!)\n          if (i === j) {\n            vjj = values[k];\n          } else if (i < j) {\n            // store upper triangular\n            jValues.push(values[k]);\n            jIndices.push(i);\n          }\n        }\n\n        // at this point we must have a value in vjj\n        if (equalScalar(vjj, 0)) {\n          throw new Error('Linear system cannot be solved since matrix is singular');\n        }\n        var xj = divideScalar(bj, vjj);\n        for (var _k = 0, _lastIndex = jIndices.length; _k < _lastIndex; _k++) {\n          var _i = jIndices[_k];\n          bdata[_i] = [subtractScalar(bdata[_i][0], multiplyScalar(xj, jValues[_k]))];\n        }\n        x[j] = [xj];\n      } else {\n        // degenerate row, we can choose any value\n        x[j] = [0];\n      }\n    }\n    return new DenseMatrix({\n      data: x,\n      size: [rows, 1]\n    });\n  }\n});","import { isArray, isMatrix, isDenseMatrix, isSparseMatrix } from '../../../../utils/is.js';\nimport { arraySize } from '../../../../utils/array.js';\nimport { format } from '../../../../utils/string.js';\nexport function createSolveValidation(_ref) {\n  var {\n    DenseMatrix\n  } = _ref;\n  /**\n   * Validates matrix and column vector b for backward/forward substitution algorithms.\n   *\n   * @param {Matrix} m            An N x N matrix\n   * @param {Array | Matrix} b    A column vector\n   * @param {Boolean} copy        Return a copy of vector b\n   *\n   * @return {DenseMatrix}        Dense column vector b\n   */\n  return function solveValidation(m, b, copy) {\n    var mSize = m.size();\n    if (mSize.length !== 2) {\n      throw new RangeError('Matrix must be two dimensional (size: ' + format(mSize) + ')');\n    }\n    var rows = mSize[0];\n    var columns = mSize[1];\n    if (rows !== columns) {\n      throw new RangeError('Matrix must be square (size: ' + format(mSize) + ')');\n    }\n    var data = [];\n    if (isMatrix(b)) {\n      var bSize = b.size();\n      var bdata = b._data;\n\n      // 1-dim vector\n      if (bSize.length === 1) {\n        if (bSize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n        for (var i = 0; i < rows; i++) {\n          data[i] = [bdata[i]];\n        }\n        return new DenseMatrix({\n          data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      }\n\n      // 2-dim column\n      if (bSize.length === 2) {\n        if (bSize[0] !== rows || bSize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n        if (isDenseMatrix(b)) {\n          if (copy) {\n            data = [];\n            for (var _i = 0; _i < rows; _i++) {\n              data[_i] = [bdata[_i][0]];\n            }\n            return new DenseMatrix({\n              data,\n              size: [rows, 1],\n              datatype: b._datatype\n            });\n          }\n          return b;\n        }\n        if (isSparseMatrix(b)) {\n          for (var _i2 = 0; _i2 < rows; _i2++) {\n            data[_i2] = [0];\n          }\n          var values = b._values;\n          var index = b._index;\n          var ptr = b._ptr;\n          for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {\n            var _i3 = index[k];\n            data[_i3][0] = values[k];\n          }\n          return new DenseMatrix({\n            data,\n            size: [rows, 1],\n            datatype: b._datatype\n          });\n        }\n      }\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n    if (isArray(b)) {\n      var bsize = arraySize(b);\n      if (bsize.length === 1) {\n        if (bsize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n        for (var _i4 = 0; _i4 < rows; _i4++) {\n          data[_i4] = [b[_i4]];\n        }\n        return new DenseMatrix({\n          data,\n          size: [rows, 1]\n        });\n      }\n      if (bsize.length === 2) {\n        if (bsize[0] !== rows || bsize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        }\n        for (var _i5 = 0; _i5 < rows; _i5++) {\n          data[_i5] = [b[_i5][0]];\n        }\n        return new DenseMatrix({\n          data,\n          size: [rows, 1]\n        });\n      }\n      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');\n    }\n  };\n}","import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { absNumber } from '../../plain/number/index.js';\nvar name = 'abs';\nvar dependencies = ['typed'];\nexport var createAbs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Calculate the absolute value of a number. For matrices, the function is\n   * evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.abs(x)\n   *\n   * Examples:\n   *\n   *    math.abs(3.5)                // returns number 3.5\n   *    math.abs(-4.2)               // returns number 4.2\n   *\n   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]\n   *\n   * See also:\n   *\n   *    sign\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            A number or matrix for which to get the absolute value\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n   *            Absolute value of `x`\n   */\n  return typed(name, {\n    number: absNumber,\n    'Complex | BigNumber | Fraction | Unit': x => x.abs(),\n    // deep map collection, skip zeros since abs(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true))\n  });\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo04xSidSid';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo04xSidSid = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0 && B(i,j) === 0\n   *          └  B(i,j)       ; A(i,j) === 0\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo04xSidSid(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n\n    // workspace\n    var xa = avalues && bvalues ? [] : undefined;\n    var xb = avalues && bvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var wa = [];\n    var wb = [];\n\n    // vars\n    var i, j, k, k0, k1;\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // loop A(:,j)\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // update c\n        cindex.push(i);\n        // update workspace\n        wa[i] = mark;\n        // check we need to process values\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      }\n      // loop B(:,j)\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // check row exists in A\n        if (wa[i] === mark) {\n          // update record in xa @ i\n          if (xa) {\n            // invoke callback\n            var v = cf(xa[i], bvalues[k]);\n            // check for zero\n            if (!eq(v, zero)) {\n              // update workspace\n              xa[i] = v;\n            } else {\n              // remove mark (index will be removed later)\n              wa[i] = null;\n            }\n          }\n        } else {\n          // update c\n          cindex.push(i);\n          // update workspace\n          wb[i] = mark;\n          // check we need to process values\n          if (xb) {\n            xb[i] = bvalues[k];\n          }\n        }\n      }\n      // check we need to process values (non pattern matrix)\n      if (xa && xb) {\n        // initialize first index in j\n        k = cptr[j];\n        // loop index in j\n        while (k < cindex.length) {\n          // row\n          i = cindex[k];\n          // check workspace has value @ i\n          if (wa[i] === mark) {\n            // push value (Aij != 0 || (Aij != 0 && Bij != 0))\n            cvalues[k] = xa[i];\n            // increment pointer\n            k++;\n          } else if (wb[i] === mark) {\n            // push value (bij != 0)\n            cvalues[k] = xb[i];\n            // increment pointer\n            k++;\n          } else {\n            // remove index @ k\n            cindex.splice(k, 1);\n          }\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'add';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'equalScalar', 'DenseMatrix', 'SparseMatrix', 'concat'];\nexport var createAdd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    equalScalar,\n    DenseMatrix,\n    SparseMatrix,\n    concat\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  /**\n  * Add two or more values, `x + y`.\n  * For matrices, the function is evaluated element wise.\n  *\n  * Syntax:\n  *\n  *    math.add(x, y)\n  *    math.add(x, y, z, ...)\n  *\n  * Examples:\n  *\n  *    math.add(2, 3)               // returns number 5\n  *    math.add(2, 3, 4)            // returns number 9\n  *\n  *    const a = math.complex(2, 3)\n  *    const b = math.complex(-4, 1)\n  *    math.add(a, b)               // returns Complex -2 + 4i\n  *\n  *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]\n  *\n  *    const c = math.unit('5 cm')\n  *    const d = math.unit('2.1 mm')\n  *    math.add(c, d)               // returns Unit 52.1 mm\n  *\n  *    math.add(\"2.3\", \"4\")         // returns number 6.3\n  *\n  * See also:\n  *\n  *    subtract, sum\n  *\n  * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add\n  * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add\n  * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`\n  */\n  return typed(name, {\n    'any, any': addScalar,\n    'any, any, ...any': typed.referToSelf(self => (x, y, rest) => {\n      var result = self(x, y);\n      for (var i = 0; i < rest.length; i++) {\n        result = self(result, rest[i]);\n      }\n      return result;\n    })\n  }, matrixAlgorithmSuite({\n    elop: addScalar,\n    DS: matAlgo01xDSid,\n    SS: matAlgo04xSidSid,\n    Ss: matAlgo10xSids\n  }));\n});","import { factory } from '../../utils/factory.js';\nimport { addNumber } from '../../plain/number/index.js';\nvar name = 'addScalar';\nvar dependencies = ['typed'];\nexport var createAddScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': addNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (x.value === null || x.value === undefined) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n      if (y.value === null || y.value === undefined) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n      var res = x.clone();\n      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    })\n  });\n});","import { factory } from '../../utils/factory.js';\nvar name = 'divideScalar';\nvar dependencies = ['typed', 'numeric'];\nexport var createDivideScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    numeric\n  } = _ref;\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x / y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.div(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.div(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.div(y);\n    },\n    'Unit, number | Complex | Fraction | BigNumber | Unit': (x, y) => x.divide(y),\n    'number | Fraction | Complex | BigNumber, Unit': (x, y) => y.divideInto(x)\n  });\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo02xDS0';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo02xDS0 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  return function matAlgo02xDS0(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype;\n    // sparse matrix arrays\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result (SparseMatrix)\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // loop columns in b\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // values in column j\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k];\n        // update C(i,j)\n        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        // check for nonzero\n        if (!eq(cij, zero)) {\n          // push i & v\n          cindex.push(i);\n          cvalues.push(cij);\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return sparseMatrix.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo09xS0Sf';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo09xS0Sf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).\n   * Callback function invoked NZA times, number of nonzero elements in A.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo09xS0Sf(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n\n    // workspaces\n    var x = cvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // vars\n    var i, j, k, k0, k1;\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // column mark\n      var mark = j + 1;\n      // check we need to process values\n      if (x) {\n        // loop B(:,j)\n        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n          // row\n          i = bindex[k];\n          // update workspace\n          w[i] = mark;\n          x[i] = bvalues[k];\n        }\n      }\n      // loop A(:,j)\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // check we need to process values\n        if (x) {\n          // b value @ i,j\n          var vb = w[i] === mark ? x[i] : zero;\n          // invoke f\n          var vc = cf(avalues[k], vb);\n          // check zero value\n          if (!eq(vc, zero)) {\n            // push index\n            cindex.push(i);\n            // push value\n            cvalues.push(vc);\n          }\n        } else {\n          // push index\n          cindex.push(i);\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../utils/factory.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo09xS0Sf } from '../../type/matrix/utils/matAlgo09xS0Sf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'dotMultiply';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'multiplyScalar', 'concat'];\nexport var createDotMultiply = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    multiplyScalar,\n    concat\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo09xS0Sf = createMatAlgo09xS0Sf({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Multiply two matrices element wise. The function accepts both matrices and\n   * scalar values.\n   *\n   * Syntax:\n   *\n   *    math.dotMultiply(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotMultiply(2, 4) // returns 8\n   *\n   *    a = [[9, 5], [6, 1]]\n   *    b = [[3, 2], [5, 2]]\n   *\n   *    math.dotMultiply(a, b) // returns [[27, 10], [30, 2]]\n   *    math.multiply(a, b)    // returns [[52, 28], [23, 14]]\n   *\n   * See also:\n   *\n   *    multiply, divide, dotDivide\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`\n   */\n  return typed(name, matrixAlgorithmSuite({\n    elop: multiplyScalar,\n    SS: matAlgo09xS0Sf,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }));\n});","import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nimport { arraySize } from '../../utils/array.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nvar name = 'multiply';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar', 'dot'];\nexport var createMultiply = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    multiplyScalar,\n    equalScalar,\n    dot\n  } = _ref;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  function _validateMatrixDimensions(size1, size2) {\n    // check left operand dimensions\n    switch (size1.length) {\n      case 1:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Vector x Vector\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');\n            }\n            break;\n          case 2:\n            // Vector x Matrix\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');\n            }\n            break;\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n        break;\n      case 2:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Matrix x Vector\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');\n            }\n            break;\n          case 2:\n            // Matrix x Matrix\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');\n            }\n            break;\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n        break;\n      default:\n        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');\n    }\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (N)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {number}             Scalar value\n   */\n  function _multiplyVectorVector(a, b, n) {\n    // check empty vector\n    if (n === 0) {\n      throw new Error('Cannot multiply two empty vectors');\n    }\n    return dot(a, b);\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Matrix         (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n  function _multiplyVectorMatrix(a, b) {\n    // process storage\n    if (b.storage() !== 'dense') {\n      throw new Error('Support for SparseMatrix not implemented');\n    }\n    return _multiplyVectorDenseMatrix(a, b);\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Dense Matrix   (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n  function _multiplyVectorDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // rows & columns\n    var alength = asize[0];\n    var bcolumns = bsize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var c = [];\n\n    // loop matrix columns\n    for (var j = 0; j < bcolumns; j++) {\n      // sum (do not initialize it with zero)\n      var sum = mf(adata[0], bdata[0][j]);\n      // loop vector\n      for (var i = 1; i < alength; i++) {\n        // multiply & accumulate\n        sum = af(sum, mf(adata[i], bdata[i][j]));\n      }\n      c[j] = sum;\n    }\n\n    // return matrix\n    return a.createDenseMatrix({\n      data: c,\n      size: [bcolumns],\n      datatype: dt\n    });\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {Matrix}             Dense Vector   (M)\n   */\n  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {\n    'DenseMatrix, any': _multiplyDenseMatrixVector,\n    'SparseMatrix, any': _multiplySparseMatrixVector\n  });\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Matrix         (NxC)\n   *\n   * @return {Matrix}             Matrix         (MxC)\n   */\n  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {\n    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,\n    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,\n    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,\n    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix\n  });\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix  (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             Dense Vector (M)\n   */\n  function _multiplyDenseMatrixVector(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = asize[0];\n    var acolumns = asize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var c = [];\n\n    // loop matrix a rows\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i];\n      // sum (do not initialize it with zero)\n      var sum = mf(row[0], bdata[0]);\n      // loop matrix a columns\n      for (var j = 1; j < acolumns; j++) {\n        // multiply & accumulate\n        sum = af(sum, mf(row[j], bdata[j]));\n      }\n      c[i] = sum;\n    }\n\n    // return matrix\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows],\n      datatype: dt\n    });\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            DenseMatrix    (NxC)\n   *\n   * @return {Matrix}             DenseMatrix    (MxC)\n   */\n  function _multiplyDenseMatrixDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = asize[0];\n    var acolumns = asize[1];\n    var bcolumns = bsize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var c = [];\n\n    // loop matrix a rows\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i];\n      // initialize row array\n      c[i] = [];\n      // loop matrix b columns\n      for (var j = 0; j < bcolumns; j++) {\n        // sum (avoid initializing sum to zero)\n        var sum = mf(row[0], bdata[0][j]);\n        // loop matrix a columns\n        for (var x = 1; x < acolumns; x++) {\n          // multiply & accumulate\n          sum = af(sum, mf(row[x], bdata[x][j]));\n        }\n        c[i][j] = sum;\n      }\n    }\n\n    // return matrix\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            SparseMatrix   (NxC)\n   *\n   * @return {Matrix}             SparseMatrix   (MxC)\n   */\n  function _multiplyDenseMatrixSparseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b sparse\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // validate b matrix\n    if (!bvalues) {\n      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');\n    }\n    // rows & columns\n    var arows = asize[0];\n    var bcolumns = bsize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n    // equalScalar signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n    }\n\n    // result\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n    // c matrix\n    var c = b.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n\n    // loop b columns\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length;\n      // indeces in column jb\n      var kb0 = bptr[jb];\n      var kb1 = bptr[jb + 1];\n      // do not process column jb if no data exists\n      if (kb1 > kb0) {\n        // last row mark processed\n        var last = 0;\n        // loop a rows\n        for (var i = 0; i < arows; i++) {\n          // column mark\n          var mark = i + 1;\n          // C[i, jb]\n          var cij = void 0;\n          // values in b column j\n          for (var kb = kb0; kb < kb1; kb++) {\n            // row\n            var ib = bindex[kb];\n            // check value has been initialized\n            if (last !== mark) {\n              // first value in column jb\n              cij = mf(adata[i][ib], bvalues[kb]);\n              // update mark\n              last = mark;\n            } else {\n              // accumulate value\n              cij = af(cij, mf(adata[i][ib], bvalues[kb]));\n            }\n          }\n          // check column has been processed and value != 0\n          if (last === mark && !eq(cij, zero)) {\n            // push row & value\n            cindex.push(i);\n            cvalues.push(cij);\n          }\n        }\n      }\n    }\n    // update ptr\n    cptr[bcolumns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix    (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             SparseMatrix    (M, 1)\n   */\n  function _multiplySparseMatrixVector(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype;\n    // validate a matrix\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    }\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = a._size[0];\n    var brows = b._size[0];\n    // result\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n    // equalScalar signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n    }\n\n    // workspace\n    var x = [];\n    // vector with marks indicating a value x[i] exists in a given column\n    var w = [];\n\n    // update ptr\n    cptr[0] = 0;\n    // rows in b\n    for (var ib = 0; ib < brows; ib++) {\n      // b[ib]\n      var vbi = bdata[ib];\n      // check b[ib] != 0, avoid loops\n      if (!eq(vbi, zero)) {\n        // A values & index in ib column\n        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n          // a row\n          var ia = aindex[ka];\n          // check value exists in current j\n          if (!w[ia]) {\n            // ia is new entry in j\n            w[ia] = true;\n            // add i to pattern of C\n            cindex.push(ia);\n            // x(ia) = A\n            x[ia] = mf(vbi, avalues[ka]);\n          } else {\n            // i exists in C already\n            x[ia] = af(x[ia], mf(vbi, avalues[ka]));\n          }\n        }\n      }\n    }\n    // copy values from x to column jb of c\n    for (var p1 = cindex.length, p = 0; p < p1; p++) {\n      // row\n      var ic = cindex[p];\n      // copy value\n      cvalues[p] = x[ic];\n    }\n    // update ptr\n    cptr[1] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, 1],\n      datatype: dt\n    });\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            DenseMatrix       (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n  function _multiplySparseMatrixDenseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype;\n    // validate a matrix\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    }\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = a._size[0];\n    var brows = b._size[0];\n    var bcolumns = b._size[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n    // equalScalar signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n    }\n\n    // result\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n    // c matrix\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n\n    // workspace\n    var x = [];\n    // vector with marks indicating a value x[i] exists in a given column\n    var w = [];\n\n    // loop b columns\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length;\n      // mark in workspace for current column\n      var mark = jb + 1;\n      // rows in jb\n      for (var ib = 0; ib < brows; ib++) {\n        // b[ib, jb]\n        var vbij = bdata[ib][jb];\n        // check b[ib, jb] != 0, avoid loops\n        if (!eq(vbij, zero)) {\n          // A values & index in ib column\n          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // a row\n            var ia = aindex[ka];\n            // check value exists in current j\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark;\n              // add i to pattern of C\n              cindex.push(ia);\n              // x(ia) = A\n              x[ia] = mf(vbij, avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(vbij, avalues[ka]));\n            }\n          }\n        }\n      }\n      // copy values from x to column jb of c\n      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n        // row\n        var ic = cindex[p];\n        // copy value\n        cvalues[p] = x[ic];\n      }\n    }\n    // update ptr\n    cptr[bcolumns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            SparseMatrix      (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n  function _multiplySparseMatrixSparseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype;\n    // b sparse\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bdt = b._datatype;\n\n    // rows & columns\n    var arows = a._size[0];\n    var bcolumns = b._size[1];\n    // flag indicating both matrices (a & b) contain data\n    var values = avalues && bvalues;\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // c matrix\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n\n    // workspace\n    var x = values ? [] : undefined;\n    // vector with marks indicating a value x[i] exists in a given column\n    var w = [];\n    // variables\n    var ka, ka0, ka1, kb, kb0, kb1, ia, ib;\n    // loop b columns\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length;\n      // mark in workspace for current column\n      var mark = jb + 1;\n      // B values & index in j\n      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {\n        // b row\n        ib = bindex[kb];\n        // check we need to process values\n        if (values) {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka];\n            // check value exists in current j\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark;\n              // add i to pattern of C\n              cindex.push(ia);\n              // x(ia) = A\n              x[ia] = mf(bvalues[kb], avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));\n            }\n          }\n        } else {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka];\n            // check value exists in current j\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark;\n              // add i to pattern of C\n              cindex.push(ia);\n            }\n          }\n        }\n      }\n      // check we need to process matrix values (pattern matrix)\n      if (values) {\n        // copy values from x to column jb of c\n        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n          // row\n          var ic = cindex[p];\n          // copy value\n          cvalues[p] = x[ic];\n        }\n      }\n    }\n    // update ptr\n    cptr[bcolumns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  }\n\n  /**\n   * Multiply two or more values, `x * y`.\n   * For matrices, the matrix product is calculated.\n   *\n   * Syntax:\n   *\n   *    math.multiply(x, y)\n   *    math.multiply(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.multiply(4, 5.2)        // returns number 20.8\n   *    math.multiply(2, 3, 4)       // returns number 24\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.multiply(a, b)          // returns Complex 5 + 14i\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    const d = [[1, 2, 3], [3, -4, 7]]\n   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]\n   *\n   *    const e = math.unit('2.1 km')\n   *    math.multiply(3, e)          // returns Unit 6.3 km\n   *\n   * See also:\n   *\n   *    divide, prod, cross, dot\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`\n   */\n  return typed(name, multiplyScalar, {\n    // we extend the signatures of multiplyScalar with signatures dealing with matrices\n\n    'Array, Array': typed.referTo('Matrix, Matrix', selfMM => (x, y) => {\n      // check dimensions\n      _validateMatrixDimensions(arraySize(x), arraySize(y));\n\n      // use dense matrix implementation\n      var m = selfMM(matrix(x), matrix(y));\n      // return array or scalar\n      return isMatrix(m) ? m.valueOf() : m;\n    }),\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // dimensions\n      var xsize = x.size();\n      var ysize = y.size();\n\n      // check dimensions\n      _validateMatrixDimensions(xsize, ysize);\n\n      // process dimensions\n      if (xsize.length === 1) {\n        // process y dimensions\n        if (ysize.length === 1) {\n          // Vector * Vector\n          return _multiplyVectorVector(x, y, xsize[0]);\n        }\n        // Vector * Matrix\n        return _multiplyVectorMatrix(x, y);\n      }\n      // process y dimensions\n      if (ysize.length === 1) {\n        // Matrix * Vector\n        return _multiplyMatrixVector(x, y);\n      }\n      // Matrix * Matrix\n      return _multiplyMatrixMatrix(x, y);\n    },\n    'Matrix, Array': typed.referTo('Matrix,Matrix', selfMM => (x, y) => selfMM(x, matrix(y))),\n    'Array, Matrix': typed.referToSelf(self => (x, y) => {\n      // use Matrix * Matrix implementation\n      return self(matrix(x, y.storage()), y);\n    }),\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return matAlgo11xS0s(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return matAlgo14xDs(x, y, multiplyScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return matAlgo11xS0s(y, x, multiplyScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return matAlgo14xDs(y, x, multiplyScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, multiplyScalar, true).valueOf();\n    },\n    'any, any': multiplyScalar,\n    'any, any, ...any': typed.referToSelf(self => (x, y, rest) => {\n      var result = self(x, y);\n      for (var i = 0; i < rest.length; i++) {\n        result = self(result, rest[i]);\n      }\n      return result;\n    })\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { multiplyNumber } from '../../plain/number/index.js';\nvar name = 'multiplyScalar';\nvar dependencies = ['typed'];\nexport var createMultiplyScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`\n   * @private\n   */\n  return typed('multiplyScalar', {\n    'number, number': multiplyNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.mul(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.times(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mul(y);\n    },\n    'number | Fraction | BigNumber | Complex, Unit': (x, y) => y.multiply(x),\n    'Unit, number | Fraction | BigNumber | Complex | Unit': (x, y) => x.multiply(y)\n  });\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo05xSfSf';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo05xSfSf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo05xSfSf(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n\n    // workspaces\n    var xa = cvalues ? [] : undefined;\n    var xb = cvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var wa = [];\n    var wb = [];\n\n    // vars\n    var i, j, k, k1;\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // loop values A(:,j)\n      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // push index\n        cindex.push(i);\n        // update workspace\n        wa[i] = mark;\n        // check we need to process values\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      }\n      // loop values B(:,j)\n      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // check row existed in A\n        if (wa[i] !== mark) {\n          // push index\n          cindex.push(i);\n        }\n        // update workspace\n        wb[i] = mark;\n        // check we need to process values\n        if (xb) {\n          xb[i] = bvalues[k];\n        }\n      }\n      // check we need to process values (non pattern matrix)\n      if (cvalues) {\n        // initialize first index in j\n        k = cptr[j];\n        // loop index in j\n        while (k < cindex.length) {\n          // row\n          i = cindex[k];\n          // marks\n          var wai = wa[i];\n          var wbi = wb[i];\n          // check Aij or Bij are nonzero\n          if (wai === mark || wbi === mark) {\n            // matrix values @ i,j\n            var va = wai === mark ? xa[i] : zero;\n            var vb = wbi === mark ? xb[i] : zero;\n            // Cij\n            var vc = cf(va, vb);\n            // check for zero\n            if (!eq(vc, zero)) {\n              // push value\n              cvalues.push(vc);\n              // increment pointer\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          }\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'subtractScalar', 'unaryMinus', 'DenseMatrix', 'concat'];\nexport var createSubtract = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    subtractScalar,\n    unaryMinus,\n    DenseMatrix,\n    concat\n  } = _ref;\n  // TODO: split function subtract in two: subtract and subtractScalar\n\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Subtraction of `x` and `y`\n   */\n  return typed(name, {\n    'any, any': subtractScalar\n  }, matrixAlgorithmSuite({\n    elop: subtractScalar,\n    SS: matAlgo05xSfSf,\n    DS: matAlgo01xDSid,\n    SD: matAlgo03xDSf,\n    Ss: matAlgo12xSfs,\n    sS: matAlgo10xSids\n  }));\n});","import { factory } from '../../utils/factory.js';\nimport { subtractNumber } from '../../plain/number/index.js';\nvar name = 'subtractScalar';\nvar dependencies = ['typed'];\nexport var createSubtractScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Subtract two scalar values, `x - y`.\n   * This function is meant for internal use: it is used by the public function\n   * `subtract`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to be subtracted from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Difference of `x` and `y`\n   * @private\n   */\n  return typed(name, {\n    'number, number': subtractNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.sub(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.minus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.sub(y);\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (x.value === null || x.value === undefined) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n      if (y.value === null || y.value === undefined) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n      var res = x.clone();\n      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    })\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { unaryMinusNumber } from '../../plain/number/index.js';\nvar name = 'unaryMinus';\nvar dependencies = ['typed'];\nexport var createUnaryMinus = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Inverse the sign of a value, apply a unary minus operation.\n   *\n   * For matrices, the function is evaluated element wise. Boolean values and\n   * strings will be converted to a number. For complex numbers, both real and\n   * complex value are inverted.\n   *\n   * Syntax:\n   *\n   *    math.unaryMinus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryMinus(3.5)      // returns -3.5\n   *    math.unaryMinus(-4.2)     // returns 4.2\n   *\n   * See also:\n   *\n   *    add, subtract, unaryPlus\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\n   */\n  return typed(name, {\n    number: unaryMinusNumber,\n    'Complex | BigNumber | Fraction': x => x.neg(),\n    Unit: typed.referToSelf(self => x => {\n      var res = x.clone();\n      res.value = typed.find(self, res.valueType())(x.value);\n      return res;\n    }),\n    // deep map collection, skip zeros since unaryMinus(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true))\n\n    // TODO: add support for string\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 'conj';\nvar dependencies = ['typed'];\nexport var createConj = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Compute the complex conjugate of a complex value.\n   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.conj(x)\n   *\n   * Examples:\n   *\n   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i\n   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i\n   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i\n   *\n   * See also:\n   *\n   *    re, im, arg, abs\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            The complex conjugate of x\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction': x => x,\n    Complex: x => x.conjugate(),\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { isBigNumber, isMatrix, isNumber } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { arraySize, concat as _concat } from '../../utils/array.js';\nimport { IndexError } from '../../error/IndexError.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'concat';\nvar dependencies = ['typed', 'matrix', 'isInteger'];\nexport var createConcat = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    isInteger\n  } = _ref;\n  /**\n   * Concatenate two or more matrices.\n   *\n   * Syntax:\n   *\n   *     math.concat(A, B, C, ...)\n   *     math.concat(A, B, C, ..., dim)\n   *\n   * Where:\n   *\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n   *   By default the last dimension of the matrices.\n   *\n   * Examples:\n   *\n   *    const A = [[1, 2], [5, 6]]\n   *    const B = [[3, 4], [7, 8]]\n   *\n   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\n   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\n   *    math.concat('hello', ' ', 'world') // returns 'hello world'\n   *\n   * See also:\n   *\n   *    size, squeeze, subset, transpose\n   *\n   * @param {... Array | Matrix} args     Two or more matrices\n   * @return {Array | Matrix} Concatenated matrix\n   */\n  return typed(name, {\n    // TODO: change signature to '...Array | Matrix, dim?' when supported\n    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {\n      var i;\n      var len = args.length;\n      var dim = -1; // zero-based dimension\n      var prevDim;\n      var asMatrix = false;\n      var matrices = []; // contains multi dimensional arrays\n\n      for (i = 0; i < len; i++) {\n        var arg = args[i];\n\n        // test whether we need to return a Matrix (if not we return an Array)\n        if (isMatrix(arg)) {\n          asMatrix = true;\n        }\n        if (isNumber(arg) || isBigNumber(arg)) {\n          if (i !== len - 1) {\n            throw new Error('Dimension must be specified as last argument');\n          }\n\n          // last argument contains the dimension on which to concatenate\n          prevDim = dim;\n          dim = arg.valueOf(); // change BigNumber to number\n\n          if (!isInteger(dim)) {\n            throw new TypeError('Integer number expected for dimension');\n          }\n          if (dim < 0 || i > 0 && dim > prevDim) {\n            // TODO: would be more clear when throwing a DimensionError here\n            throw new IndexError(dim, prevDim + 1);\n          }\n        } else {\n          // this is a matrix or array\n          var m = clone(arg).valueOf();\n          var size = arraySize(m);\n          matrices[i] = m;\n          prevDim = dim;\n          dim = size.length - 1;\n\n          // verify whether each of the matrices has the same number of dimensions\n          if (i > 0 && dim !== prevDim) {\n            throw new DimensionError(prevDim + 1, dim + 1);\n          }\n        }\n      }\n      if (matrices.length === 0) {\n        throw new SyntaxError('At least one matrix expected');\n      }\n      var res = matrices.shift();\n      while (matrices.length) {\n        res = _concat(res, matrices.shift(), dim);\n      }\n      return asMatrix ? matrix(res) : res;\n    },\n    '...string': function string(args) {\n      return args.join('');\n    }\n  });\n});","import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'dot';\nvar dependencies = ['typed', 'addScalar', 'multiplyScalar', 'conj', 'size'];\nexport var createDot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    multiplyScalar,\n    conj,\n    size\n  } = _ref;\n  /**\n   * Calculate the dot product of two vectors. The dot product of\n   * `A = [a1, a2, ..., an]` and `B = [b1, b2, ..., bn]` is defined as:\n   *\n   *    dot(A, B) = conj(a1) * b1 + conj(a2) * b2 + ... + conj(an) * bn\n   *\n   * Syntax:\n   *\n   *    math.dot(x, y)\n   *\n   * Examples:\n   *\n   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15\n   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15\n   *\n   * See also:\n   *\n   *    multiply, cross\n   *\n   * @param  {Array | Matrix} x     First vector\n   * @param  {Array | Matrix} y     Second vector\n   * @return {number}               Returns the dot product of `x` and `y`\n   */\n  return typed(name, {\n    'Array | DenseMatrix, Array | DenseMatrix': _denseDot,\n    'SparseMatrix, SparseMatrix': _sparseDot\n  });\n  function _validateDim(x, y) {\n    var xSize = _size(x);\n    var ySize = _size(y);\n    var xLen, yLen;\n    if (xSize.length === 1) {\n      xLen = xSize[0];\n    } else if (xSize.length === 2 && xSize[1] === 1) {\n      xLen = xSize[0];\n    } else {\n      throw new RangeError('Expected a column vector, instead got a matrix of size (' + xSize.join(', ') + ')');\n    }\n    if (ySize.length === 1) {\n      yLen = ySize[0];\n    } else if (ySize.length === 2 && ySize[1] === 1) {\n      yLen = ySize[0];\n    } else {\n      throw new RangeError('Expected a column vector, instead got a matrix of size (' + ySize.join(', ') + ')');\n    }\n    if (xLen !== yLen) throw new RangeError('Vectors must have equal length (' + xLen + ' != ' + yLen + ')');\n    if (xLen === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');\n    return xLen;\n  }\n  function _denseDot(a, b) {\n    var N = _validateDim(a, b);\n    var adata = isMatrix(a) ? a._data : a;\n    var adt = isMatrix(a) ? a._datatype : undefined;\n    var bdata = isMatrix(b) ? b._data : b;\n    var bdt = isMatrix(b) ? b._datatype : undefined;\n\n    // are these 2-dimensional column vectors? (as opposed to 1-dimensional vectors)\n    var aIsColumn = _size(a).length === 2;\n    var bIsColumn = _size(b).length === 2;\n    var add = addScalar;\n    var mul = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      var dt = adt;\n      // find signatures that matches (dt, dt)\n      add = typed.find(addScalar, [dt, dt]);\n      mul = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // both vectors 1-dimensional\n    if (!aIsColumn && !bIsColumn) {\n      var c = mul(conj(adata[0]), bdata[0]);\n      for (var i = 1; i < N; i++) {\n        c = add(c, mul(conj(adata[i]), bdata[i]));\n      }\n      return c;\n    }\n\n    // a is 1-dim, b is column\n    if (!aIsColumn && bIsColumn) {\n      var _c = mul(conj(adata[0]), bdata[0][0]);\n      for (var _i = 1; _i < N; _i++) {\n        _c = add(_c, mul(conj(adata[_i]), bdata[_i][0]));\n      }\n      return _c;\n    }\n\n    // a is column, b is 1-dim\n    if (aIsColumn && !bIsColumn) {\n      var _c2 = mul(conj(adata[0][0]), bdata[0]);\n      for (var _i2 = 1; _i2 < N; _i2++) {\n        _c2 = add(_c2, mul(conj(adata[_i2][0]), bdata[_i2]));\n      }\n      return _c2;\n    }\n\n    // both vectors are column\n    if (aIsColumn && bIsColumn) {\n      var _c3 = mul(conj(adata[0][0]), bdata[0][0]);\n      for (var _i3 = 1; _i3 < N; _i3++) {\n        _c3 = add(_c3, mul(conj(adata[_i3][0]), bdata[_i3][0]));\n      }\n      return _c3;\n    }\n  }\n  function _sparseDot(x, y) {\n    _validateDim(x, y);\n    var xindex = x._index;\n    var xvalues = x._values;\n    var yindex = y._index;\n    var yvalues = y._values;\n\n    // TODO optimize add & mul using datatype\n    var c = 0;\n    var add = addScalar;\n    var mul = multiplyScalar;\n    var i = 0;\n    var j = 0;\n    while (i < xindex.length && j < yindex.length) {\n      var I = xindex[i];\n      var J = yindex[j];\n      if (I < J) {\n        i++;\n        continue;\n      }\n      if (I > J) {\n        j++;\n        continue;\n      }\n      if (I === J) {\n        c = add(c, mul(xvalues[i], yvalues[j]));\n        i++;\n        j++;\n      }\n    }\n    return c;\n  }\n\n  // TODO remove this once #1771 is fixed\n  function _size(x) {\n    return isMatrix(x) ? x.size() : size(x);\n  }\n});","import { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { noMatrix } from '../../utils/noop.js';\nvar name = 'size';\nvar dependencies = ['typed', 'config', '?matrix'];\nexport var createSize = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix\n  } = _ref;\n  /**\n   * Calculate the size of a matrix or scalar.\n   *\n   * Syntax:\n   *\n   *     math.size(x)\n   *\n   * Examples:\n   *\n   *     math.size(2.3)                  // returns []\n   *     math.size('hello world')        // returns [11]\n   *\n   *     const A = [[1, 2, 3], [4, 5, 6]]\n   *     math.size(A)                    // returns [2, 3]\n   *     math.size(math.range(1,6))      // returns [5]\n   *\n   * See also:\n   *\n   *     count, resize, squeeze, subset\n   *\n   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix\n   * @return {Array | Matrix} A vector with size of `x`.\n   */\n  return typed(name, {\n    Matrix: function Matrix(x) {\n      return x.create(x.size());\n    },\n    Array: arraySize,\n    string: function string(x) {\n      return config.matrix === 'Array' ? [x.length] : matrix([x.length]);\n    },\n    'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {\n      // scalar\n      return config.matrix === 'Array' ? [] : matrix ? matrix([]) : noMatrix();\n    }\n  });\n});","import { clone } from '../../utils/object.js';\nimport { format } from '../../utils/string.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'transpose';\nvar dependencies = ['typed', 'matrix'];\nexport var createTranspose = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  /**\n   * Transpose a matrix. All values of the matrix are reflected over its\n   * main diagonal. Only applicable to two dimensional matrices containing\n   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional\n   * vectors and scalars return the input unchanged.\n   *\n   * Syntax:\n   *\n   *     math.transpose(x)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 2, 3], [4, 5, 6]]\n   *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]\n   *\n   * See also:\n   *\n   *     diag, inv, subset, squeeze\n   *\n   * @param {Array | Matrix} x  Matrix to be transposed\n   * @return {Array | Matrix}   The transposed matrix\n   */\n  return typed(name, {\n    Array: x => transposeMatrix(matrix(x)).valueOf(),\n    Matrix: transposeMatrix,\n    any: clone // scalars\n  });\n\n  function transposeMatrix(x) {\n    // matrix size\n    var size = x.size();\n\n    // result\n    var c;\n\n    // process dimensions\n    switch (size.length) {\n      case 1:\n        // vector\n        c = x.clone();\n        break;\n      case 2:\n        {\n          // rows and columns\n          var rows = size[0];\n          var columns = size[1];\n\n          // check columns\n          if (columns === 0) {\n            // throw exception\n            throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');\n          }\n\n          // process storage format\n          switch (x.storage()) {\n            case 'dense':\n              c = _denseTranspose(x, rows, columns);\n              break;\n            case 'sparse':\n              c = _sparseTranspose(x, rows, columns);\n              break;\n          }\n        }\n        break;\n      default:\n        // multi dimensional\n        throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(size) + ')');\n    }\n    return c;\n  }\n  function _denseTranspose(m, rows, columns) {\n    // matrix array\n    var data = m._data;\n    // transposed matrix data\n    var transposed = [];\n    var transposedRow;\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // initialize row\n      transposedRow = transposed[j] = [];\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        // set data\n        transposedRow[i] = clone(data[i][j]);\n      }\n    }\n    // return matrix\n    return m.createDenseMatrix({\n      data: transposed,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  }\n  function _sparseTranspose(m, rows, columns) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // result matrices\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // row counts\n    var w = [];\n    for (var x = 0; x < rows; x++) {\n      w[x] = 0;\n    }\n    // vars\n    var p, l, j;\n    // loop values in matrix\n    for (p = 0, l = index.length; p < l; p++) {\n      // number of values in row\n      w[index[p]]++;\n    }\n    // cumulative sum\n    var sum = 0;\n    // initialize cptr with the cummulative sum of row counts\n    for (var i = 0; i < rows; i++) {\n      // update cptr\n      cptr.push(sum);\n      // update sum\n      sum += w[i];\n      // update w\n      w[i] = cptr[i];\n    }\n    // update cptr\n    cptr.push(sum);\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // values & index in column\n      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {\n        // C values & index\n        var q = w[index[k]]++;\n        // C[j, i] = A[i, j]\n        cindex[q] = j;\n        // check we need to process values (pattern matrix)\n        if (values) {\n          cvalues[q] = clone(values[k]);\n        }\n      }\n    }\n    // return matrix\n    return m.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  }\n});","import { factory } from '../../utils/factory.js';\nexport var createCompareUnits = /* #__PURE__ */factory('compareUnits', ['typed'], _ref => {\n  var {\n    typed\n  } = _ref;\n  return {\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n      return typed.find(self, [x.valueType(), y.valueType()])(x.value, y.value);\n    })\n  };\n});","import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { complexEquals } from '../../utils/complex.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'equalScalar';\nvar dependencies = ['typed', 'config'];\nexport var createEqualScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config\n  } = _ref;\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether two scalar values are nearly equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n  return typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return complexEquals(x, y, config.epsilon);\n    }\n  }, compareUnits);\n});\nexport var createEqualScalarNumber = factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","import { nearlyEqual } from './number.js';\n\n/**\n * Test whether two complex values are equal provided a given epsilon.\n * Does not use or change the global Complex.EPSILON setting\n * @param {Complex} x\n * @param {Complex} y\n * @param {number} epsilon\n * @returns {boolean}\n */\nexport function complexEquals(x, y, epsilon) {\n  return nearlyEqual(x.re, y.re, epsilon) && nearlyEqual(x.im, y.im, epsilon);\n}","import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'larger';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat'];\nexport var createLarger = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is larger than y.\n   *\n   * The function returns true when x is larger than y and the relative\n   * difference between x and y is larger than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.larger(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 3)             // returns false\n   *    math.larger(5, 2 + 2)         // returns true\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.larger(a, b)             // returns false\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false\n   */\n  return typed(name, createLargerNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x > y,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': (x, y) => x.compare(y) === 1,\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createLargerNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x > y && !nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'largerEq';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat'];\nexport var createLargerEq = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is larger or equal to y.\n   *\n   * The function returns true when x is larger than y or the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.largerEq(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 1 + 1)         // returns false\n   *    math.largerEq(2, 1 + 1)       // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false\n   */\n  return typed(name, createLargerEqNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x >= y,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.gte(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': (x, y) => x.compare(y) !== -1,\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createLargerEqNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x >= y || nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'smaller';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat'];\nexport var createSmaller = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is smaller than y.\n   *\n   * The function returns true when x is smaller than y and the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smaller(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(2, 3)            // returns true\n   *    math.smaller(5, 2 * 2)        // returns false\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.smaller(a, b)            // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n  return typed(name, createSmallerNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x < y,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': (x, y) => x.compare(y) === -1,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createSmallerNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x < y && !nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","import { deepMap } from '../../utils/collection.js';\nimport { isInteger as isIntegerNumber } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'isInteger';\nvar dependencies = ['typed'];\nexport var createIsInteger = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is an integer number.\n   * The function supports `number`, `BigNumber`, and `Fraction`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isInteger(x)\n   *\n   * Examples:\n   *\n   *    math.isInteger(2)                     // returns true\n   *    math.isInteger(0)                     // returns true\n   *    math.isInteger(0.5)                   // returns false\n   *    math.isInteger(math.bignumber(500))   // returns true\n   *    math.isInteger(math.fraction(4))      // returns true\n   *    math.isInteger('3')                   // returns true\n   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]\n   *    math.isInteger(math.complex('2-4i'))  // throws an error\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isZero\n   *\n   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: isIntegerNumber,\n    // TODO: what to do with isInteger(add(0.1, 0.2))  ?\n\n    BigNumber: function BigNumber(x) {\n      return x.isInt();\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && isFinite(x.n);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { noBignumber, noFraction } from '../../utils/noop.js';\nvar name = 'numeric';\nvar dependencies = ['number', '?bignumber', '?fraction'];\nexport var createNumeric = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    number: _number,\n    bignumber,\n    fraction\n  } = _ref;\n  var validInputTypes = {\n    string: true,\n    number: true,\n    BigNumber: true,\n    Fraction: true\n  };\n\n  // Load the conversion functions for each output type\n  var validOutputTypes = {\n    number: x => _number(x),\n    BigNumber: bignumber ? x => bignumber(x) : noBignumber,\n    Fraction: fraction ? x => fraction(x) : noFraction\n  };\n\n  /**\n   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.\n   *\n   * Syntax:\n   *\n   *    math.numeric(x)\n   *\n   * Examples:\n   *\n   *    math.numeric('4')                           // returns 4\n   *    math.numeric('4', 'number')                 // returns 4\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\n   *    math.numeric(math.fraction(2, 5), 'number') // returns 0.4\n   *\n   * See also:\n   *\n   *    number, fraction, bignumber, string, format\n   *\n   * @param {string | number | BigNumber | Fraction } value\n   *              A numeric value or a string containing a numeric value\n   * @param {string} outputType\n   *              Desired numeric output type.\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\n   * @return {number | BigNumber | Fraction}\n   *              Returns an instance of the numeric in the requested type\n   */\n  return function numeric(value) {\n    var outputType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'number';\n    var check = arguments.length > 2 ? arguments[2] : undefined;\n    if (check !== undefined) {\n      throw new SyntaxError('numeric() takes one or two arguments');\n    }\n    var inputType = typeOf(value);\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n});","import { cbrt, expm1, isInteger, log10, log1p, log2, sign, toFixed } from '../../utils/number.js';\nvar n1 = 'number';\nvar n2 = 'number, number';\nexport function absNumber(a) {\n  return Math.abs(a);\n}\nabsNumber.signature = n1;\nexport function addNumber(a, b) {\n  return a + b;\n}\naddNumber.signature = n2;\nexport function subtractNumber(a, b) {\n  return a - b;\n}\nsubtractNumber.signature = n2;\nexport function multiplyNumber(a, b) {\n  return a * b;\n}\nmultiplyNumber.signature = n2;\nexport function divideNumber(a, b) {\n  return a / b;\n}\ndivideNumber.signature = n2;\nexport function unaryMinusNumber(x) {\n  return -x;\n}\nunaryMinusNumber.signature = n1;\nexport function unaryPlusNumber(x) {\n  return x;\n}\nunaryPlusNumber.signature = n1;\nexport function cbrtNumber(x) {\n  return cbrt(x);\n}\ncbrtNumber.signature = n1;\nexport function cubeNumber(x) {\n  return x * x * x;\n}\ncubeNumber.signature = n1;\nexport function expNumber(x) {\n  return Math.exp(x);\n}\nexpNumber.signature = n1;\nexport function expm1Number(x) {\n  return expm1(x);\n}\nexpm1Number.signature = n1;\n\n/**\n * Calculate gcd for numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the greatest common denominator of a and b\n */\nexport function gcdNumber(a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function gcd must be integer numbers');\n  }\n\n  // https://en.wikipedia.org/wiki/Euclidean_algorithm\n  var r;\n  while (b !== 0) {\n    r = a % b;\n    a = b;\n    b = r;\n  }\n  return a < 0 ? -a : a;\n}\ngcdNumber.signature = n2;\n\n/**\n * Calculate lcm for two numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the least common multiple of a and b\n */\nexport function lcmNumber(a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function lcm must be integer numbers');\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  // https://en.wikipedia.org/wiki/Euclidean_algorithm\n  // evaluate lcm here inline to reduce overhead\n  var t;\n  var prod = a * b;\n  while (b !== 0) {\n    t = b;\n    b = a % t;\n    a = t;\n  }\n  return Math.abs(prod / a);\n}\nlcmNumber.signature = n2;\n\n/**\n * Calculate the logarithm of a value, optionally to a given base.\n * @param {number} x\n * @param {number | null | undefined} base\n * @return {number}\n */\nexport function logNumber(x, y) {\n  if (y) {\n    return Math.log(x) / Math.log(y);\n  }\n  return Math.log(x);\n}\n\n/**\n * Calculate the 10-base logarithm of a number\n * @param {number} x\n * @return {number}\n */\nexport function log10Number(x) {\n  return log10(x);\n}\nlog10Number.signature = n1;\n\n/**\n * Calculate the 2-base logarithm of a number\n * @param {number} x\n * @return {number}\n */\nexport function log2Number(x) {\n  return log2(x);\n}\nlog2Number.signature = n1;\n\n/**\n * Calculate the natural logarithm of a `number+1`\n * @param {number} x\n * @returns {number}\n */\nexport function log1pNumber(x) {\n  return log1p(x);\n}\nlog1pNumber.signature = n1;\n\n/**\n * Calculate the modulus of two numbers\n * @param {number} x\n * @param {number} y\n * @returns {number} res\n * @private\n */\nexport function modNumber(x, y) {\n  // We don't use JavaScript's % operator here as this doesn't work\n  // correctly for x < 0 and x === 0\n  // see https://en.wikipedia.org/wiki/Modulo_operation\n  return y === 0 ? x : x - y * Math.floor(x / y);\n}\nmodNumber.signature = n2;\n\n/**\n * Calculate the nth root of a, solve x^root == a\n * http://rosettacode.org/wiki/Nth_root#JavaScript\n * @param {number} a\n * @param {number} [2] root\n * @private\n */\nexport function nthRootNumber(a) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var inv = root < 0;\n  if (inv) {\n    root = -root;\n  }\n  if (root === 0) {\n    throw new Error('Root must be non-zero');\n  }\n  if (a < 0 && Math.abs(root) % 2 !== 1) {\n    throw new Error('Root must be odd when a is negative.');\n  }\n\n  // edge cases zero and infinity\n  if (a === 0) {\n    return inv ? Infinity : 0;\n  }\n  if (!isFinite(a)) {\n    return inv ? 0 : a;\n  }\n  var x = Math.pow(Math.abs(a), 1 / root);\n  // If a < 0, we require that root is an odd integer,\n  // so (-1) ^ (1/root) = -1\n  x = a < 0 ? -x : x;\n  return inv ? 1 / x : x;\n\n  // Very nice algorithm, but fails with nthRoot(-2, 3).\n  // Newton's method has some well-known problems at times:\n  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis\n  /*\n  let x = 1 // Initial guess\n  let xPrev = 1\n  let i = 0\n  const iMax = 10000\n  do {\n    const delta = (a / Math.pow(x, root - 1) - x) / root\n    xPrev = x\n    x = x + delta\n    i++\n  }\n  while (xPrev !== x && i < iMax)\n   if (xPrev !== x) {\n    throw new Error('Function nthRoot failed to converge')\n  }\n   return inv ? 1 / x : x\n  */\n}\n\nexport function signNumber(x) {\n  return sign(x);\n}\nsignNumber.signature = n1;\nexport function sqrtNumber(x) {\n  return Math.sqrt(x);\n}\nsqrtNumber.signature = n1;\nexport function squareNumber(x) {\n  return x * x;\n}\nsquareNumber.signature = n1;\n\n/**\n * Calculate xgcd for two numbers\n * @param {number} a\n * @param {number} b\n * @return {number} result\n * @private\n */\nexport function xgcdNumber(a, b) {\n  // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n  var t; // used to swap two variables\n  var q; // quotient\n  var r; // remainder\n  var x = 0;\n  var lastx = 1;\n  var y = 1;\n  var lasty = 0;\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function xgcd must be integer numbers');\n  }\n  while (b) {\n    q = Math.floor(a / b);\n    r = a - q * b;\n    t = x;\n    x = lastx - q * x;\n    lastx = t;\n    t = y;\n    y = lasty - q * y;\n    lasty = t;\n    a = b;\n    b = r;\n  }\n  var res;\n  if (a < 0) {\n    res = [-a, -lastx, -lasty];\n  } else {\n    res = [a, a ? lastx : 0, lasty];\n  }\n  return res;\n}\nxgcdNumber.signature = n2;\n\n/**\n * Calculates the power of x to y, x^y, for two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number} res\n */\nexport function powNumber(x, y) {\n  // x^Infinity === 0 if -1 < x < 1\n  // A real number 0 is returned instead of complex(0)\n  if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n    return 0;\n  }\n  return Math.pow(x, y);\n}\npowNumber.signature = n2;\n\n/**\n * round a number to the given number of decimals, or to zero if decimals is\n * not provided\n * @param {number} value\n * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\n * @return {number} roundedValue\n */\nexport function roundNumber(value) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  if (!isInteger(decimals) || decimals < 0 || decimals > 15) {\n    throw new Error('Number of decimals in function round must be an integer from 0 to 15 inclusive');\n  }\n  return parseFloat(toFixed(value, decimals));\n}\n\n/**\n * Calculate the norm of a number, the absolute value.\n * @param {number} x\n * @return {number}\n */\nexport function normNumber(x) {\n  return Math.abs(x);\n}\nnormNumber.signature = n1;","/*!\r\n *  decimal.js v10.4.3\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n */\r\n\r\n\r\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n  // The maximum exponent magnitude.\r\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\nvar EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n  // The limit on the value of `precision`, and on the value of the first argument to\r\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n  // Base conversion alphabet.\r\n  NUMERALS = '0123456789abcdef',\r\n\r\n  // The natural logarithm of 10 (1025 digits).\r\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n  // Pi (1025 digits).\r\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  DEFAULTS = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used when rounding to `precision`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN  6 The IEEE 754 remainder function.\r\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n    //\r\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n    // be used, but they may not give useful results.\r\n    modulo: 1,                             // 0 to 9\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // JavaScript numbers: -324  (5e-324)\r\n    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    crypto: false                          // true/false\r\n  },\r\n\r\n\r\n// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n  inexact, quadrant,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n  cryptoUnavailable = decimalError + 'crypto unavailable',\r\n  tag = '[object Decimal]',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n  isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n  isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n  LN10_PRECISION = LN10.length - 1,\r\n  PI_PRECISION = PI.length - 1,\r\n\r\n  // Decimal.prototype object\r\n  P = { toStringTag: tag };\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  clampedTo                 clamp\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s < 0) x.s = 1;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */\r\nP.ceil = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n * delineated by `min` and `max`.\r\n *\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nP.clampedTo = P.clamp = function (min, max) {\r\n  var k,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n  min = new Ctor(min);\r\n  max = new Ctor(max);\r\n  if (!min.s || !max.s) return new Ctor(NaN);\r\n  if (min.gt(max)) throw Error(invalidArgument + max);\r\n  k = x.cmp(min);\r\n  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this,\r\n    xd = x.d,\r\n    yd = (y = new x.constructor(y)).d,\r\n    xs = x.s,\r\n    ys = y.s;\r\n\r\n  // Either NaN or ±Infinity?\r\n  if (!xd || !yd) {\r\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Either zero?\r\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n  // Signs differ?\r\n  if (xs !== ys) return xs;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */\r\nP.cosine = P.cos = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.d) return new Ctor(NaN);\r\n\r\n  // cos(0) = cos(-0) = 1\r\n  if (!x.d[0]) return new Ctor(1);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */\r\nP.cubeRoot = P.cbrt = function () {\r\n  var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n   // Math.cbrt underflow/overflow?\r\n   // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n  if (!s || Math.abs(s) == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    e = x.e;\r\n\r\n    // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n    s = mathpow(n, 1 / 3);\r\n\r\n    // Rarely, e may be one less than the result exponent value.\r\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n    r.s = x.s;\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Halley's method.\r\n  // TODO? Compare Newton's method.\r\n  for (;;) {\r\n    t = r;\r\n    t3 = t.times(t).times(t);\r\n    t3plusx = t3.plus(x);\r\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n      // , i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var w,\r\n    d = this.d,\r\n    n = NaN;\r\n\r\n  if (d) {\r\n    w = d.length - 1;\r\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) n--;\r\n    if (n < 0) n = 0;\r\n  }\r\n\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.divToInt = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */\r\nP.floor = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 3);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  var k = this.cmp(y);\r\n  return k == 1 || k === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */\r\nP.hyperbolicCosine = P.cosh = function () {\r\n  var k, n, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    one = new Ctor(1);\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n  if (x.isZero()) return one;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  // TODO? Estimation reused from cosine() and may not be optimal here.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    n = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    n = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n  // Reverse argument reduction\r\n  var cosh2_x,\r\n    i = k,\r\n    d8 = new Ctor(8);\r\n  for (; i--;) {\r\n    cosh2_x = x.times(x);\r\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n  }\r\n\r\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */\r\nP.hyperbolicSine = P.sinh = function () {\r\n  var k, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n  } else {\r\n\r\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n    // 3 multiplications and 1 addition\r\n\r\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n    // 4 multiplications and 2 additions\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n    // Reverse argument reduction\r\n    var sinh2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sinh2_x = x.times(x);\r\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n    }\r\n  }\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */\r\nP.hyperbolicTangent = P.tanh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 7;\r\n  Ctor.rounding = 1;\r\n\r\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */\r\nP.inverseCosine = P.acos = function () {\r\n  var halfPi,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    k = x.abs().cmp(1),\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n    return k === 0\r\n      // |x| is 1\r\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n      // |x| > 1 or x is NaN\r\n      : new Ctor(NaN);\r\n  }\r\n\r\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.asin();\r\n  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return halfPi.minus(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */\r\nP.inverseHyperbolicCosine = P.acosh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n  if (!x.isFinite()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */\r\nP.inverseHyperbolicSine = P.asinh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */\r\nP.inverseHyperbolicTangent = P.atanh = function () {\r\n  var pr, rm, wpr, xsd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  xsd = x.sd();\r\n\r\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n  Ctor.precision = wpr = xsd - x.e;\r\n\r\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n  Ctor.precision = pr + 4;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.ln();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(0.5);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */\r\nP.inverseSine = P.asin = function () {\r\n  var halfPi, k,\r\n    pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  k = x.abs().cmp(1);\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n\r\n    // |x| is 1\r\n    if (k === 0) {\r\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      halfPi.s = x.s;\r\n      return halfPi;\r\n    }\r\n\r\n    // |x| > 1 or x is NaN\r\n    return new Ctor(NaN);\r\n  }\r\n\r\n  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */\r\nP.inverseTangent = P.atan = function () {\r\n  var i, j, k, n, px, t, r, wpr, x2,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (!x.isFinite()) {\r\n    if (!x.s) return new Ctor(NaN);\r\n    if (pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n  } else if (x.isZero()) {\r\n    return new Ctor(x);\r\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n    r.s = x.s;\r\n    return r;\r\n  }\r\n\r\n  Ctor.precision = wpr = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n  // Argument reduction\r\n  // Ensure |x| < 0.42\r\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n  external = false;\r\n\r\n  j = Math.ceil(wpr / LOG_BASE);\r\n  n = 1;\r\n  x2 = x.times(x);\r\n  r = new Ctor(x);\r\n  px = x;\r\n\r\n  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n  for (; i !== -1;) {\r\n    px = px.times(x2);\r\n    t = r.minus(px.div(n += 2));\r\n\r\n    px = px.times(x2);\r\n    r = t.plus(px.div(n += 2));\r\n\r\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n  }\r\n\r\n  if (k) r = r.times(2 << (k - 1));\r\n\r\n  external = true;\r\n\r\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */\r\nP.isFinite = function () {\r\n  return !!this.d;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isInt = function () {\r\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */\r\nP.isNaN = function () {\r\n  return !this.s;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isNeg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.isPos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return !!this.d && this.d[0] === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var isBase10, d, denominator, k, inf, num, sd, r,\r\n    arg = this,\r\n    Ctor = arg.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding,\r\n    guard = 5;\r\n\r\n  // Default base is 10.\r\n  if (base == null) {\r\n    base = new Ctor(10);\r\n    isBase10 = true;\r\n  } else {\r\n    base = new Ctor(base);\r\n    d = base.d;\r\n\r\n    // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n    isBase10 = base.eq(10);\r\n  }\r\n\r\n  d = arg.d;\r\n\r\n  // Is arg negative, non-finite, 0 or 1?\r\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n  }\r\n\r\n  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n  // integer power of 10.\r\n  if (isBase10) {\r\n    if (d.length > 1) {\r\n      inf = true;\r\n    } else {\r\n      for (k = d[0]; k % 10 === 0;) k /= 10;\r\n      inf = k !== 1;\r\n    }\r\n  }\r\n\r\n  external = false;\r\n  sd = pr + guard;\r\n  num = naturalLogarithm(arg, sd);\r\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n  // The result will have 5 rounding digits.\r\n  r = divide(num, denominator, sd, 1);\r\n\r\n  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n  // calculate 10 further digits.\r\n  //\r\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n  // further digits, the last 14 are nines, round up and assume the result is exact.\r\n  // Also assume the result is exact if the last 14 are zero.\r\n  //\r\n  // Example of a result that will be incorrectly rounded:\r\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n  // place is still 2.6.\r\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n    do {\r\n      sd += 10;\r\n      num = naturalLogarithm(arg, sd);\r\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n      r = divide(num, denominator, sd, 1);\r\n\r\n      if (!inf) {\r\n\r\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n\r\n        break;\r\n      }\r\n    } while (checkRoundingDigits(r.d, k += 10, rm));\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'lt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'gt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return y negated if x is finite and y is ±Infinity.\r\n    else if (x.d) y.s = -y.s;\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with different signs.\r\n    // Return NaN if both are ±Infinity with the same sign.\r\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n  // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.plus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return y negated if x is zero and y is non-zero.\r\n    if (yd[0]) y.s = -y.s;\r\n\r\n    // Return x if y is zero and x is non-zero.\r\n    else if (xd[0]) y = new Ctor(x);\r\n\r\n    // Return zero if both are zero.\r\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n    else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  e = mathfloor(y.e / LOG_BASE);\r\n  xe = mathfloor(x.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of\r\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to `xd` if shorter.\r\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n  // Return x if y is ±Infinity or x is ±0.\r\n  if (!y.d || x.d && !x.d[0]) {\r\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n  }\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n\r\n  if (Ctor.modulo == 9) {\r\n\r\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n    // result = x - q * y    where  0 <= result < abs(y)\r\n    q = divide(x, y.abs(), 0, 3, 1);\r\n    q.s *= y.s;\r\n  } else {\r\n    q = divide(x, y, 0, Ctor.modulo, 1);\r\n  }\r\n\r\n  q = q.times(y);\r\n\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return naturalExponential(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return naturalLogarithm(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with the same sign.\r\n    // Return NaN if both are ±Infinity with different signs.\r\n    // Return y if x is finite and y is ±Infinity.\r\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n   // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!yd[0]) y = new Ctor(x);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  k = mathfloor(x.e / LOG_BASE);\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var k,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  if (x.d) {\r\n    k = getPrecision(x.d);\r\n    if (z && x.e + 1 > k) k = x.e + 1;\r\n  } else {\r\n    k = NaN;\r\n  }\r\n\r\n  return k;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.round = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */\r\nP.sine = P.sin = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var m, n, sd, r, rep, t,\r\n    x = this,\r\n    d = x.d,\r\n    e = x.e,\r\n    s = x.s,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative/NaN/Infinity/zero?\r\n  if (s !== 1 || !d || !d[0]) {\r\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n  }\r\n\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(d);\r\n\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */\r\nP.tangent = P.tan = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.sin();\r\n  x.s = 1;\r\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  y.s *= x.s;\r\n\r\n   // If either is NaN, ±Infinity or ±0...\r\n  if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n      // Return NaN if either is NaN.\r\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n      ? NaN\r\n\r\n      // Return ±Infinity if either is ±Infinity.\r\n      // Return ±0 if either is ±0.\r\n      : !xd || !yd ? y.s / 0 : y.s * 0);\r\n  }\r\n\r\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = getBase10Exponent(r, e);\r\n\r\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toBinary = function (sd, rm) {\r\n  return toStringBinary(this, 2, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return finalise(x, dp + x.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), dp + 1, rm);\r\n    str = finiteToString(x, true, dp + 1);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n    str = finiteToString(y, false, dp + y.e + 1);\r\n  }\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */\r\nP.toFraction = function (maxD) {\r\n  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n    x = this,\r\n    xd = x.d,\r\n    Ctor = x.constructor;\r\n\r\n  if (!xd) return new Ctor(x);\r\n\r\n  n1 = d0 = new Ctor(1);\r\n  d1 = n0 = new Ctor(0);\r\n\r\n  d = new Ctor(d1);\r\n  e = d.e = getPrecision(xd) - x.e - 1;\r\n  k = e % LOG_BASE;\r\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n  if (maxD == null) {\r\n\r\n    // d is 10**e, the minimum max-denominator needed.\r\n    maxD = e > 0 ? d : n1;\r\n  } else {\r\n    n = new Ctor(maxD);\r\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n  }\r\n\r\n  external = false;\r\n  n = new Ctor(digitsToString(xd));\r\n  pr = Ctor.precision;\r\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n  for (;;)  {\r\n    q = divide(n, d, 0, 1, 1);\r\n    d2 = d0.plus(q.times(d1));\r\n    if (d2.cmp(maxD) == 1) break;\r\n    d0 = d1;\r\n    d1 = d2;\r\n    d2 = n1;\r\n    n1 = n0.plus(q.times(d2));\r\n    n0 = d2;\r\n    d2 = d;\r\n    d = n.minus(q.times(d2));\r\n    n = d2;\r\n  }\r\n\r\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n  n0 = n0.plus(d2.times(n1));\r\n  d0 = d0.plus(d2.times(d1));\r\n  n0.s = n1.s = x.s;\r\n\r\n  // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n      ? [n1, d1] : [n0, d0];\r\n\r\n  Ctor.precision = pr;\r\n  external = true;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toHexadecimal = P.toHex = function (sd, rm) {\r\n  return toStringBinary(this, 16, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toNearest = function (y, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (y == null) {\r\n\r\n    // If x is not finite, return x.\r\n    if (!x.d) return x;\r\n\r\n    y = new Ctor(1);\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    y = new Ctor(y);\r\n    if (rm === void 0) {\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    // If x is not finite, return x if y is not NaN, else NaN.\r\n    if (!x.d) return y.s ? x : y;\r\n\r\n    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n    if (!y.d) {\r\n      if (y.s) y.s = x.s;\r\n      return y;\r\n    }\r\n  }\r\n\r\n  // If y is not zero, calculate the nearest multiple of y to x.\r\n  if (y.d[0]) {\r\n    external = false;\r\n    x = divide(x, y, 0, rm, 1).times(y);\r\n    external = true;\r\n    finalise(x);\r\n\r\n  // If y is zero, return zero with the sign of x.\r\n  } else {\r\n    y.s = x.s;\r\n    x = y;\r\n  }\r\n\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toOctal = function (sd, rm) {\r\n  return toStringBinary(this, 8, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, rm, s,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // Either ±Infinity, NaN or ±0?\r\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (x.eq(1)) return x;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n  // y exponent\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = intPow(Ctor, x, k, pr);\r\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n  }\r\n\r\n  s = x.s;\r\n\r\n  // if x is negative\r\n  if (s < 0) {\r\n\r\n    // if y is not an integer\r\n    if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n    // Result is positive if x is negative and the last digit of integer y is even.\r\n    if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n    // if x.eq(-1)\r\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n      x.s = s;\r\n      return x;\r\n    }\r\n  }\r\n\r\n  // Estimate result exponent.\r\n  // x^y = 10^e,  where e = y * log10(x)\r\n  // log10(x) = log10(x_significand) + x_exponent\r\n  // log10(x_significand) = ln(x_significand) / ln(10)\r\n  k = mathpow(+x, yn);\r\n  e = k == 0 || !isFinite(k)\r\n    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n    : new Ctor(k + '').e;\r\n\r\n  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n  // Overflow/underflow?\r\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n  external = false;\r\n  Ctor.rounding = x.s = 1;\r\n\r\n  // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n  // new Decimal(2.32456).pow('2087987436534566.46411')\r\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n  k = Math.min(12, (e + '').length);\r\n\r\n  // r = x^y = exp(y*ln(x))\r\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n  if (r.d) {\r\n\r\n    // Truncate to the required precision plus five rounding digits.\r\n    r = finalise(r, pr + 5, 1);\r\n\r\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n    // the result.\r\n    if (checkRoundingDigits(r.d, pr, rm)) {\r\n      e = pr + 10;\r\n\r\n      // Truncate to the increased precision plus five rounding digits.\r\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n        r = finalise(r, pr + 1, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  r.s = s;\r\n  external = true;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), sd, rm);\r\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toSignificantDigits = P.toSD = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return finalise(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */\r\nP.truncated = P.trunc = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() ? '-' + str : str;\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */\r\nfunction checkRoundingDigits(d, i, rm, repeating) {\r\n  var di, k, r, rd;\r\n\r\n  // Get the length of the first word of the array d.\r\n  for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n  // Is the rounding digit in the first word of d?\r\n  if (--i < 0) {\r\n    i += LOG_BASE;\r\n    di = 0;\r\n  } else {\r\n    di = Math.ceil((i + 1) / LOG_BASE);\r\n    i %= LOG_BASE;\r\n  }\r\n\r\n  // i is the index (0 - 6) of the rounding digit.\r\n  // E.g. if within the word 3487563 the first rounding digit is 5,\r\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n  k = mathpow(10, LOG_BASE - i);\r\n  rd = d[di] % k | 0;\r\n\r\n  if (repeating == null) {\r\n    if (i < 3) {\r\n      if (i == 0) rd = rd / 100 | 0;\r\n      else if (i == 1) rd = rd / 10 | 0;\r\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n    } else {\r\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n    }\r\n  } else {\r\n    if (i < 4) {\r\n      if (i == 0) rd = rd / 1000 | 0;\r\n      else if (i == 1) rd = rd / 100 | 0;\r\n      else if (i == 2) rd = rd / 10 | 0;\r\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n    } else {\r\n      r = ((repeating || rm < 4) && rd + 1 == k ||\r\n      (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n    }\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n// Eg. convertBase('255', 10, 16) returns [15, 15].\r\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\nfunction convertBase(str, baseIn, baseOut) {\r\n  var j,\r\n    arr = [0],\r\n    arrL,\r\n    i = 0,\r\n    strL = str.length;\r\n\r\n  for (; i < strL;) {\r\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n    for (j = 0; j < arr.length; j++) {\r\n      if (arr[j] > baseOut - 1) {\r\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n        arr[j + 1] += arr[j] / baseOut | 0;\r\n        arr[j] %= baseOut;\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr.reverse();\r\n}\r\n\r\n\r\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction cosine(Ctor, x) {\r\n  var k, len, y;\r\n\r\n  if (x.isZero()) return x;\r\n\r\n  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  len = x.d.length;\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    y = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    y = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  Ctor.precision += k;\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n  // Reverse argument reduction\r\n  for (var i = k; i--;) {\r\n    var cos2x = x.times(x);\r\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n  }\r\n\r\n  Ctor.precision -= k;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Perform division in the specified base.\r\n */\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k, base) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % base | 0;\r\n      carry = temp / base | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL, base) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * base + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, rm, dp, base) {\r\n    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n      yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either NaN, Infinity or 0?\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n    }\r\n\r\n    if (base) {\r\n      logBase = 1;\r\n      e = x.e - y.e;\r\n    } else {\r\n      base = BASE;\r\n      logBase = LOG_BASE;\r\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n    }\r\n\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n    if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else if (dp) {\r\n      sd = pr + (x.e - y.e) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) {\r\n      qd.push(1);\r\n      more = true;\r\n    } else {\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / logBase + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * base + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n        more = k || i < xL;\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= base/2\r\n        k = base / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k, base);\r\n          xd = multiplyInteger(xd, k, base);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= base / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= base) k = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL, base);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n        more = rem[0] !== void 0;\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n    }\r\n\r\n    // logBase is 1 when divide is being used for base conversion.\r\n    if (logBase == 1) {\r\n      q.e = e;\r\n      inexact = more;\r\n    } else {\r\n\r\n      // To calculate q.e, first get the number of digits of qd[0].\r\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n      q.e = i + e * logBase - 1;\r\n\r\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n    }\r\n\r\n    return q;\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */\r\n function finalise(x, sd, rm, isTruncated) {\r\n  var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n    Ctor = x.constructor;\r\n\r\n  // Don't round if sd is null or undefined.\r\n  out: if (sd != null) {\r\n    xd = x.d;\r\n\r\n    // Infinity/NaN.\r\n    if (!xd) return x;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd containing rd, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // digits: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n    i = sd - digits;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) {\r\n        if (isTruncated) {\r\n\r\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n          for (; k++ <= xdi;) xd.push(0);\r\n          w = rd = 0;\r\n          digits = 1;\r\n          i %= LOG_BASE;\r\n          j = i - LOG_BASE + 1;\r\n        } else {\r\n          break out;\r\n        }\r\n      } else {\r\n        w = k = xd[xdi];\r\n\r\n        // Get the number of digits of w.\r\n        for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n        // Get the index of rd within w.\r\n        i %= LOG_BASE;\r\n\r\n        // Get the index of rd within w, adjusted for leading zeros.\r\n        // The number of leading zeros of w is given by LOG_BASE - digits.\r\n        j = i - LOG_BASE + digits;\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      }\r\n    }\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    isTruncated = isTruncated || sd < 0 ||\r\n      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n    // will give 714.\r\n\r\n    roundUp = rm < 4\r\n      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      xd.length = 0;\r\n      if (roundUp) {\r\n\r\n        // Convert sd to decimal places.\r\n        sd -= x.e + 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = -sd || 0;\r\n      } else {\r\n\r\n        // Zero.\r\n        xd[0] = x.e = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (roundUp) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n\r\n          // i will be the length of xd[0] before k is added.\r\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n          j = xd[0] += k;\r\n          for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n          // if i != k the length has increased.\r\n          if (i != k) {\r\n            x.e++;\r\n            if (xd[0] == BASE) xd[0] = 1;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n  }\r\n\r\n  if (external) {\r\n\r\n    // Overflow?\r\n    if (x.e > Ctor.maxE) {\r\n\r\n      // Infinity.\r\n      x.d = null;\r\n      x.e = NaN;\r\n\r\n    // Underflow?\r\n    } else if (x.e < Ctor.minE) {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n      // Ctor.underflow = true;\r\n    } // else Ctor.underflow = false;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction finiteToString(x, isExp, sd) {\r\n  if (!x.isFinite()) return nonFiniteToString(x);\r\n  var k,\r\n    e = x.e,\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(digits, e) {\r\n  var w = digits[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n  if (sd > LN10_PRECISION) {\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(precisionLimitExceeded);\r\n  }\r\n  return finalise(new Ctor(LN10), sd, 1, true);\r\n}\r\n\r\n\r\nfunction getPi(Ctor, sd, rm) {\r\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n  return finalise(new Ctor(PI), sd, rm, true);\r\n}\r\n\r\n\r\nfunction getPrecision(digits) {\r\n  var w = digits.length - 1,\r\n    len = w * LOG_BASE + 1;\r\n\r\n  w = digits[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) len--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = digits[0]; w >= 10; w /= 10) len++;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */\r\nfunction intPow(Ctor, x, n, pr) {\r\n  var isTruncated,\r\n    r = new Ctor(1),\r\n\r\n    // Max n of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n  external = false;\r\n\r\n  for (;;) {\r\n    if (n % 2) {\r\n      r = r.times(x);\r\n      if (truncate(r.d, k)) isTruncated = true;\r\n    }\r\n\r\n    n = mathfloor(n / 2);\r\n    if (n === 0) {\r\n\r\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n      n = r.d.length - 1;\r\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n      break;\r\n    }\r\n\r\n    x = x.times(x);\r\n    truncate(x.d, k);\r\n  }\r\n\r\n  external = true;\r\n\r\n  return r;\r\n}\r\n\r\n\r\nfunction isOdd(n) {\r\n  return n.d[n.d.length - 1] & 1;\r\n}\r\n\r\n\r\n/*\r\n * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n */\r\nfunction maxOrMin(Ctor, args, ltgt) {\r\n  var y,\r\n    x = new Ctor(args[0]),\r\n    i = 0;\r\n\r\n  for (; ++i < args.length;) {\r\n    y = new Ctor(args[i]);\r\n    if (!y.s) {\r\n      x = y;\r\n      break;\r\n    } else if (x[ltgt](y)) {\r\n      x = y;\r\n    }\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */\r\nfunction naturalExponential(x, sd) {\r\n  var denominator, guard, j, pow, sum, t, wpr,\r\n    rep = 0,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // 0/NaN/Infinity?\r\n  if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n    return new Ctor(x.d\r\n      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n      : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  // while abs(x) >= 0.1\r\n  while (x.e > -2) {\r\n\r\n    // x = x / 2^5\r\n    x = x.times(t);\r\n    k += 5;\r\n  }\r\n\r\n  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n  // necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(1);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = finalise(pow.times(x), wpr, 1);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      j = k;\r\n      while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n      // Check to see if the first 4 rounding digits are [49]999.\r\n      // If so, repeat the summation with a higher precision, otherwise\r\n      // e.g. with precision: 18, rounding: 1\r\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n\r\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += 10;\r\n          denominator = pow = t = new Ctor(1);\r\n          i = 0;\r\n          rep++;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */\r\nfunction naturalLogarithm(y, sd) {\r\n  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // Is x negative or Infinity, NaN, 0 or 1?\r\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  Ctor.precision = wpr += guard;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n\r\n  if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = x.e;\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n    Ctor.precision = pr;\r\n\r\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n  }\r\n\r\n  // x1 is x reduced to a value near 1.\r\n  x1 = x;\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n  x2 = finalise(x.times(x), wpr, 1);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = finalise(numerator.times(x2), wpr, 1);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n      // been repeated previously) and the first 4 rounding digits 9999?\r\n      // If so, restart the summation with a higher precision, otherwise\r\n      // e.g. with precision: 12, rounding: 1\r\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += guard;\r\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n          x2 = finalise(x.times(x), wpr, 1);\r\n          denominator = rep = 1;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n// ±Infinity, NaN.\r\nfunction nonFiniteToString(x) {\r\n  // Unsigned.\r\n  return String(x.s * x.s / 0);\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    x.e = e = e - i - 1;\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > x.constructor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < x.constructor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // x.constructor.underflow = true;\r\n      } // else x.constructor.underflow = false;\r\n    }\r\n  } else {\r\n\r\n    // Zero.\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */\r\nfunction parseOther(x, str) {\r\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n  if (str.indexOf('_') > -1) {\r\n    str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n    if (isDecimal.test(str)) return parseDecimal(x, str);\r\n  } else if (str === 'Infinity' || str === 'NaN') {\r\n    if (!+str) x.s = NaN;\r\n    x.e = NaN;\r\n    x.d = null;\r\n    return x;\r\n  }\r\n\r\n  if (isHex.test(str))  {\r\n    base = 16;\r\n    str = str.toLowerCase();\r\n  } else if (isBinary.test(str))  {\r\n    base = 2;\r\n  } else if (isOctal.test(str))  {\r\n    base = 8;\r\n  } else {\r\n    throw Error(invalidArgument + str);\r\n  }\r\n\r\n  // Is there a binary exponent part?\r\n  i = str.search(/p/i);\r\n\r\n  if (i > 0) {\r\n    p = +str.slice(i + 1);\r\n    str = str.substring(2, i);\r\n  } else {\r\n    str = str.slice(2);\r\n  }\r\n\r\n  // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n  // fraction part will be restored.\r\n  i = str.indexOf('.');\r\n  isFloat = i >= 0;\r\n  Ctor = x.constructor;\r\n\r\n  if (isFloat) {\r\n    str = str.replace('.', '');\r\n    len = str.length;\r\n    i = len - i;\r\n\r\n    // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n  }\r\n\r\n  xd = convertBase(str, base, BASE);\r\n  xe = xd.length - 1;\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xe; xd[i] === 0; --i) xd.pop();\r\n  if (i < 0) return new Ctor(x.s * 0);\r\n  x.e = getBase10Exponent(xd, xe);\r\n  x.d = xd;\r\n  external = false;\r\n\r\n  // At what precision to perform the division to ensure exact conversion?\r\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n  // Therefore using 4 * the number of digits of str will always be enough.\r\n  if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n  // Multiply by the binary exponent part if present.\r\n  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n  external = true;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction sine(Ctor, x) {\r\n  var k,\r\n    len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n  }\r\n\r\n  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  k = 1.4 * Math.sqrt(len);\r\n  k = k > 16 ? 16 : k | 0;\r\n\r\n  x = x.times(1 / tinyPow(5, k));\r\n  x = taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Reverse argument reduction\r\n  var sin2_x,\r\n    d5 = new Ctor(5),\r\n    d16 = new Ctor(16),\r\n    d20 = new Ctor(20);\r\n  for (; k--;) {\r\n    sin2_x = x.times(x);\r\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n  var j, t, u, x2,\r\n    i = 1,\r\n    pr = Ctor.precision,\r\n    k = Math.ceil(pr / LOG_BASE);\r\n\r\n  external = false;\r\n  x2 = x.times(x);\r\n  u = new Ctor(y);\r\n\r\n  for (;;) {\r\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    t = u.plus(y);\r\n\r\n    if (t.d[k] !== void 0) {\r\n      for (j = k; t.d[j] === u.d[j] && j--;);\r\n      if (j == -1) break;\r\n    }\r\n\r\n    j = u;\r\n    u = y;\r\n    y = t;\r\n    t = j;\r\n    i++;\r\n  }\r\n\r\n  external = true;\r\n  t.d.length = k + 1;\r\n\r\n  return t;\r\n}\r\n\r\n\r\n// Exponent e must be positive and non-zero.\r\nfunction tinyPow(b, e) {\r\n  var n = b;\r\n  while (--e) n *= b;\r\n  return n;\r\n}\r\n\r\n\r\n// Return the absolute value of `x` reduced to less than or equal to half pi.\r\nfunction toLessThanHalfPi(Ctor, x) {\r\n  var t,\r\n    isNeg = x.s < 0,\r\n    pi = getPi(Ctor, Ctor.precision, 1),\r\n    halfPi = pi.times(0.5);\r\n\r\n  x = x.abs();\r\n\r\n  if (x.lte(halfPi)) {\r\n    quadrant = isNeg ? 4 : 1;\r\n    return x;\r\n  }\r\n\r\n  t = x.divToInt(pi);\r\n\r\n  if (t.isZero()) {\r\n    quadrant = isNeg ? 3 : 2;\r\n  } else {\r\n    x = x.minus(t.times(pi));\r\n\r\n    // 0 <= x < pi\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n      return x;\r\n    }\r\n\r\n    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n  }\r\n\r\n  return x.minus(pi).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */\r\nfunction toStringBinary(x, baseOut, sd, rm) {\r\n  var base, e, i, k, len, roundUp, str, xd, y,\r\n    Ctor = x.constructor,\r\n    isExp = sd !== void 0;\r\n\r\n  if (isExp) {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  } else {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  }\r\n\r\n  if (!x.isFinite()) {\r\n    str = nonFiniteToString(x);\r\n  } else {\r\n    str = finiteToString(x);\r\n    i = str.indexOf('.');\r\n\r\n    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n    // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n    if (isExp) {\r\n      base = 2;\r\n      if (baseOut == 16) {\r\n        sd = sd * 4 - 3;\r\n      } else if (baseOut == 8) {\r\n        sd = sd * 3 - 2;\r\n      }\r\n    } else {\r\n      base = baseOut;\r\n    }\r\n\r\n    // Convert the number as an integer then divide the result by its base raised to a power such\r\n    // that the fraction part will be restored.\r\n\r\n    // Non-integer.\r\n    if (i >= 0) {\r\n      str = str.replace('.', '');\r\n      y = new Ctor(1);\r\n      y.e = str.length - i;\r\n      y.d = convertBase(finiteToString(y), 10, base);\r\n      y.e = y.d.length;\r\n    }\r\n\r\n    xd = convertBase(str, 10, base);\r\n    e = len = xd.length;\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] == 0;) xd.pop();\r\n\r\n    if (!xd[0]) {\r\n      str = isExp ? '0p+0' : '0';\r\n    } else {\r\n      if (i < 0) {\r\n        e--;\r\n      } else {\r\n        x = new Ctor(x);\r\n        x.d = xd;\r\n        x.e = e;\r\n        x = divide(x, y, sd, rm, 0, base);\r\n        xd = x.d;\r\n        e = x.e;\r\n        roundUp = inexact;\r\n      }\r\n\r\n      // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      i = xd[sd];\r\n      k = base / 2;\r\n      roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n      roundUp = rm < 4\r\n        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n          rm === (x.s < 0 ? 8 : 7));\r\n\r\n      xd.length = sd;\r\n\r\n      if (roundUp) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up and so on.\r\n        for (; ++xd[--sd] > base - 1;) {\r\n          xd[sd] = 0;\r\n          if (!sd) {\r\n            ++e;\r\n            xd.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Determine trailing zeros.\r\n      for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n      // E.g. [4, 11, 15] becomes 4bf.\r\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n      // Add binary exponent suffix?\r\n      if (isExp) {\r\n        if (len > 1) {\r\n          if (baseOut == 16 || baseOut == 8) {\r\n            i = baseOut == 16 ? 4 : 3;\r\n            for (--len; len % i; len++) str += '0';\r\n            xd = convertBase(str, base, baseOut);\r\n            for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n            // xd[0] will always be be 1\r\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n          } else {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n          }\r\n        }\r\n\r\n        str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n      } else if (e < 0) {\r\n        for (; ++e;) str = '0' + str;\r\n        str = '0.' + str;\r\n      } else {\r\n        if (++e > len) for (e -= len; e-- ;) str += '0';\r\n        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clamp\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  sum\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction abs(x) {\r\n  return new this(x).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction acos(x) {\r\n  return new this(x).acos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction acosh(x) {\r\n  return new this(x).acosh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction add(x, y) {\r\n  return new this(x).plus(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction asin(x) {\r\n  return new this(x).asin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction asinh(x) {\r\n  return new this(x).asinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction atan(x) {\r\n  return new this(x).atan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction atanh(x) {\r\n  return new this(x).atanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|Decimal} The y-coordinate.\r\n * x {number|string|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */\r\nfunction atan2(y, x) {\r\n  y = new this(y);\r\n  x = new this(x);\r\n  var r,\r\n    pr = this.precision,\r\n    rm = this.rounding,\r\n    wpr = pr + 4;\r\n\r\n  // Either NaN\r\n  if (!y.s || !x.s) {\r\n    r = new this(NaN);\r\n\r\n  // Both ±Infinity\r\n  } else if (!y.d && !x.d) {\r\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n    r.s = y.s;\r\n\r\n  // x is ±Infinity or y is ±0\r\n  } else if (!x.d || y.isZero()) {\r\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n    r.s = y.s;\r\n\r\n  // y is ±Infinity or x is ±0\r\n  } else if (!y.d || x.isZero()) {\r\n    r = getPi(this, wpr, 1).times(0.5);\r\n    r.s = y.s;\r\n\r\n  // Both non-zero and finite\r\n  } else if (x.s < 0) {\r\n    this.precision = wpr;\r\n    this.rounding = 1;\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n    x = getPi(this, wpr, 1);\r\n    this.precision = pr;\r\n    this.rounding = rm;\r\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n  } else {\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction cbrt(x) {\r\n  return new this(x).cbrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ceil(x) {\r\n  return finalise(x = new this(x), x.e + 1, 2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n *\r\n * x {number|string|Decimal}\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nfunction clamp(x, min, max) {\r\n  return new this(x).clamp(min, max);\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n  var i, p, v,\r\n    useDefaults = obj.defaults === true,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -EXP_LIMIT, 0,\r\n      'toExpPos', 0, EXP_LIMIT,\r\n      'maxE', 0, EXP_LIMIT,\r\n      'minE', -EXP_LIMIT, 0,\r\n      'modulo', 0, 9\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n  if ((v = obj[p]) !== void 0) {\r\n    if (v === true || v === false || v === 0 || v === 1) {\r\n      if (v) {\r\n        if (typeof crypto != 'undefined' && crypto &&\r\n          (crypto.getRandomValues || crypto.randomBytes)) {\r\n          this[p] = true;\r\n        } else {\r\n          throw Error(cryptoUnavailable);\r\n        }\r\n      } else {\r\n        this[p] = false;\r\n      }\r\n    } else {\r\n      throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cos(x) {\r\n  return new this(x).cos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cosh(x) {\r\n  return new this(x).cosh();\r\n}\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(v) {\r\n    var e, i, t,\r\n      x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (isDecimalInstance(v)) {\r\n      x.s = v.s;\r\n\r\n      if (external) {\r\n        if (!v.d || v.e > Decimal.maxE) {\r\n\r\n          // Infinity.\r\n          x.e = NaN;\r\n          x.d = null;\r\n        } else if (v.e < Decimal.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d.slice();\r\n        }\r\n      } else {\r\n        x.e = v.e;\r\n        x.d = v.d ? v.d.slice() : v.d;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    t = typeof v;\r\n\r\n    if (t === 'number') {\r\n      if (v === 0) {\r\n        x.s = 1 / v < 0 ? -1 : 1;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (v === ~~v && v < 1e7) {\r\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n        if (external) {\r\n          if (e > Decimal.maxE) {\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (e < Decimal.minE) {\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n        } else {\r\n          x.e = e;\r\n          x.d = [v];\r\n        }\r\n\r\n        return;\r\n\r\n      // Infinity, NaN.\r\n      } else if (v * 0 !== 0) {\r\n        if (!v) x.s = NaN;\r\n        x.e = NaN;\r\n        x.d = null;\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n\r\n    } else if (t !== 'string') {\r\n      throw Error(invalidArgument + v);\r\n    }\r\n\r\n    // Minus sign?\r\n    if ((i = v.charCodeAt(0)) === 45) {\r\n      v = v.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      // Plus sign?\r\n      if (i === 43) v = v.slice(1);\r\n      x.s = 1;\r\n    }\r\n\r\n    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n  Decimal.EUCLID = 9;\r\n\r\n  Decimal.config = Decimal.set = config;\r\n  Decimal.clone = clone;\r\n  Decimal.isDecimal = isDecimalInstance;\r\n\r\n  Decimal.abs = abs;\r\n  Decimal.acos = acos;\r\n  Decimal.acosh = acosh;        // ES6\r\n  Decimal.add = add;\r\n  Decimal.asin = asin;\r\n  Decimal.asinh = asinh;        // ES6\r\n  Decimal.atan = atan;\r\n  Decimal.atanh = atanh;        // ES6\r\n  Decimal.atan2 = atan2;\r\n  Decimal.cbrt = cbrt;          // ES6\r\n  Decimal.ceil = ceil;\r\n  Decimal.clamp = clamp;\r\n  Decimal.cos = cos;\r\n  Decimal.cosh = cosh;          // ES6\r\n  Decimal.div = div;\r\n  Decimal.exp = exp;\r\n  Decimal.floor = floor;\r\n  Decimal.hypot = hypot;        // ES6\r\n  Decimal.ln = ln;\r\n  Decimal.log = log;\r\n  Decimal.log10 = log10;        // ES6\r\n  Decimal.log2 = log2;          // ES6\r\n  Decimal.max = max;\r\n  Decimal.min = min;\r\n  Decimal.mod = mod;\r\n  Decimal.mul = mul;\r\n  Decimal.pow = pow;\r\n  Decimal.random = random;\r\n  Decimal.round = round;\r\n  Decimal.sign = sign;          // ES6\r\n  Decimal.sin = sin;\r\n  Decimal.sinh = sinh;          // ES6\r\n  Decimal.sqrt = sqrt;\r\n  Decimal.sub = sub;\r\n  Decimal.sum = sum;\r\n  Decimal.tan = tan;\r\n  Decimal.tanh = tanh;          // ES6\r\n  Decimal.trunc = trunc;        // ES6\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    if (obj.defaults !== true) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction div(x, y) {\r\n  return new this(x).div(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */\r\nfunction exp(x) {\r\n  return new this(x).exp();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction floor(x) {\r\n  return finalise(x = new this(x), x.e + 1, 3);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction hypot() {\r\n  var i, n,\r\n    t = new this(0);\r\n\r\n  external = false;\r\n\r\n  for (i = 0; i < arguments.length;) {\r\n    n = new this(arguments[i++]);\r\n    if (!n.d) {\r\n      if (n.s) {\r\n        external = true;\r\n        return new this(1 / 0);\r\n      }\r\n      t = n;\r\n    } else if (t.d) {\r\n      t = t.plus(n.times(n));\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return t.sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */\r\nfunction isDecimalInstance(obj) {\r\n  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ln(x) {\r\n  return new this(x).ln();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|Decimal} The argument of the logarithm.\r\n * y {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nfunction log(x, y) {\r\n  return new this(x).log(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log2(x) {\r\n  return new this(x).log(2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log10(x) {\r\n  return new this(x).log(10);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction max() {\r\n  return maxOrMin(this, arguments, 'lt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction min() {\r\n  return maxOrMin(this, arguments, 'gt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mod(x, y) {\r\n  return new this(x).mod(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mul(x, y) {\r\n  return new this(x).mul(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The base.\r\n * y {number|string|Decimal} The exponent.\r\n *\r\n */\r\nfunction pow(x, y) {\r\n  return new this(x).pow(y);\r\n}\r\n\r\n\r\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */\r\nfunction random(sd) {\r\n  var d, e, k, n,\r\n    i = 0,\r\n    r = new this(1),\r\n    rd = [];\r\n\r\n  if (sd === void 0) sd = this.precision;\r\n  else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n  k = Math.ceil(sd / LOG_BASE);\r\n\r\n  if (!this.crypto) {\r\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n  // Browsers supporting crypto.getRandomValues.\r\n  } else if (crypto.getRandomValues) {\r\n    d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n    for (; i < k;) {\r\n      n = d[i];\r\n\r\n      // 0 <= n < 4294967296\r\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n      if (n >= 4.29e9) {\r\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } else {\r\n\r\n        // 0 <= n <= 4289999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd[i++] = n % 1e7;\r\n      }\r\n    }\r\n\r\n  // Node.js supporting crypto.randomBytes.\r\n  } else if (crypto.randomBytes) {\r\n\r\n    // buffer\r\n    d = crypto.randomBytes(k *= 4);\r\n\r\n    for (; i < k;) {\r\n\r\n      // 0 <= n < 2147483648\r\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n      if (n >= 2.14e9) {\r\n        crypto.randomBytes(4).copy(d, i);\r\n      } else {\r\n\r\n        // 0 <= n <= 2139999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd.push(n % 1e7);\r\n        i += 4;\r\n      }\r\n    }\r\n\r\n    i = k / 4;\r\n  } else {\r\n    throw Error(cryptoUnavailable);\r\n  }\r\n\r\n  k = rd[--i];\r\n  sd %= LOG_BASE;\r\n\r\n  // Convert trailing digits to zeros according to sd.\r\n  if (k && sd) {\r\n    n = mathpow(10, LOG_BASE - sd);\r\n    rd[i] = (k / n | 0) * n;\r\n  }\r\n\r\n  // Remove trailing words which are zero.\r\n  for (; rd[i] === 0; i--) rd.pop();\r\n\r\n  // Zero?\r\n  if (i < 0) {\r\n    e = 0;\r\n    rd = [0];\r\n  } else {\r\n    e = -1;\r\n\r\n    // Remove leading words which are zero and adjust exponent accordingly.\r\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n    // Count the digits of the first word of rd to determine leading zeros.\r\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n    // Adjust the exponent for leading zeros of the first word of rd.\r\n    if (k < LOG_BASE) e -= LOG_BASE - k;\r\n  }\r\n\r\n  r.e = e;\r\n  r.d = rd;\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction round(x) {\r\n  return finalise(x = new this(x), x.e + 1, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sign(x) {\r\n  x = new this(x);\r\n  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sin(x) {\r\n  return new this(x).sin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sinh(x) {\r\n  return new this(x).sinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sqrt(x) {\r\n  return new this(x).sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction sub(x, y) {\r\n  return new this(x).sub(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * Only the result is rounded, not the intermediate calculations.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction sum() {\r\n  var i = 0,\r\n    args = arguments,\r\n    x = new this(args[i]);\r\n\r\n  external = false;\r\n  for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n  external = true;\r\n\r\n  return finalise(x, this.precision, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tan(x) {\r\n  return new this(x).tan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tanh(x) {\r\n  return new this(x).tanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction trunc(x) {\r\n  return finalise(x = new this(x), x.e + 1, 1);\r\n}\r\n\r\n\r\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\r\nP[Symbol.toStringTag] = 'Decimal';\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = P.constructor = clone(DEFAULTS);\r\n\r\n// Create the internal constants from their string values.\r\nLN10 = new Decimal(LN10);\r\nPI = new Decimal(PI);\r\n\r\nexport default Decimal;\r\n","import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'BigNumber';\nvar dependencies = ['?on', 'config'];\nexport var createBigNumberClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config\n  } = _ref;\n  var BigNumber = Decimal.clone({\n    precision: config.precision,\n    modulo: Decimal.EUCLID\n  });\n  BigNumber.prototype = Object.create(BigNumber.prototype);\n\n  /**\n   * Attach type information\n   */\n  BigNumber.prototype.type = 'BigNumber';\n  BigNumber.prototype.isBigNumber = true;\n\n  /**\n   * Get a JSON representation of a BigNumber containing\n   * type information\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   */\n  BigNumber.prototype.toJSON = function () {\n    return {\n      mathjs: 'BigNumber',\n      value: this.toString()\n    };\n  };\n\n  /**\n   * Instantiate a BigNumber from a JSON object\n   * @param {Object} json  a JSON object structured as:\n   *                       `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   * @return {BigNumber}\n   */\n  BigNumber.fromJSON = function (json) {\n    return new BigNumber(json.value);\n  };\n  if (on) {\n    // listen for changed in the configuration, automatically apply changed precision\n    on('config', function (curr, prev) {\n      if (curr.precision !== prev.precision) {\n        BigNumber.config({\n          precision: curr.precision\n        });\n      }\n    });\n  }\n  return BigNumber;\n}, {\n  isClass: true\n});","import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'bignumber';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createBignumber = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber\n  } = _ref;\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  return typed('bignumber', {\n    '': function _() {\n      return new BigNumber(0);\n    },\n    number: function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new BigNumber(x + '');\n    },\n    string: function string(x) {\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n      if (wordSizeSuffixMatch) {\n        // x has a word size suffix\n        var size = wordSizeSuffixMatch[2];\n        var n = BigNumber(wordSizeSuffixMatch[1]);\n        var twoPowSize = new BigNumber(2).pow(Number(size));\n        if (n.gt(twoPowSize.sub(1))) {\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n        var twoPowSizeSubOne = new BigNumber(2).pow(Number(size) - 1);\n        if (n.gte(twoPowSizeSubOne)) {\n          return n.sub(twoPowSize);\n        } else {\n          return n;\n        }\n      }\n      return new BigNumber(x);\n    },\n    BigNumber: function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    Unit: typed.referToSelf(self => x => {\n      var clone = x.clone();\n      clone.value = self(x.value);\n      return clone;\n    }),\n    Fraction: function Fraction(x) {\n      return new BigNumber(x.n).div(x.d).times(x.s);\n    },\n    null: function _null(x) {\n      return new BigNumber(0);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import Complex from 'complex.js';\nimport { format } from '../../utils/number.js';\nimport { isNumber, isUnit } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Complex';\nvar dependencies = [];\nexport var createComplexClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(Complex, 'name', {\n    value: 'Complex'\n  });\n  Complex.prototype.constructor = Complex;\n  Complex.prototype.type = 'Complex';\n  Complex.prototype.isComplex = true;\n\n  /**\n   * Get a JSON representation of the complex number\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`\n   */\n  Complex.prototype.toJSON = function () {\n    return {\n      mathjs: 'Complex',\n      re: this.re,\n      im: this.im\n    };\n  };\n\n  /*\n   * Return the value of the complex number in polar notation\n   * The angle phi will be set in the interval of [-pi, pi].\n   * @return {{r: number, phi: number}} Returns and object with properties r and phi.\n   */\n  Complex.prototype.toPolar = function () {\n    return {\n      r: this.abs(),\n      phi: this.arg()\n    };\n  };\n\n  /**\n   * Get a string representation of the complex number,\n   * with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string} str\n   */\n  Complex.prototype.format = function (options) {\n    var str = '';\n    var im = this.im;\n    var re = this.re;\n    var strRe = format(this.re, options);\n    var strIm = format(this.im, options);\n\n    // round either re or im when smaller than the configured precision\n    var precision = isNumber(options) ? options : options ? options.precision : null;\n    if (precision !== null) {\n      var epsilon = Math.pow(10, -precision);\n      if (Math.abs(re / im) < epsilon) {\n        re = 0;\n      }\n      if (Math.abs(im / re) < epsilon) {\n        im = 0;\n      }\n    }\n    if (im === 0) {\n      // real value\n      str = strRe;\n    } else if (re === 0) {\n      // purely complex value\n      if (im === 1) {\n        str = 'i';\n      } else if (im === -1) {\n        str = '-i';\n      } else {\n        str = strIm + 'i';\n      }\n    } else {\n      // complex value\n      if (im < 0) {\n        if (im === -1) {\n          str = strRe + ' - i';\n        } else {\n          str = strRe + ' - ' + strIm.substring(1) + 'i';\n        }\n      } else {\n        if (im === 1) {\n          str = strRe + ' + i';\n        } else {\n          str = strRe + ' + ' + strIm + 'i';\n        }\n      }\n    }\n    return str;\n  };\n\n  /**\n   * Create a complex number from polar coordinates\n   *\n   * Usage:\n   *\n   *     Complex.fromPolar(r: number, phi: number) : Complex\n   *     Complex.fromPolar({r: number, phi: number}) : Complex\n   *\n   * @param {*} args...\n   * @return {Complex}\n   */\n  Complex.fromPolar = function (args) {\n    switch (arguments.length) {\n      case 1:\n        {\n          var arg = arguments[0];\n          if (typeof arg === 'object') {\n            return Complex(arg);\n          } else {\n            throw new TypeError('Input has to be an object with r and phi keys.');\n          }\n        }\n      case 2:\n        {\n          var r = arguments[0];\n          var phi = arguments[1];\n          if (isNumber(r)) {\n            if (isUnit(phi) && phi.hasBase('ANGLE')) {\n              // convert unit to a number in radians\n              phi = phi.toNumber('rad');\n            }\n            if (isNumber(phi)) {\n              return new Complex({\n                r,\n                phi\n              });\n            }\n            throw new TypeError('Phi is not a number nor an angle unit.');\n          } else {\n            throw new TypeError('Radius r is not a number.');\n          }\n        }\n      default:\n        throw new SyntaxError('Wrong number of arguments in function fromPolar');\n    }\n  };\n  Complex.prototype.valueOf = Complex.prototype.toString;\n\n  /**\n   * Create a Complex number from a JSON object\n   * @param {Object} json  A JSON Object structured as\n   *                       {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}\n   *                       All properties are optional, default values\n   *                       for `re` and `im` are 0.\n   * @return {Complex} Returns a new Complex number\n   */\n  Complex.fromJSON = function (json) {\n    return new Complex(json);\n  };\n\n  /**\n   * Compare two complex numbers, `a` and `b`:\n   *\n   * - Returns 1 when the real part of `a` is larger than the real part of `b`\n   * - Returns -1 when the real part of `a` is smaller than the real part of `b`\n   * - Returns 1 when the real parts are equal\n   *   and the imaginary part of `a` is larger than the imaginary part of `b`\n   * - Returns -1 when the real parts are equal\n   *   and the imaginary part of `a` is smaller than the imaginary part of `b`\n   * - Returns 0 when both real and imaginary parts are equal.\n   *\n   * @params {Complex} a\n   * @params {Complex} b\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n  Complex.compare = function (a, b) {\n    if (a.re > b.re) {\n      return 1;\n    }\n    if (a.re < b.re) {\n      return -1;\n    }\n    if (a.im > b.im) {\n      return 1;\n    }\n    if (a.im < b.im) {\n      return -1;\n    }\n    return 0;\n  };\n  return Complex;\n}, {\n  isClass: true\n});","import Fraction from 'fraction.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Fraction';\nvar dependencies = [];\nexport var createFractionClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(Fraction, 'name', {\n    value: 'Fraction'\n  });\n  Fraction.prototype.constructor = Fraction;\n  Fraction.prototype.type = 'Fraction';\n  Fraction.prototype.isFraction = true;\n\n  /**\n   * Get a JSON representation of a Fraction containing type information\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`\n   */\n  Fraction.prototype.toJSON = function () {\n    return {\n      mathjs: 'Fraction',\n      n: this.s * this.n,\n      d: this.d\n    };\n  };\n\n  /**\n   * Instantiate a Fraction from a JSON object\n   * @param {Object} json  a JSON object structured as:\n   *                       `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`\n   * @return {BigNumber}\n   */\n  Fraction.fromJSON = function (json) {\n    return new Fraction(json);\n  };\n  return Fraction;\n}, {\n  isClass: true\n});","import { factory } from '../../../utils/factory.js';\nimport { deepMap } from '../../../utils/collection.js';\nvar name = 'fraction';\nvar dependencies = ['typed', 'Fraction'];\nexport var createFraction = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Fraction\n  } = _ref;\n  /**\n   * Create a fraction or convert a value to a fraction.\n   *\n   * With one numeric argument, produces the closest rational approximation to the\n   * input.\n   * With two arguments, the first is the numerator and the second is the denominator,\n   * and creates the corresponding fraction. Both numerator and denominator must be\n   * integers.\n   * With one object argument, looks for the integer numerator as the value of property\n   * 'n' and the integer denominator as the value of property 'd'.\n   * With a matrix argument, creates a matrix of the same shape with entries\n   * converted into fractions.\n   *\n   * Syntax:\n   *     math.fraction(value)\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)\n   *\n   * Examples:\n   *\n   *     math.fraction(6.283)             // returns Fraction 6283/1000\n   *     math.fraction(1, 3)              // returns Fraction 1/3\n   *     math.fraction('2/3')             // returns Fraction 2/3\n   *     math.fraction({n: 2, d: 3})      // returns Fraction 2/3\n   *     math.fraction([0.2, 0.25, 1.25]) // returns Array [1/5, 1/4, 5/4]\n   *     math.fraction(4, 5.1)            // throws Error: Parameters must be integer\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Unit | Array | Matrix} [args]\n   *            Arguments specifying the value, or numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n  return typed('fraction', {\n    number: function number(x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n      return new Fraction(x);\n    },\n    string: function string(x) {\n      return new Fraction(x);\n    },\n    'number, number': function numberNumber(numerator, denominator) {\n      return new Fraction(numerator, denominator);\n    },\n    null: function _null(x) {\n      return new Fraction(0);\n    },\n    BigNumber: function BigNumber(x) {\n      return new Fraction(x.toString());\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n\n    Unit: typed.referToSelf(self => x => {\n      var clone = x.clone();\n      clone.value = self(x.value);\n      return clone;\n    }),\n    Object: function Object(x) {\n      return new Fraction(x);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","import { isArray, isBigNumber, isCollection, isIndex, isMatrix, isNumber, isString, typeOf } from '../../utils/is.js';\nimport { arraySize, getArrayDataType, processSizesWildcard, reshape, resize, unsqueeze, validate, validateIndex, broadcastTo } from '../../utils/array.js';\nimport { format } from '../../utils/string.js';\nimport { isInteger } from '../../utils/number.js';\nimport { clone, deepStrictEqual } from '../../utils/object.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nvar name = 'DenseMatrix';\nvar dependencies = ['Matrix'];\nexport var createDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Matrix\n  } = _ref;\n  /**\n   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.\n   * @class DenseMatrix\n   * @enum {{ value, index: number[] }}\n   */\n  function DenseMatrix(data, datatype) {\n    if (!(this instanceof DenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data)) {\n      // check data is a DenseMatrix\n      if (data.type === 'DenseMatrix') {\n        // clone data & size\n        this._data = clone(data._data);\n        this._size = clone(data._size);\n        this._datatype = datatype || data._datatype;\n      } else {\n        // build data from existing matrix\n        this._data = data.toArray();\n        this._size = data.size();\n        this._datatype = datatype || data._datatype;\n      }\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      // verify the dimensions of the array\n      validate(this._data, this._size);\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // replace nested Matrices with Arrays\n      this._data = preprocess(data);\n      // get the dimensions of the array\n      this._size = arraySize(this._data);\n      // verify the dimensions of the array, TODO: compute size while processing array\n      validate(this._data, this._size);\n      // data type unknown\n      this._datatype = datatype;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n    }\n  }\n  DenseMatrix.prototype = new Matrix();\n\n  /**\n   * Create a new DenseMatrix\n   */\n  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(DenseMatrix, 'name', {\n    value: 'DenseMatrix'\n  });\n  DenseMatrix.prototype.constructor = DenseMatrix;\n  DenseMatrix.prototype.type = 'DenseMatrix';\n  DenseMatrix.prototype.isDenseMatrix = true;\n\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf DenseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n  DenseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._data, typeOf);\n  };\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()  // retrieve storage format\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The storage format.\n   */\n  DenseMatrix.prototype.storage = function () {\n    return 'dense';\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()   // retrieve matrix datatype\n   *\n   * @memberof DenseMatrix\n   * @return {string}           The datatype.\n   */\n  DenseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n\n  /**\n   * Create a new DenseMatrix\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n  DenseMatrix.prototype.create = function (data, datatype) {\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof DenseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    switch (arguments.length) {\n      case 1:\n        return _get(this, index);\n\n      // intentional fall through\n      case 2:\n      case 3:\n        return _set(this, index, replacement, defaultValue);\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  /**\n   * Get a single element from the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  DenseMatrix.prototype.get = function (index) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    }\n\n    // check index\n    for (var x = 0; x < index.length; x++) {\n      validateIndex(index[x], this._size[x]);\n    }\n    var data = this._data;\n    for (var i = 0, ii = index.length; i < ii; i++) {\n      var indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n    return data;\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @memberof DenseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {DenseMatrix} self\n   */\n  DenseMatrix.prototype.set = function (index, value, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length < this._size.length) {\n      throw new DimensionError(index.length, this._size.length, '<');\n    }\n    var i, ii, indexI;\n\n    // enlarge matrix when needed\n    var size = index.map(function (i) {\n      return i + 1;\n    });\n    _fit(this, size, defaultValue);\n\n    // traverse over the dimensions\n    var data = this._data;\n    for (i = 0, ii = index.length - 1; i < ii; i++) {\n      indexI = index[i];\n      validateIndex(indexI, data.length);\n      data = data[indexI];\n    }\n\n    // set new value\n    indexI = index[index.length - 1];\n    validateIndex(indexI, data.length);\n    data[indexI] = value;\n    return this;\n  };\n\n  /**\n   * Get a submatrix of this matrix\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index   Zero-based index\n   * @private\n   */\n  function _get(matrix, index) {\n    if (!isIndex(index)) {\n      throw new TypeError('Invalid index');\n    }\n    var isScalar = index.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(index.min());\n    } else {\n      // validate dimensions\n      var size = index.size();\n      if (size.length !== matrix._size.length) {\n        throw new DimensionError(size.length, matrix._size.length);\n      }\n\n      // validate if any of the ranges in the index is out of range\n      var min = index.min();\n      var max = index.max();\n      for (var i = 0, ii = matrix._size.length; i < ii; i++) {\n        validateIndex(min[i], matrix._size[i]);\n        validateIndex(max[i], matrix._size[i]);\n      }\n\n      // retrieve submatrix\n      // TODO: more efficient when creating an empty matrix and setting _data and _size manually\n      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);\n    }\n  }\n\n  /**\n   * Recursively get a submatrix of a multi dimensional matrix.\n   * Index is not checked for correct number or length of dimensions.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim    Current dimension\n   * @return {Array} submatrix\n   * @private\n   */\n  function _getSubmatrix(data, index, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n    if (last) {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        return data[i];\n      }).valueOf();\n    } else {\n      return range.map(function (i) {\n        validateIndex(i, data.length);\n        var child = data[i];\n        return _getSubmatrix(child, index, dims, dim + 1);\n      }).valueOf();\n    }\n  }\n\n  /**\n   * Replace a submatrix in this matrix\n   * Indexes are zero-based.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix\n   * @param {Index} index\n   * @param {DenseMatrix | Array | *} submatrix\n   * @param {*} defaultValue          Default value, filled in on new entries when\n   *                                  the matrix is resized.\n   * @return {DenseMatrix} matrix\n   * @private\n   */\n  function _set(matrix, index, submatrix, defaultValue) {\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    // get index size and check whether the index contains a single value\n    var iSize = index.size();\n    var isScalar = index.isScalar();\n\n    // calculate the size of the submatrix, and convert it into an Array if needed\n    var sSize;\n    if (isMatrix(submatrix)) {\n      sSize = submatrix.size();\n      submatrix = submatrix.valueOf();\n    } else {\n      sSize = arraySize(submatrix);\n    }\n    if (isScalar) {\n      // set a scalar\n\n      // check whether submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // set a submatrix\n\n      // broadcast submatrix\n      if (!deepStrictEqual(sSize, iSize)) {\n        try {\n          if (sSize.length === 0) {\n            submatrix = broadcastTo([submatrix], iSize);\n          } else {\n            submatrix = broadcastTo(submatrix, iSize);\n          }\n          sSize = arraySize(submatrix);\n        } catch (_unused) {}\n      }\n\n      // validate dimensions\n      if (iSize.length < matrix._size.length) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        }\n\n        // unsqueeze both outer and inner dimensions\n        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);\n      }\n\n      // check whether the size of the submatrix matches the index size\n      if (!deepStrictEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      }\n\n      // enlarge matrix when needed\n      var size = index.max().map(function (i) {\n        return i + 1;\n      });\n      _fit(matrix, size, defaultValue);\n\n      // insert the sub matrix\n      var dims = iSize.length;\n      var dim = 0;\n      _setSubmatrix(matrix._data, index, submatrix, dims, dim);\n    }\n    return matrix;\n  }\n\n  /**\n   * Replace a submatrix of a multi dimensional matrix.\n   * @memberof DenseMatrix\n   * @param {Array} data\n   * @param {Index} index\n   * @param {Array} submatrix\n   * @param {number} dims   Total number of dimensions\n   * @param {number} dim\n   * @private\n   */\n  function _setSubmatrix(data, index, submatrix, dims, dim) {\n    var last = dim === dims - 1;\n    var range = index.dimension(dim);\n    if (last) {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        data[dataIndex] = submatrix[subIndex[0]];\n      });\n    } else {\n      range.forEach(function (dataIndex, subIndex) {\n        validateIndex(dataIndex);\n        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);\n      });\n    }\n  }\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof DenseMatrix\n   * @param {number[] || Matrix} size The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isCollection(size)) {\n      throw new TypeError('Array or Matrix expected');\n    }\n\n    // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n    var sizeArray = size.valueOf().map(value => {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n\n    // matrix to resize\n    var m = copy ? this.clone() : this;\n    // resize matrix\n    return _resize(m, sizeArray, defaultValue);\n  };\n  function _resize(matrix, size, defaultValue) {\n    // check size\n    if (size.length === 0) {\n      // first value in matrix\n      var v = matrix._data;\n      // go deep\n      while (isArray(v)) {\n        v = v[0];\n      }\n      return v;\n    }\n    // resize matrix\n    matrix._size = size.slice(0); // copy the array\n    matrix._data = resize(matrix._data, matrix._size, defaultValue);\n    // return matrix\n    return matrix;\n  }\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof DenseMatrix\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  DenseMatrix.prototype.reshape = function (size, copy) {\n    var m = copy ? this.clone() : this;\n    m._data = reshape(m._data, size);\n    var currentLength = m._size.reduce((length, size) => length * size);\n    m._size = processSizesWildcard(size, currentLength);\n    return m;\n  };\n\n  /**\n   * Enlarge the matrix when it is smaller than given size.\n   * If the matrix is larger or equal sized, nothing is done.\n   * @memberof DenseMatrix\n   * @param {DenseMatrix} matrix           The matrix to be resized\n   * @param {number[]} size\n   * @param {*} defaultValue          Default value, filled in on new entries.\n   * @private\n   */\n  function _fit(matrix, size, defaultValue) {\n    var\n    // copy the array\n    newSize = matrix._size.slice(0);\n    var changed = false;\n\n    // add dimensions when needed\n    while (newSize.length < size.length) {\n      newSize.push(0);\n      changed = true;\n    }\n\n    // enlarge size when needed\n    for (var i = 0, ii = size.length; i < ii; i++) {\n      if (size[i] > newSize[i]) {\n        newSize[i] = size[i];\n        changed = true;\n      }\n    }\n    if (changed) {\n      // resize only when size is changed\n      _resize(matrix, newSize, defaultValue);\n    }\n  }\n\n  /**\n   * Create a clone of the matrix\n   * @memberof DenseMatrix\n   * @return {DenseMatrix} clone\n   */\n  DenseMatrix.prototype.clone = function () {\n    var m = new DenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof DenseMatrix\n   * @returns {number[]} size\n   */\n  DenseMatrix.prototype.size = function () {\n    return this._size.slice(0); // return a clone of _size\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   *\n   * @return {DenseMatrix} matrix\n   */\n  DenseMatrix.prototype.map = function (callback) {\n    // matrix instance\n    var me = this;\n    var args = maxArgumentCount(callback);\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        return value.map(function (child, i) {\n          return recurse(child, index.concat(i));\n        });\n      } else {\n        // invoke the callback function with the right number of arguments\n        if (args === 1) {\n          return callback(value);\n        } else if (args === 2) {\n          return callback(value, index);\n        } else {\n          // 3 or -1\n          return callback(value, index, me);\n        }\n      }\n    };\n\n    // determine the new datatype when the original matrix has datatype defined\n    // TODO: should be done in matrix constructor instead\n    var data = recurse(this._data, []);\n    var datatype = this._datatype !== undefined ? getArrayDataType(data, typeOf) : undefined;\n    return new DenseMatrix(data, datatype);\n  };\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof DenseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n  DenseMatrix.prototype.forEach = function (callback) {\n    // matrix instance\n    var me = this;\n    var recurse = function recurse(value, index) {\n      if (isArray(value)) {\n        value.forEach(function (child, i) {\n          recurse(child, index.concat(i));\n        });\n      } else {\n        callback(value, index, me);\n      }\n    };\n    recurse(this._data, []);\n  };\n\n  /**\n   * Iterate over the matrix elements\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n  DenseMatrix.prototype[Symbol.iterator] = function* () {\n    var recurse = function* recurse(value, index) {\n      if (isArray(value)) {\n        for (var i = 0; i < value.length; i++) {\n          yield* recurse(value[i], index.concat(i));\n        }\n      } else {\n        yield {\n          value,\n          index\n        };\n      }\n    };\n    yield* recurse(this._data, []);\n  };\n\n  /**\n   * Returns an array containing the rows of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n  DenseMatrix.prototype.rows = function () {\n    var result = [];\n    var s = this.size();\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n    var data = this._data;\n    for (var row of data) {\n      result.push(new DenseMatrix([row], this._datatype));\n    }\n    return result;\n  };\n\n  /**\n   * Returns an array containing the columns of a 2D matrix\n   * @returns {Array<Matrix>}\n   */\n  DenseMatrix.prototype.columns = function () {\n    var _this = this;\n    var result = [];\n    var s = this.size();\n    if (s.length !== 2) {\n      throw new TypeError('Rows can only be returned for a 2D matrix.');\n    }\n    var data = this._data;\n    var _loop = function _loop(i) {\n      var col = data.map(row => [row[i]]);\n      result.push(new DenseMatrix(col, _this._datatype));\n    };\n    for (var i = 0; i < s[1]; i++) {\n      _loop(i);\n    }\n    return result;\n  };\n\n  /**\n   * Create an Array with a copy of the data of the DenseMatrix\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.toArray = function () {\n    return clone(this._data);\n  };\n\n  /**\n   * Get the primitive value of the DenseMatrix: a multidimensional array\n   * @memberof DenseMatrix\n   * @returns {Array} array\n   */\n  DenseMatrix.prototype.valueOf = function () {\n    return this._data;\n  };\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof DenseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.format = function (options) {\n    return format(this._data, options);\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {string} str\n   */\n  DenseMatrix.prototype.toString = function () {\n    return format(this._data);\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof DenseMatrix\n   * @returns {Object}\n   */\n  DenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'DenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof DenseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix with the diagonal values.\n   */\n  DenseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // number diagonal values\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // x is a matrix get diagonal from matrix\n    var data = [];\n\n    // loop rows\n    for (var i = 0; i < n; i++) {\n      data[i] = this._data[i + kSub][i + kSuper];\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data,\n      size: [n],\n      datatype: this._datatype\n    });\n  };\n\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {Array} size                     The matrix size.\n   * @param {number | Matrix | Array } value The values for the diagonal.\n   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]          The default value for non-diagonal\n   * @param {string} [datatype]              The datatype for the diagonal\n   *\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.diagonal = function (size, value, k, defaultValue) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // map size & validate\n    size = size.map(function (s) {\n      // check it is a big number\n      if (isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      }\n      // validate arguments\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n      return s;\n    });\n\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n\n    // number of non-zero items\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // value extraction function\n    var _value;\n\n    // check value\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (isMatrix(value)) {\n      // matrix size\n      var ms = value.size();\n      // validate matrix\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    }\n\n    // discover default value if needed\n    if (!defaultValue) {\n      // check first value in array\n      defaultValue = isBigNumber(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero\n      : 0;\n    }\n\n    // empty array\n    var data = [];\n\n    // check we need to resize array\n    if (size.length > 0) {\n      // resize array\n      data = resize(data, size, defaultValue);\n      // fill diagonal\n      for (var d = 0; d < n; d++) {\n        data[d + kSub][d + kSuper] = _value(d);\n      }\n    }\n\n    // create DenseMatrix\n    return new DenseMatrix({\n      data,\n      size: [rows, columns]\n    });\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof DenseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {DenseMatrix}\n   */\n  DenseMatrix.fromJSON = function (json) {\n    return new DenseMatrix(json);\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof DenseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  DenseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    }\n    // check dimensions\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    // validate index\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]);\n\n    // swap rows\n    DenseMatrix._swapRows(i, j, this._data);\n    // return current instance\n    return this;\n  };\n\n  /**\n   * Swap rows i and j in Dense Matrix data structure.\n   *\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   * @param {Array} data     Matrix data\n   */\n  DenseMatrix._swapRows = function (i, j, data) {\n    // swap values i <-> j\n    var vi = data[i];\n    data[i] = data[j];\n    data[j] = vi;\n  };\n\n  /**\n   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and\n   * Matrices. Clones all (nested) Arrays, and replaces all nested Matrices with Arrays\n   * @memberof DenseMatrix\n   * @param {Array | Matrix} data\n   * @return {Array} data\n   */\n  function preprocess(data) {\n    if (isMatrix(data)) {\n      return preprocess(data.valueOf());\n    }\n    if (isArray(data)) {\n      return data.map(preprocess);\n    }\n    return data;\n  }\n  return DenseMatrix;\n}, {\n  isClass: true\n});","import { factory } from '../../utils/factory.js';\nvar name = 'FibonacciHeap';\nvar dependencies = ['smaller', 'larger'];\nexport var createFibonacciHeapClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    smaller,\n    larger\n  } = _ref;\n  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\n\n  /**\n   * Fibonacci Heap implementation, used interally for Matrix math.\n   * @class FibonacciHeap\n   * @constructor FibonacciHeap\n   */\n  function FibonacciHeap() {\n    if (!(this instanceof FibonacciHeap)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // initialize fields\n    this._minimum = null;\n    this._size = 0;\n  }\n\n  /**\n   * Attach type information\n   */\n  FibonacciHeap.prototype.type = 'FibonacciHeap';\n  FibonacciHeap.prototype.isFibonacciHeap = true;\n\n  /**\n   * Inserts a new data element into the heap. No heap consolidation is\n   * performed at this time, the new node is simply inserted into the root\n   * list of this heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.insert = function (key, value) {\n    // create node\n    var node = {\n      key,\n      value,\n      degree: 0\n    };\n    // check we have a node in the minimum\n    if (this._minimum) {\n      // minimum node\n      var minimum = this._minimum;\n      // update left & right of node\n      node.left = minimum;\n      node.right = minimum.right;\n      minimum.right = node;\n      node.right.left = node;\n      // update minimum node in heap if needed\n      if (smaller(key, minimum.key)) {\n        // node has a smaller key, use it as minimum\n        this._minimum = node;\n      }\n    } else {\n      // set left & right\n      node.left = node;\n      node.right = node;\n      // this is the first node\n      this._minimum = node;\n    }\n    // increment number of nodes in heap\n    this._size++;\n    // return node\n    return node;\n  };\n\n  /**\n   * Returns the number of nodes in heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.size = function () {\n    return this._size;\n  };\n\n  /**\n   * Removes all elements from this heap.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.clear = function () {\n    this._minimum = null;\n    this._size = 0;\n  };\n\n  /**\n   * Returns true if the heap is empty, otherwise false.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.isEmpty = function () {\n    return this._size === 0;\n  };\n\n  /**\n   * Extracts the node with minimum key from heap. Amortized running\n   * time: O(log n).\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.extractMinimum = function () {\n    // node to remove\n    var node = this._minimum;\n    // check we have a minimum\n    if (node === null) {\n      return node;\n    }\n    // current minimum\n    var minimum = this._minimum;\n    // get number of children\n    var numberOfChildren = node.degree;\n    // pointer to the first child\n    var x = node.child;\n    // for each child of node do...\n    while (numberOfChildren > 0) {\n      // store node in right side\n      var tempRight = x.right;\n      // remove x from child list\n      x.left.right = x.right;\n      x.right.left = x.left;\n      // add x to root list of heap\n      x.left = minimum;\n      x.right = minimum.right;\n      minimum.right = x;\n      x.right.left = x;\n      // set Parent[x] to null\n      x.parent = null;\n      x = tempRight;\n      numberOfChildren--;\n    }\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left;\n    // update minimum\n    if (node === node.right) {\n      // empty\n      minimum = null;\n    } else {\n      // update minimum\n      minimum = node.right;\n      // we need to update the pointer to the root with minimum key\n      minimum = _findMinimumNode(minimum, this._size);\n    }\n    // decrement size of heap\n    this._size--;\n    // update minimum\n    this._minimum = minimum;\n    // return node\n    return node;\n  };\n\n  /**\n   * Removes a node from the heap given the reference to the node. The trees\n   * in the heap will be consolidated, if necessary. This operation may fail\n   * to remove the correct element if there are nodes with key value -Infinity.\n   * Running time: O(log n) amortized.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.remove = function (node) {\n    // decrease key value\n    this._minimum = _decreaseKey(this._minimum, node, -1);\n    // remove the smallest\n    this.extractMinimum();\n  };\n\n  /**\n   * Decreases the key value for a heap node, given the new value to take on.\n   * The structure of the heap may be changed and will not be consolidated.\n   * Running time: O(1) amortized.\n   * @memberof FibonacciHeap\n   */\n  function _decreaseKey(minimum, node, key) {\n    // set node key\n    node.key = key;\n    // get parent node\n    var parent = node.parent;\n    if (parent && smaller(node.key, parent.key)) {\n      // remove node from parent\n      _cut(minimum, node, parent);\n      // remove all nodes from parent to the root parent\n      _cascadingCut(minimum, parent);\n    }\n    // update minimum node if needed\n    if (smaller(node.key, minimum.key)) {\n      minimum = node;\n    }\n    // return minimum\n    return minimum;\n  }\n\n  /**\n   * The reverse of the link operation: removes node from the child list of parent.\n   * This method assumes that min is non-null. Running time: O(1).\n   * @memberof FibonacciHeap\n   */\n  function _cut(minimum, node, parent) {\n    // remove node from parent children and decrement Degree[parent]\n    node.left.right = node.right;\n    node.right.left = node.left;\n    parent.degree--;\n    // reset y.child if necessary\n    if (parent.child === node) {\n      parent.child = node.right;\n    }\n    // remove child if degree is 0\n    if (parent.degree === 0) {\n      parent.child = null;\n    }\n    // add node to root list of heap\n    node.left = minimum;\n    node.right = minimum.right;\n    minimum.right = node;\n    node.right.left = node;\n    // set parent[node] to null\n    node.parent = null;\n    // set mark[node] to false\n    node.mark = false;\n  }\n\n  /**\n   * Performs a cascading cut operation. This cuts node from its parent and then\n   * does the same for its parent, and so on up the tree.\n   * Running time: O(log n); O(1) excluding the recursion.\n   * @memberof FibonacciHeap\n   */\n  function _cascadingCut(minimum, node) {\n    // store parent node\n    var parent = node.parent;\n    // if there's a parent...\n    if (!parent) {\n      return;\n    }\n    // if node is unmarked, set it marked\n    if (!node.mark) {\n      node.mark = true;\n    } else {\n      // it's marked, cut it from parent\n      _cut(minimum, node, parent);\n      // cut its parent as well\n      _cascadingCut(parent);\n    }\n  }\n\n  /**\n   * Make the first node a child of the second one. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  var _linkNodes = function _linkNodes(node, parent) {\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left;\n    // make node a Child of parent\n    node.parent = parent;\n    if (!parent.child) {\n      parent.child = node;\n      node.right = node;\n      node.left = node;\n    } else {\n      node.left = parent.child;\n      node.right = parent.child.right;\n      parent.child.right = node;\n      node.right.left = node;\n    }\n    // increase degree[parent]\n    parent.degree++;\n    // set mark[node] false\n    node.mark = false;\n  };\n  function _findMinimumNode(minimum, size) {\n    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree\n    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;\n    // create list with initial capacity\n    var array = new Array(arraySize);\n    // find the number of root nodes.\n    var numRoots = 0;\n    var x = minimum;\n    if (x) {\n      numRoots++;\n      x = x.right;\n      while (x !== minimum) {\n        numRoots++;\n        x = x.right;\n      }\n    }\n    // vars\n    var y;\n    // For each node in root list do...\n    while (numRoots > 0) {\n      // access this node's degree..\n      var d = x.degree;\n      // get next node\n      var next = x.right;\n      // check if there is a node already in array with the same degree\n      while (true) {\n        // get node with the same degree is any\n        y = array[d];\n        if (!y) {\n          break;\n        }\n        // make one node with the same degree a child of the other, do this based on the key value.\n        if (larger(x.key, y.key)) {\n          var temp = y;\n          y = x;\n          x = temp;\n        }\n        // make y a child of x\n        _linkNodes(y, x);\n        // we have handled this degree, go to next one.\n        array[d] = null;\n        d++;\n      }\n      // save this node for later when we might encounter another of the same degree.\n      array[d] = x;\n      // move forward through list.\n      x = next;\n      numRoots--;\n    }\n    // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].\n    minimum = null;\n    // loop nodes in array\n    for (var i = 0; i < arraySize; i++) {\n      // get current node\n      y = array[i];\n      if (!y) {\n        continue;\n      }\n      // check if we have a linked list\n      if (minimum) {\n        // First remove node from root list.\n        y.left.right = y.right;\n        y.right.left = y.left;\n        // now add to root list, again.\n        y.left = minimum;\n        y.right = minimum.right;\n        minimum.right = y;\n        y.right.left = y;\n        // check if this is a new min.\n        if (smaller(y.key, minimum.key)) {\n          minimum = y;\n        }\n      } else {\n        minimum = y;\n      }\n    }\n    return minimum;\n  }\n  return FibonacciHeap;\n}, {\n  isClass: true\n});","import { factory } from '../../utils/factory.js';\nvar name = 'Matrix';\nvar dependencies = [];\nexport var createMatrixClass = /* #__PURE__ */factory(name, dependencies, () => {\n  /**\n   * @constructor Matrix\n   *\n   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional\n   * array. A matrix can be constructed as:\n   *\n   *     let matrix = math.matrix(data)\n   *\n   * Matrix contains the functions to resize, get and set values, get the size,\n   * clone the matrix and to convert the matrix to a vector, array, or scalar.\n   * Furthermore, one can iterate over the matrix using map and forEach.\n   * The internal Array of the Matrix can be accessed using the function valueOf.\n   *\n   * Example usage:\n   *\n   *     let matrix = math.matrix([[1, 2], [3, 4]])\n   *     matix.size()              // [2, 2]\n   *     matrix.resize([3, 2], 5)\n   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]\n   *     matrix.subset([1,2])       // 3 (indexes are zero-based)\n   *\n   */\n  function Matrix() {\n    if (!(this instanceof Matrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Matrix.prototype.type = 'Matrix';\n  Matrix.prototype.isMatrix = true;\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @return {string}           The storage format.\n   */\n  Matrix.prototype.storage = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke storage on a Matrix interface');\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @return {string}           The datatype.\n   */\n  Matrix.prototype.datatype = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke datatype on a Matrix interface');\n  };\n\n  /**\n   * Create a new Matrix With the type of the current matrix instance\n   * @param {Array | Object} data\n   * @param {string} [datatype]\n   */\n  Matrix.prototype.create = function (data, datatype) {\n    throw new Error('Cannot invoke create on a Matrix interface');\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  Matrix.prototype.subset = function (index, replacement, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke subset on a Matrix interface');\n  };\n\n  /**\n   * Get a single element from the matrix.\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  Matrix.prototype.get = function (index) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke get on a Matrix interface');\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @param {number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {Matrix} self\n   */\n  Matrix.prototype.set = function (index, value, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke set on a Matrix interface');\n  };\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  Matrix.prototype.resize = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke resize on a Matrix interface');\n  };\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * @param {number[]} size           The new size the matrix should have.\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  Matrix.prototype.reshape = function (size, defaultValue) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke reshape on a Matrix interface');\n  };\n\n  /**\n   * Create a clone of the matrix\n   * @return {Matrix} clone\n   */\n  Matrix.prototype.clone = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke clone on a Matrix interface');\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @returns {number[]} size\n   */\n  Matrix.prototype.size = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke size on a Matrix interface');\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {Matrix} matrix\n   */\n  Matrix.prototype.map = function (callback, skipZeros) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke map on a Matrix interface');\n  };\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   */\n  Matrix.prototype.forEach = function (callback) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke forEach on a Matrix interface');\n  };\n\n  /**\n   * Iterate over the matrix elements\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n  Matrix.prototype[Symbol.iterator] = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot iterate a Matrix interface');\n  };\n\n  /**\n   * Create an Array with a copy of the data of the Matrix\n   * @returns {Array} array\n   */\n  Matrix.prototype.toArray = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toArray on a Matrix interface');\n  };\n\n  /**\n   * Get the primitive value of the Matrix: a multidimensional array\n   * @returns {Array} array\n   */\n  Matrix.prototype.valueOf = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke valueOf on a Matrix interface');\n  };\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  Matrix.prototype.format = function (options) {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke format on a Matrix interface');\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @returns {string} str\n   */\n  Matrix.prototype.toString = function () {\n    // must be implemented by each of the Matrix implementations\n    throw new Error('Cannot invoke toString on a Matrix interface');\n  };\n  return Matrix;\n}, {\n  isClass: true\n});","import { factory } from '../../utils/factory.js';\nvar name = 'Spa';\nvar dependencies = ['addScalar', 'equalScalar', 'FibonacciHeap'];\nexport var createSpaClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    addScalar,\n    equalScalar,\n    FibonacciHeap\n  } = _ref;\n  /**\n   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array\n   * of the vector elements and an ordered list of non-zero elements.\n   */\n  function Spa() {\n    if (!(this instanceof Spa)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // allocate vector, TODO use typed arrays\n    this._values = [];\n    this._heap = new FibonacciHeap();\n  }\n\n  /**\n   * Attach type information\n   */\n  Spa.prototype.type = 'Spa';\n  Spa.prototype.isSpa = true;\n\n  /**\n   * Set the value for index i.\n   *\n   * @param {number} i                       The index\n   * @param {number | BigNumber | Complex}   The value at index i\n   */\n  Spa.prototype.set = function (i, v) {\n    // check we have a value @ i\n    if (!this._values[i]) {\n      // insert in heap\n      var node = this._heap.insert(i, v);\n      // set the value @ i\n      this._values[i] = node;\n    } else {\n      // update the value @ i\n      this._values[i].value = v;\n    }\n  };\n  Spa.prototype.get = function (i) {\n    var node = this._values[i];\n    if (node) {\n      return node.value;\n    }\n    return 0;\n  };\n  Spa.prototype.accumulate = function (i, v) {\n    // node @ i\n    var node = this._values[i];\n    if (!node) {\n      // insert in heap\n      node = this._heap.insert(i, v);\n      // initialize value\n      this._values[i] = node;\n    } else {\n      // accumulate value\n      node.value = addScalar(node.value, v);\n    }\n  };\n  Spa.prototype.forEach = function (from, to, callback) {\n    // references\n    var heap = this._heap;\n    var values = this._values;\n    // nodes\n    var nodes = [];\n    // node with minimum key, save it\n    var node = heap.extractMinimum();\n    if (node) {\n      nodes.push(node);\n    }\n    // extract nodes from heap (ordered)\n    while (node && node.key <= to) {\n      // check it is in range\n      if (node.key >= from) {\n        // check value is not zero\n        if (!equalScalar(node.value, 0)) {\n          // invoke callback\n          callback(node.key, node.value, this);\n        }\n      }\n      // extract next node, save it\n      node = heap.extractMinimum();\n      if (node) {\n        nodes.push(node);\n      }\n    }\n    // reinsert all nodes in heap\n    for (var i = 0; i < nodes.length; i++) {\n      // current node\n      var n = nodes[i];\n      // insert node in heap\n      node = heap.insert(n.key, n.value);\n      // update values\n      values[node.key] = node;\n    }\n  };\n  Spa.prototype.swap = function (i, j) {\n    // node @ i and j\n    var nodei = this._values[i];\n    var nodej = this._values[j];\n    // check we need to insert indeces\n    if (!nodei && nodej) {\n      // insert in heap\n      nodei = this._heap.insert(i, nodej.value);\n      // remove from heap\n      this._heap.remove(nodej);\n      // set values\n      this._values[i] = nodei;\n      this._values[j] = undefined;\n    } else if (nodei && !nodej) {\n      // insert in heap\n      nodej = this._heap.insert(j, nodei.value);\n      // remove from heap\n      this._heap.remove(nodei);\n      // set values\n      this._values[j] = nodej;\n      this._values[i] = undefined;\n    } else if (nodei && nodej) {\n      // swap values\n      var v = nodei.value;\n      nodei.value = nodej.value;\n      nodej.value = v;\n    }\n  };\n  return Spa;\n}, {\n  isClass: true\n});","import { isArray, isBigNumber, isCollection, isIndex, isMatrix, isNumber, isString, typeOf } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { format } from '../../utils/string.js';\nimport { clone, deepStrictEqual } from '../../utils/object.js';\nimport { arraySize, getArrayDataType, processSizesWildcard, unsqueeze, validateIndex } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nvar name = 'SparseMatrix';\nvar dependencies = ['typed', 'equalScalar', 'Matrix'];\nexport var createSparseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar,\n    Matrix\n  } = _ref;\n  /**\n   * Sparse Matrix implementation. This type implements\n   * a [Compressed Column Storage](https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_(CSC_or_CCS))\n   * format for two-dimensional sparse matrices.\n   * @class SparseMatrix\n   */\n  function SparseMatrix(data, datatype) {\n    if (!(this instanceof SparseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data)) {\n      // create from matrix\n      _createFromMatrix(this, data, datatype);\n    } else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {\n      // initialize fields\n      this._values = data.values;\n      this._index = data.index;\n      this._ptr = data.ptr;\n      this._size = data.size;\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // create from array\n      _createFromArray(this, data, datatype);\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._values = [];\n      this._index = [];\n      this._ptr = [0];\n      this._size = [0, 0];\n      this._datatype = datatype;\n    }\n  }\n  function _createFromMatrix(matrix, source, datatype) {\n    // check matrix type\n    if (source.type === 'SparseMatrix') {\n      // clone arrays\n      matrix._values = source._values ? clone(source._values) : undefined;\n      matrix._index = clone(source._index);\n      matrix._ptr = clone(source._ptr);\n      matrix._size = clone(source._size);\n      matrix._datatype = datatype || source._datatype;\n    } else {\n      // build from matrix data\n      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);\n    }\n  }\n  function _createFromArray(matrix, data, datatype) {\n    // initialize fields\n    matrix._values = [];\n    matrix._index = [];\n    matrix._ptr = [];\n    matrix._datatype = datatype;\n    // discover rows & columns, do not use math.size() to avoid looping array twice\n    var rows = data.length;\n    var columns = 0;\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, datatype);\n    }\n\n    // check we have rows (empty array)\n    if (rows > 0) {\n      // column index\n      var j = 0;\n      do {\n        // store pointer to values index\n        matrix._ptr.push(matrix._index.length);\n        // loop rows\n        for (var i = 0; i < rows; i++) {\n          // current row\n          var row = data[i];\n          // check row is an array\n          if (isArray(row)) {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < row.length) {\n              columns = row.length;\n            }\n            // check row has column\n            if (j < row.length) {\n              // value\n              var v = row[j];\n              // check value != 0\n              if (!eq(v, zero)) {\n                // store value\n                matrix._values.push(v);\n                // index\n                matrix._index.push(i);\n              }\n            }\n          } else {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < 1) {\n              columns = 1;\n            }\n            // check value != 0 (row is a scalar)\n            if (!eq(row, zero)) {\n              // store value\n              matrix._values.push(row);\n              // index\n              matrix._index.push(i);\n            }\n          }\n        }\n        // increment index\n        j++;\n      } while (j < columns);\n    }\n    // store number of values in ptr\n    matrix._ptr.push(matrix._index.length);\n    // size\n    matrix._size = [rows, columns];\n  }\n  SparseMatrix.prototype = new Matrix();\n\n  /**\n   * Create a new SparseMatrix\n   */\n  SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(SparseMatrix, 'name', {\n    value: 'SparseMatrix'\n  });\n  SparseMatrix.prototype.constructor = SparseMatrix;\n  SparseMatrix.prototype.type = 'SparseMatrix';\n  SparseMatrix.prototype.isSparseMatrix = true;\n\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf SparseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n  SparseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._values, typeOf);\n  };\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The storage format.\n   */\n  SparseMatrix.prototype.storage = function () {\n    return 'sparse';\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The datatype.\n   */\n  SparseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n\n  /**\n   * Create a new SparseMatrix\n   * @memberof SparseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n  SparseMatrix.prototype.create = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n\n  /**\n   * Get the matrix density.\n   *\n   * Usage:\n   *     const density = matrix.density()                   // retrieve matrix density\n   *\n   * @memberof SparseMatrix\n   * @return {number}           The matrix density.\n   */\n  SparseMatrix.prototype.density = function () {\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // calculate density\n    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof SparseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke subset on a Pattern only matrix');\n    }\n\n    // check arguments\n    switch (arguments.length) {\n      case 1:\n        return _getsubset(this, index);\n\n      // intentional fall through\n      case 2:\n      case 3:\n        return _setsubset(this, index, replacement, defaultValue);\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  function _getsubset(matrix, idx) {\n    // check idx\n    if (!isIndex(idx)) {\n      throw new TypeError('Invalid index');\n    }\n    var isScalar = idx.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(idx.min());\n    }\n    // validate dimensions\n    var size = idx.size();\n    if (size.length !== matrix._size.length) {\n      throw new DimensionError(size.length, matrix._size.length);\n    }\n\n    // vars\n    var i, ii, k, kk;\n\n    // validate if any of the ranges in the index is out of range\n    var min = idx.min();\n    var max = idx.max();\n    for (i = 0, ii = matrix._size.length; i < ii; i++) {\n      validateIndex(min[i], matrix._size[i]);\n      validateIndex(max[i], matrix._size[i]);\n    }\n\n    // matrix arrays\n    var mvalues = matrix._values;\n    var mindex = matrix._index;\n    var mptr = matrix._ptr;\n\n    // rows & columns dimensions for result matrix\n    var rows = idx.dimension(0);\n    var columns = idx.dimension(1);\n\n    // workspace & permutation vector\n    var w = [];\n    var pv = [];\n\n    // loop rows in resulting matrix\n    rows.forEach(function (i, r) {\n      // update permutation vector\n      pv[i] = r[0];\n      // mark i in workspace\n      w[i] = true;\n    });\n\n    // result matrix arrays\n    var values = mvalues ? [] : undefined;\n    var index = [];\n    var ptr = [];\n\n    // loop columns in result matrix\n    columns.forEach(function (j) {\n      // update ptr\n      ptr.push(index.length);\n      // loop values in column j\n      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {\n        // row\n        i = mindex[k];\n        // check row is in result matrix\n        if (w[i] === true) {\n          // push index\n          index.push(pv[i]);\n          // check we need to process values\n          if (values) {\n            values.push(mvalues[k]);\n          }\n        }\n      }\n    });\n    // update ptr\n    ptr.push(index.length);\n\n    // return matrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size,\n      datatype: matrix._datatype\n    });\n  }\n  function _setsubset(matrix, index, submatrix, defaultValue) {\n    // check index\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    // get index size and check whether the index contains a single value\n    var iSize = index.size();\n    var isScalar = index.isScalar();\n\n    // calculate the size of the submatrix, and convert it into an Array if needed\n    var sSize;\n    if (isMatrix(submatrix)) {\n      // submatrix size\n      sSize = submatrix.size();\n      // use array representation\n      submatrix = submatrix.toArray();\n    } else {\n      // get submatrix size (array, scalar)\n      sSize = arraySize(submatrix);\n    }\n\n    // check index is a scalar\n    if (isScalar) {\n      // verify submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n      // set value\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // validate dimensions, index size must be one or two dimensions\n      if (iSize.length !== 1 && iSize.length !== 2) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n\n      // check submatrix and index have the same dimensions\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        }\n        // unsqueeze both outer and inner dimensions\n        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);\n      }\n\n      // check whether the size of the submatrix matches the index size\n      if (!deepStrictEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      }\n\n      // insert the sub matrix\n      if (iSize.length === 1) {\n        // if the replacement index only has 1 dimension, go trough each one and set its value\n        var range = index.dimension(0);\n        range.forEach(function (dataIndex, subIndex) {\n          validateIndex(dataIndex);\n          matrix.set([dataIndex, 0], submatrix[subIndex[0]], defaultValue);\n        });\n      } else {\n        // if the replacement index has 2 dimensions, go through each one and set the value in the correct index\n        var firstDimensionRange = index.dimension(0);\n        var secondDimensionRange = index.dimension(1);\n        firstDimensionRange.forEach(function (firstDataIndex, firstSubIndex) {\n          validateIndex(firstDataIndex);\n          secondDimensionRange.forEach(function (secondDataIndex, secondSubIndex) {\n            validateIndex(secondDataIndex);\n            matrix.set([firstDataIndex, secondDataIndex], submatrix[firstSubIndex[0]][secondSubIndex[0]], defaultValue);\n          });\n        });\n      }\n    }\n    return matrix;\n  }\n\n  /**\n   * Get a single element from the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  SparseMatrix.prototype.get = function (index) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    }\n\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke get on a Pattern only matrix');\n    }\n\n    // row and column\n    var i = index[0];\n    var j = index[1];\n\n    // check i, j are valid\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[1]);\n\n    // find value index\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);\n    // check k is prior to next column k and it is in the correct row\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      return this._values[k];\n    }\n    return 0;\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} v\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be set to zero.\n   * @return {SparseMatrix} self\n   */\n  SparseMatrix.prototype.set = function (index, v, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    }\n\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke set on a Pattern only matrix');\n    }\n\n    // row and column\n    var i = index[0];\n    var j = index[1];\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(this._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, this._datatype);\n    }\n\n    // check we need to resize matrix\n    if (i > rows - 1 || j > columns - 1) {\n      // resize matrix\n      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);\n      // update rows & columns\n      rows = this._size[0];\n      columns = this._size[1];\n    }\n\n    // check i, j are valid\n    validateIndex(i, rows);\n    validateIndex(j, columns);\n\n    // find value index\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);\n    // check k is prior to next column k and it is in the correct row\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      // check value != 0\n      if (!eq(v, zero)) {\n        // update value\n        this._values[k] = v;\n      } else {\n        // remove value from matrix\n        _remove(k, j, this._values, this._index, this._ptr);\n      }\n    } else {\n      if (!eq(v, zero)) {\n        // insert value @ (i, j)\n        _insert(k, i, j, v, this._values, this._index, this._ptr);\n      }\n    }\n    return this;\n  };\n  function _getValueIndex(i, top, bottom, index) {\n    // check row is on the bottom side\n    if (bottom - top === 0) {\n      return bottom;\n    }\n    // loop rows [top, bottom[\n    for (var r = top; r < bottom; r++) {\n      // check we found value index\n      if (index[r] === i) {\n        return r;\n      }\n    }\n    // we did not find row\n    return top;\n  }\n  function _remove(k, j, values, index, ptr) {\n    // remove value @ k\n    values.splice(k, 1);\n    index.splice(k, 1);\n    // update pointers\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]--;\n    }\n  }\n  function _insert(k, i, j, v, values, index, ptr) {\n    // insert value\n    values.splice(k, 0, v);\n    // update row for k\n    index.splice(k, 0, i);\n    // update column pointers\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]++;\n    }\n  }\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof SparseMatrix\n   * @param {number[] | Matrix} size  The new size the matrix should have.\n   *                                  Since sparse matrices are always two-dimensional,\n   *                                  size must be two numbers in either an array or a matrix\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isCollection(size)) {\n      throw new TypeError('Array or Matrix expected');\n    }\n\n    // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n    var sizeArray = size.valueOf().map(value => {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n    if (sizeArray.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // check sizes\n    sizeArray.forEach(function (value) {\n      if (!isNumber(value) || !isInteger(value) || value < 0) {\n        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(sizeArray) + ')');\n      }\n    });\n\n    // matrix to resize\n    var m = copy ? this.clone() : this;\n    // resize matrix\n    return _resize(m, sizeArray[0], sizeArray[1], defaultValue);\n  };\n  function _resize(matrix, rows, columns, defaultValue) {\n    // value to insert at the time of growing matrix\n    var value = defaultValue || 0;\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, matrix._datatype);\n      // convert value to the same datatype\n      value = typed.convert(value, matrix._datatype);\n    }\n\n    // should we insert the value?\n    var ins = !eq(value, zero);\n\n    // old columns and rows\n    var r = matrix._size[0];\n    var c = matrix._size[1];\n    var i, j, k;\n\n    // check we need to increase columns\n    if (columns > c) {\n      // loop new columns\n      for (j = c; j < columns; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._values.length;\n        // check we need to insert matrix._values\n        if (ins) {\n          // loop rows\n          for (i = 0; i < r; i++) {\n            // add new matrix._values\n            matrix._values.push(value);\n            // update matrix._index\n            matrix._index.push(i);\n          }\n        }\n      }\n      // store number of matrix._values in matrix._ptr\n      matrix._ptr[columns] = matrix._values.length;\n    } else if (columns < c) {\n      // truncate matrix._ptr\n      matrix._ptr.splice(columns + 1, c - columns);\n      // truncate matrix._values and matrix._index\n      matrix._values.splice(matrix._ptr[columns], matrix._values.length);\n      matrix._index.splice(matrix._ptr[columns], matrix._index.length);\n    }\n    // update columns\n    c = columns;\n\n    // check we need to increase rows\n    if (rows > r) {\n      // check we have to insert values\n      if (ins) {\n        // inserts\n        var n = 0;\n        // loop columns\n        for (j = 0; j < c; j++) {\n          // update matrix._ptr for current column\n          matrix._ptr[j] = matrix._ptr[j] + n;\n          // where to insert matrix._values\n          k = matrix._ptr[j + 1] + n;\n          // pointer\n          var p = 0;\n          // loop new rows, initialize pointer\n          for (i = r; i < rows; i++, p++) {\n            // add value\n            matrix._values.splice(k + p, 0, value);\n            // update matrix._index\n            matrix._index.splice(k + p, 0, i);\n            // increment inserts\n            n++;\n          }\n        }\n        // store number of matrix._values in matrix._ptr\n        matrix._ptr[c] = matrix._values.length;\n      }\n    } else if (rows < r) {\n      // deletes\n      var d = 0;\n      // loop columns\n      for (j = 0; j < c; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._ptr[j] - d;\n        // where matrix._values start for next column\n        var k0 = matrix._ptr[j];\n        var k1 = matrix._ptr[j + 1] - d;\n        // loop matrix._index\n        for (k = k0; k < k1; k++) {\n          // row\n          i = matrix._index[k];\n          // check we need to delete value and matrix._index\n          if (i > rows - 1) {\n            // remove value\n            matrix._values.splice(k, 1);\n            // remove item from matrix._index\n            matrix._index.splice(k, 1);\n            // increase deletes\n            d++;\n          }\n        }\n      }\n      // update matrix._ptr for current column\n      matrix._ptr[j] = matrix._values.length;\n    }\n    // update matrix._size\n    matrix._size[0] = rows;\n    matrix._size[1] = columns;\n    // return matrix\n    return matrix;\n  }\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof SparseMatrix\n   * @param {number[]} sizes          The new size the matrix should have.\n   *                                  Since sparse matrices are always two-dimensional,\n   *                                  size must be two numbers in either an array or a matrix\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  SparseMatrix.prototype.reshape = function (sizes, copy) {\n    // validate arguments\n    if (!isArray(sizes)) {\n      throw new TypeError('Array expected');\n    }\n    if (sizes.length !== 2) {\n      throw new Error('Sparse matrices can only be reshaped in two dimensions');\n    }\n\n    // check sizes\n    sizes.forEach(function (value) {\n      if (!isNumber(value) || !isInteger(value) || value <= -2 || value === 0) {\n        throw new TypeError('Invalid size, must contain positive integers or -1 ' + '(size: ' + format(sizes) + ')');\n      }\n    });\n    var currentLength = this._size[0] * this._size[1];\n    sizes = processSizesWildcard(sizes, currentLength);\n    var newLength = sizes[0] * sizes[1];\n\n    // m * n must not change\n    if (currentLength !== newLength) {\n      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');\n    }\n\n    // matrix to reshape\n    var m = copy ? this.clone() : this;\n\n    // return unchanged if the same shape\n    if (this._size[0] === sizes[0] && this._size[1] === sizes[1]) {\n      return m;\n    }\n\n    // Convert to COO format (generate a column index)\n    var colIndex = [];\n    for (var i = 0; i < m._ptr.length; i++) {\n      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {\n        colIndex.push(i);\n      }\n    }\n\n    // Clone the values array\n    var values = m._values.slice();\n\n    // Clone the row index array\n    var rowIndex = m._index.slice();\n\n    // Transform the (row, column) indices\n    for (var _i = 0; _i < m._index.length; _i++) {\n      var r1 = rowIndex[_i];\n      var c1 = colIndex[_i];\n      var flat = r1 * m._size[1] + c1;\n      colIndex[_i] = flat % sizes[1];\n      rowIndex[_i] = Math.floor(flat / sizes[1]);\n    }\n\n    // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored\n    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,\n    // sorting several arrays based on some other array.\n\n    // OR, we could easily just:\n\n    // 1. Remove all values from the matrix\n    m._values.length = 0;\n    m._index.length = 0;\n    m._ptr.length = sizes[1] + 1;\n    m._size = sizes.slice();\n    for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {\n      m._ptr[_i2] = 0;\n    }\n\n    // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)\n    // This step is probably the most time-consuming\n    for (var h = 0; h < values.length; h++) {\n      var _i3 = rowIndex[h];\n      var _j = colIndex[h];\n      var v = values[h];\n      var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);\n      _insert(k, _i3, _j, v, m._values, m._index, m._ptr);\n    }\n\n    // The value indices are inserted out of order, but apparently that's... still OK?\n\n    return m;\n  };\n\n  /**\n   * Create a clone of the matrix\n   * @memberof SparseMatrix\n   * @return {SparseMatrix} clone\n   */\n  SparseMatrix.prototype.clone = function () {\n    var m = new SparseMatrix({\n      values: this._values ? clone(this._values) : undefined,\n      index: clone(this._index),\n      ptr: clone(this._ptr),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof SparseMatrix\n   * @returns {number[]} size\n   */\n  SparseMatrix.prototype.size = function () {\n    return this._size.slice(0); // copy the Array\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {SparseMatrix} matrix\n   */\n  SparseMatrix.prototype.map = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke map on a Pattern only matrix');\n    }\n    // matrix instance\n    var me = this;\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // invoke callback\n    var args = maxArgumentCount(callback);\n    var invoke = function invoke(v, i, j) {\n      // invoke callback\n      if (args === 1) return callback(v);\n      if (args === 2) return callback(v, [i, j]);\n      return callback(v, [i, j], me);\n    };\n    // invoke _map\n    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on the interval\n   * [minRow..maxRow, minColumn..maxColumn].\n   */\n  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {\n    // result arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, matrix._datatype);\n    }\n\n    // invoke callback\n    var invoke = function invoke(v, x, y) {\n      // invoke callback\n      v = callback(v, x, y);\n      // check value != 0\n      if (!eq(v, zero)) {\n        // store value\n        values.push(v);\n        // index\n        index.push(x);\n      }\n    };\n    // loop columns\n    for (var j = minColumn; j <= maxColumn; j++) {\n      // store pointer to values index\n      ptr.push(values.length);\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = matrix._ptr[j];\n      var k1 = matrix._ptr[j + 1];\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = matrix._index[k];\n          // check i is in range\n          if (i >= minRow && i <= maxRow) {\n            // value @ k\n            invoke(matrix._values[k], i - minRow, j - minColumn);\n          }\n        }\n      } else {\n        // create a cache holding all defined values\n        var _values = {};\n        for (var _k = k0; _k < k1; _k++) {\n          var _i4 = matrix._index[_k];\n          _values[_i4] = matrix._values[_k];\n        }\n\n        // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n        for (var _i5 = minRow; _i5 <= maxRow; _i5++) {\n          var value = _i5 in _values ? _values[_i5] : 0;\n          invoke(value, _i5 - minRow, j - minColumn);\n        }\n      }\n    }\n\n    // store number of values in ptr\n    ptr.push(values.length);\n    // return sparse matrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]\n    });\n  }\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *                              If false, the indices are guaranteed to be in order,\n   *                              if true, the indices can be unordered.\n   */\n  SparseMatrix.prototype.forEach = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke forEach on a Pattern only matrix');\n    }\n    // matrix instance\n    var me = this;\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = this._index[k];\n\n          // value @ k\n          callback(this._values[k], [i, j], me);\n        }\n      } else {\n        // create a cache holding all defined values\n        var values = {};\n        for (var _k2 = k0; _k2 < k1; _k2++) {\n          var _i6 = this._index[_k2];\n          values[_i6] = this._values[_k2];\n        }\n\n        // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n        for (var _i7 = 0; _i7 < rows; _i7++) {\n          var value = _i7 in values ? values[_i7] : 0;\n          callback(value, [_i7, j], me);\n        }\n      }\n    }\n  };\n\n  /**\n   * Iterate over the matrix elements, skipping zeros\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n  SparseMatrix.prototype[Symbol.iterator] = function* () {\n    if (!this._values) {\n      throw new Error('Cannot iterate a Pattern only matrix');\n    }\n    var columns = this._size[1];\n    for (var j = 0; j < columns; j++) {\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k];\n        yield {\n          value: this._values[k],\n          index: [i, j]\n        };\n      }\n    }\n  };\n\n  /**\n   * Create an Array with a copy of the data of the SparseMatrix\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n  SparseMatrix.prototype.toArray = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, true);\n  };\n\n  /**\n   * Get the primitive value of the SparseMatrix: a two dimensions array\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n  SparseMatrix.prototype.valueOf = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, false);\n  };\n  function _toArray(values, index, ptr, size, copy) {\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n    // result\n    var a = [];\n    // vars\n    var i, j;\n    // initialize array\n    for (i = 0; i < rows; i++) {\n      a[i] = [];\n      for (j = 0; j < columns; j++) {\n        a[i][j] = 0;\n      }\n    }\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // loop k within [k0, k1[\n      for (var k = k0; k < k1; k++) {\n        // row index\n        i = index[k];\n        // set value (use one for pattern matrix)\n        a[i][j] = values ? copy ? clone(values[k]) : values[k] : 1;\n      }\n    }\n    return a;\n  }\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof SparseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  SparseMatrix.prototype.format = function (options) {\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // density\n    var density = this.density();\n    // rows & columns\n    var str = 'Sparse Matrix [' + format(rows, options) + ' x ' + format(columns, options) + '] density: ' + format(density, options) + '\\n';\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      // loop k within [k0, k1[\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k];\n        // append value\n        str += '\\n    (' + format(i, options) + ', ' + format(j, options) + ') ==> ' + (this._values ? format(this._values[k], options) : 'X');\n      }\n    }\n    return str;\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {string} str\n   */\n  SparseMatrix.prototype.toString = function () {\n    return format(this.toArray());\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {Object}\n   */\n  SparseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'SparseMatrix',\n      values: this._values,\n      index: this._index,\n      ptr: this._ptr,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof SparseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix vector with the diagonal values.\n   */\n  SparseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // number diagonal values\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // diagonal arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n    // initial ptr value\n    ptr[0] = 0;\n    // loop columns\n    for (var j = kSuper; j < columns && values.length < n; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      // loop x within [k0, k1[\n      for (var x = k0; x < k1; x++) {\n        // row index\n        var i = this._index[x];\n        // check row\n        if (i === j - kSuper + kSub) {\n          // value on this column\n          values.push(this._values[x]);\n          // store row\n          index[values.length - 1] = i - kSub;\n          // exit loop\n          break;\n        }\n      }\n    }\n    // close ptr\n    ptr.push(values.length);\n    // return matrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [n, 1]\n    });\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof SparseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SparseMatrix\", \"values\": [], \"index\": [], \"ptr\": [], \"size\": []}`,\n   *                       where mathjs is optional\n   * @returns {SparseMatrix}\n   */\n  SparseMatrix.fromJSON = function (json) {\n    return new SparseMatrix(json);\n  };\n\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {Array} size                       The matrix size.\n   * @param {number | Array | Matrix } value   The values for the diagonal.\n   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]            The default value for non-diagonal\n   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.\n   *\n   * @returns {SparseMatrix}\n   */\n  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // map size & validate\n    size = size.map(function (s) {\n      // check it is a big number\n      if (isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      }\n      // validate arguments\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n      return s;\n    });\n\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, datatype);\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n\n    // number of non-zero items\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // value extraction function\n    var _value;\n\n    // check value\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (isMatrix(value)) {\n      // matrix size\n      var ms = value.size();\n      // validate matrix\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    }\n\n    // create arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n\n    // loop items\n    for (var j = 0; j < columns; j++) {\n      // number of rows with value\n      ptr.push(values.length);\n      // diagonal index\n      var i = j - kSuper;\n      // check we need to set diagonal value\n      if (i >= 0 && i < n) {\n        // get value @ i\n        var v = _value(i);\n        // check for zero\n        if (!eq(v, zero)) {\n          // column\n          index.push(i + kSub);\n          // add value\n          values.push(v);\n        }\n      }\n    }\n    // last value should be number of values\n    ptr.push(values.length);\n    // create SparseMatrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [rows, columns]\n    });\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  SparseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    }\n    // check dimensions\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    // validate index\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]);\n\n    // swap rows\n    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);\n    // return current instance\n    return this;\n  };\n\n  /**\n   * Loop rows with data in column j.\n   *\n   * @param {number} j            Column\n   * @param {Array} values        Matrix values\n   * @param {Array} index         Matrix row indeces\n   * @param {Array} ptr           Matrix column pointers\n   * @param {Function} callback   Callback function invoked for every row in column j\n   */\n  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {\n    // indeces for column j\n    var k0 = ptr[j];\n    var k1 = ptr[j + 1];\n    // loop\n    for (var k = k0; k < k1; k++) {\n      // invoke callback\n      callback(index[k], values[k]);\n    }\n  };\n\n  /**\n   * Swap rows x and y in Sparse Matrix data structures.\n   *\n   * @param {number} x         Matrix row index 1\n   * @param {number} y         Matrix row index 2\n   * @param {number} columns   Number of columns in matrix\n   * @param {Array} values     Matrix values\n   * @param {Array} index      Matrix row indeces\n   * @param {Array} ptr        Matrix column pointers\n   */\n  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // find value index @ x\n      var kx = _getValueIndex(x, k0, k1, index);\n      // find value index @ x\n      var ky = _getValueIndex(y, k0, k1, index);\n      // check both rows exist in matrix\n      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {\n        // swap values (check for pattern matrix)\n        if (values) {\n          var v = values[kx];\n          values[kx] = values[ky];\n          values[ky] = v;\n        }\n        // next column\n        continue;\n      }\n      // check x row exist & no y row\n      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {\n        // value @ x (check for pattern matrix)\n        var vx = values ? values[kx] : undefined;\n        // insert value @ y\n        index.splice(ky, 0, y);\n        if (values) {\n          values.splice(ky, 0, vx);\n        }\n        // remove value @ x (adjust array index if needed)\n        index.splice(ky <= kx ? kx + 1 : kx, 1);\n        if (values) {\n          values.splice(ky <= kx ? kx + 1 : kx, 1);\n        }\n        // next column\n        continue;\n      }\n      // check y row exist & no x row\n      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {\n        // value @ y (check for pattern matrix)\n        var vy = values ? values[ky] : undefined;\n        // insert value @ x\n        index.splice(kx, 0, x);\n        if (values) {\n          values.splice(kx, 0, vy);\n        }\n        // remove value @ y (adjust array index if needed)\n        index.splice(kx <= ky ? ky + 1 : ky, 1);\n        if (values) {\n          values.splice(kx <= ky ? ky + 1 : ky, 1);\n        }\n      }\n    }\n  };\n  return SparseMatrix;\n}, {\n  isClass: true\n});","import { factory } from '../../../utils/factory.js';\nvar name = 'matrix';\nvar dependencies = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];\nexport var createMatrix = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    Matrix,\n    DenseMatrix,\n    SparseMatrix\n  } = _ref;\n  /**\n   * Create a Matrix. The function creates a new `math.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   * Supported storage formats are 'dense' and 'sparse'.\n   *\n   * Syntax:\n   *\n   *    math.matrix()                         // creates an empty matrix using default storage format (dense).\n   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).\n   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.\n   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\n   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.\n   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n   *\n   * Examples:\n   *\n   *    let m = math.matrix([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, sparse\n   *\n   * @param {Array | Matrix} [data]    A multi dimensional array\n   * @param {string} [format]          The Matrix storage format, either `'dense'` or `'sparse'`\n   * @param {string} [datatype]        Type of the values\n   *\n   * @return {Matrix} The created matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return _create([]);\n    },\n    string: function string(format) {\n      return _create([], format);\n    },\n    'string, string': function stringString(format, datatype) {\n      return _create([], format, datatype);\n    },\n    Array: function Array(data) {\n      return _create(data);\n    },\n    Matrix: function Matrix(data) {\n      return _create(data, data.storage());\n    },\n    'Array | Matrix, string': _create,\n    'Array | Matrix, string, string': _create\n  });\n\n  /**\n   * Create a new Matrix with given storage format\n   * @param {Array} data\n   * @param {string} [format]\n   * @param {string} [datatype]\n   * @returns {Matrix} Returns a new Matrix\n   * @private\n   */\n  function _create(data, format, datatype) {\n    // get storage format constructor\n    if (format === 'dense' || format === 'default' || format === undefined) {\n      return new DenseMatrix(data, datatype);\n    }\n    if (format === 'sparse') {\n      return new SparseMatrix(data, datatype);\n    }\n    throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');\n  }\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo01xDSid';\nvar dependencies = ['typed'];\nexport var createMatAlgo01xDSid = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  Dij          ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  return function algorithm1(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype;\n    // sparse matrix arrays\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // process data types\n    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined;\n    // callback function\n    var cf = dt ? typed.find(callback, [dt, dt]) : callback;\n\n    // vars\n    var i, j;\n\n    // result (DenseMatrix)\n    var cdata = [];\n    // initialize c\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    }\n\n    // workspace\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns in b\n    for (j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1;\n      // values in column j\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // update workspace\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        // mark i as updated\n        w[i] = mark;\n      }\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // check row is in workspace\n        if (w[i] === mark) {\n          // c[i][j] was already calculated\n          cdata[i][j] = x[i];\n        } else {\n          // item does not exist in S\n          cdata[i][j] = adata[i][j];\n        }\n      }\n    }\n\n    // return dense matrix\n    return denseMatrix.createDenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo03xDSf';\nvar dependencies = ['typed'];\nexport var createMatAlgo03xDSf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked M*N times.\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(Dij, 0)    ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  return function matAlgo03xDSf(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype;\n    // sparse matrix arrays\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result (DenseMatrix)\n    var cdata = [];\n\n    // initialize dense matrix\n    for (var z = 0; z < rows; z++) {\n      // initialize row\n      cdata[z] = [];\n    }\n\n    // workspace\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns in b\n    for (var j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1;\n      // values in column j\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k];\n        // update workspace\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        w[i] = mark;\n      }\n      // process workspace\n      for (var y = 0; y < rows; y++) {\n        // check we have a calculated value for current row\n        if (w[y] === mark) {\n          // use calculated value\n          cdata[y][j] = x[y];\n        } else {\n          // calculate value\n          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);\n        }\n      }\n    }\n\n    // return dense matrix\n    return denseMatrix.createDenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo07xSSf';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createMatAlgo07xSSf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j) = f(Aij, Bij)\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo07xSSf(a, b, callback) {\n    // sparse matrix arrays\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // vars\n    var i, j;\n\n    // result arrays\n    var cdata = [];\n    // initialize c\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    }\n\n    // workspaces\n    var xa = [];\n    var xb = [];\n    // marks indicating we have a value in x for a given column\n    var wa = [];\n    var wb = [];\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1;\n      // scatter the values of A(:,j) into workspace\n      _scatter(a, j, wa, xa, mark);\n      // scatter the values of B(:,j) into workspace\n      _scatter(b, j, wb, xb, mark);\n      // loop rows\n      for (i = 0; i < rows; i++) {\n        // matrix values @ i,j\n        var va = wa[i] === mark ? xa[i] : zero;\n        var vb = wb[i] === mark ? xb[i] : zero;\n        // invoke callback\n        cdata[i][j] = cf(va, vb);\n      }\n    }\n\n    // return dense matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n  function _scatter(m, j, w, x, mark) {\n    // a arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    // loop values in column j\n    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\n      // row\n      var i = index[k];\n      // update workspace\n      w[i] = mark;\n      x[i] = values[k];\n    }\n  }\n});","import { factory } from '../../../utils/factory.js';\nvar name = 'matAlgo10xSids';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createMatAlgo10xSids = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  b          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function matAlgo10xSids(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype;\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cdata = [];\n\n    // workspaces\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1;\n      // values in j\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k];\n        // update workspace\n        x[r] = avalues[k];\n        w[r] = mark;\n      }\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        }\n        // check sparse matrix has a value @ i,j\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = b;\n        }\n      }\n    }\n\n    // return dense matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../../utils/factory.js';\nvar name = 'matAlgo11xS0s';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo11xS0s = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function matAlgo11xS0s(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype;\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // initialize ptr\n      cptr[j] = cindex.length;\n      // values in j\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = aindex[k];\n        // invoke callback\n        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);\n        // check value is zero\n        if (!eq(v, zero)) {\n          // push index & value\n          cindex.push(i);\n          cvalues.push(v);\n        }\n      }\n    }\n    // update ptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return s.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../../utils/factory.js';\nvar name = 'matAlgo12xSfs';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createMatAlgo12xSfs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    DenseMatrix\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked MxN times.\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(0, b)    ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function matAlgo12xSfs(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype;\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cdata = [];\n\n    // workspaces\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1;\n      // values in j\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var r = aindex[k];\n        // update workspace\n        x[r] = avalues[k];\n        w[r] = mark;\n      }\n      // loop rows\n      for (var i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        }\n        // check sparse matrix has a value @ i,j\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);\n        }\n      }\n    }\n\n    // return dense matrix\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","import { factory } from '../../../utils/factory.js';\nimport { clone } from '../../../utils/object.js';\nvar name = 'matAlgo14xDs';\nvar dependencies = ['typed'];\nexport var createMatAlgo14xDs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, b)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij..z,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042\n   */\n  return function matAlgo14xDs(a, b, callback, inverse) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // populate cdata, iterate through dimensions\n    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : [];\n\n    // c matrix\n    return a.createDenseMatrix({\n      data: cdata,\n      size: clone(asize),\n      datatype: dt\n    });\n  };\n\n  // recursive function\n  function _iterate(f, level, s, n, av, bv, inverse) {\n    // initialize array for this level\n    var cv = [];\n    // check we reach the last level\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);\n      }\n    }\n    return cv;\n  }\n});","import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo13xDD';\nvar dependencies = ['typed'];\nexport var createMatAlgo13xDD = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, Bij..z)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Matrix}   b                 The DenseMatrix instance (B)\n   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658\n   */\n  return function matAlgo13xDD(a, b, callback) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b arrays\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // c arrays\n    var csize = [];\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // validate each one of the dimension sizes\n    for (var s = 0; s < asize.length; s++) {\n      // must match\n      if (asize[s] !== bsize[s]) {\n        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n      }\n      // update dimension in c\n      csize[s] = asize[s];\n    }\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // populate cdata, iterate through dimensions\n    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];\n\n    // c matrix\n    return a.createDenseMatrix({\n      data: cdata,\n      size: csize,\n      datatype: dt\n    });\n  };\n\n  // recursive function\n  function _iterate(f, level, s, n, av, bv) {\n    // initialize array for this level\n    var cv = [];\n    // check we reach the last level\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = f(av[i], bv[i]);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);\n      }\n    }\n    return cv;\n  }\n});","import { checkBroadcastingRules } from '../../../utils/array.js';\nimport { factory } from '../../../utils/factory.js';\nvar name = 'broadcast';\nvar dependancies = ['concat'];\nexport var createBroadcast = /* #__PURE__ */factory(name, dependancies, _ref => {\n  var {\n    concat\n  } = _ref;\n  /**\n  * Broadcasts two matrices, and return both in an array\n  * It checks if it's possible with broadcasting rules\n  *\n  * @param {Matrix}   A      First Matrix\n  * @param {Matrix}   B      Second Matrix\n  *\n  * @return {Matrix[]}      [ broadcastedA, broadcastedB ]\n  */\n  return function (A, B) {\n    var N = Math.max(A._size.length, B._size.length); // max number of dims\n    if (A._size.length === B._size.length) {\n      if (A._size.every((dim, i) => dim === B._size[i])) {\n        // If matrices have the same size return them\n        return [A, B];\n      }\n    }\n    var sizeA = _padLeft(A._size, N, 0); // pad to the left to align dimensions to the right\n    var sizeB = _padLeft(B._size, N, 0); // pad to the left to align dimensions to the right\n\n    // calculate the max dimensions\n    var sizeMax = [];\n    for (var dim = 0; dim < N; dim++) {\n      sizeMax[dim] = Math.max(sizeA[dim], sizeB[dim]);\n    }\n\n    // check if the broadcasting rules applyes for both matrices\n    checkBroadcastingRules(sizeA, sizeMax);\n    checkBroadcastingRules(sizeB, sizeMax);\n\n    // reshape A or B if needed to make them ready for concat\n    var AA = A.clone();\n    var BB = B.clone();\n    if (AA._size.length < N) {\n      AA.reshape(_padLeft(AA._size, N, 1));\n    } else if (BB._size.length < N) {\n      BB.reshape(_padLeft(BB._size, N, 1));\n    }\n\n    // stretches the matrices on each dimension to make them the same size\n    for (var _dim = 0; _dim < N; _dim++) {\n      if (AA._size[_dim] < sizeMax[_dim]) {\n        AA = _stretch(AA, sizeMax[_dim], _dim);\n      }\n      if (BB._size[_dim] < sizeMax[_dim]) {\n        BB = _stretch(BB, sizeMax[_dim], _dim);\n      }\n    }\n\n    // return the array with the two broadcasted matrices\n    return [AA, BB];\n  };\n  function _padLeft(shape, N, filler) {\n    // pads an array of dimensions with numbers to the left, unitl the number of dimensions is N\n    return [...Array(N - shape.length).fill(filler), ...shape];\n  }\n  function _stretch(arrayToStretch, sizeToStretch, dimToStretch) {\n    // stretches a matrix up to a certain size in a certain dimension\n    return concat(...Array(sizeToStretch).fill(arrayToStretch), dimToStretch);\n  }\n});","import { factory } from '../../../utils/factory.js';\nimport { extend } from '../../../utils/object.js';\nimport { createMatAlgo13xDD } from './matAlgo13xDD.js';\nimport { createMatAlgo14xDs } from './matAlgo14xDs.js';\nimport { createBroadcast } from './broadcast.js';\nvar name = 'matrixAlgorithmSuite';\nvar dependencies = ['typed', 'matrix', 'concat'];\nexport var createMatrixAlgorithmSuite = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    concat\n  } = _ref;\n  var matAlgo13xDD = createMatAlgo13xDD({\n    typed\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var broadcast = createBroadcast({\n    concat\n  });\n\n  /**\n   * Return a signatures object with the usual boilerplate of\n   * matrix algorithms, based on a plain options object with the\n   * following properties:\n   *   elop: function -- the elementwise operation to use, defaults to self\n   *   SS: function -- the algorithm to apply for two sparse matrices\n   *   DS: function -- the algorithm to apply for a dense and a sparse matrix\n   *   SD: function -- algo for a sparse and a dense; defaults to SD flipped\n   *   Ss: function -- the algorithm to apply for a sparse matrix and scalar\n   *   sS: function -- algo for scalar and sparse; defaults to Ss flipped\n   *   scalar: string -- typed-function type for scalars, defaults to 'any'\n   *\n   * If Ss is not specified, no matrix-scalar signatures are generated.\n   *\n   * @param {object} options\n   * @return {Object<string, function>} signatures\n   */\n  return function matrixAlgorithmSuite(options) {\n    var elop = options.elop;\n    var SD = options.SD || options.DS;\n    var matrixSignatures;\n    if (elop) {\n      // First the dense ones\n      matrixSignatures = {\n        'DenseMatrix, DenseMatrix': (x, y) => matAlgo13xDD(...broadcast(x, y), elop),\n        'Array, Array': (x, y) => matAlgo13xDD(...broadcast(matrix(x), matrix(y)), elop).valueOf(),\n        'Array, DenseMatrix': (x, y) => matAlgo13xDD(...broadcast(matrix(x), y), elop),\n        'DenseMatrix, Array': (x, y) => matAlgo13xDD(...broadcast(x, matrix(y)), elop)\n      };\n      // Now incorporate sparse matrices\n      if (options.SS) {\n        matrixSignatures['SparseMatrix, SparseMatrix'] = (x, y) => options.SS(...broadcast(x, y), elop, false);\n      }\n      if (options.DS) {\n        matrixSignatures['DenseMatrix, SparseMatrix'] = (x, y) => options.DS(...broadcast(x, y), elop, false);\n        matrixSignatures['Array, SparseMatrix'] = (x, y) => options.DS(...broadcast(matrix(x), y), elop, false);\n      }\n      if (SD) {\n        matrixSignatures['SparseMatrix, DenseMatrix'] = (x, y) => SD(...broadcast(y, x), elop, true);\n        matrixSignatures['SparseMatrix, Array'] = (x, y) => SD(...broadcast(matrix(y), x), elop, true);\n      }\n    } else {\n      // No elop, use this\n      // First the dense ones\n      matrixSignatures = {\n        'DenseMatrix, DenseMatrix': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(...broadcast(x, y), self);\n        }),\n        'Array, Array': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(...broadcast(matrix(x), matrix(y)), self).valueOf();\n        }),\n        'Array, DenseMatrix': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(...broadcast(matrix(x), y), self);\n        }),\n        'DenseMatrix, Array': typed.referToSelf(self => (x, y) => {\n          return matAlgo13xDD(...broadcast(x, matrix(y)), self);\n        })\n      };\n      // Now incorporate sparse matrices\n      if (options.SS) {\n        matrixSignatures['SparseMatrix, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.SS(...broadcast(x, y), self, false);\n        });\n      }\n      if (options.DS) {\n        matrixSignatures['DenseMatrix, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.DS(...broadcast(x, y), self, false);\n        });\n        matrixSignatures['Array, SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return options.DS(...broadcast(matrix(x), y), self, false);\n        });\n      }\n      if (SD) {\n        matrixSignatures['SparseMatrix, DenseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return SD(...broadcast(y, x), self, true);\n        });\n        matrixSignatures['SparseMatrix, Array'] = typed.referToSelf(self => (x, y) => {\n          return SD(...broadcast(matrix(y), x), self, true);\n        });\n      }\n    }\n\n    // Now add the scalars\n    var scalar = options.scalar || 'any';\n    var Ds = options.Ds || options.Ss;\n    if (Ds) {\n      if (elop) {\n        matrixSignatures['DenseMatrix,' + scalar] = (x, y) => matAlgo14xDs(x, y, elop, false);\n        matrixSignatures[scalar + ', DenseMatrix'] = (x, y) => matAlgo14xDs(y, x, elop, true);\n        matrixSignatures['Array,' + scalar] = (x, y) => matAlgo14xDs(matrix(x), y, elop, false).valueOf();\n        matrixSignatures[scalar + ', Array'] = (x, y) => matAlgo14xDs(matrix(y), x, elop, true).valueOf();\n      } else {\n        matrixSignatures['DenseMatrix,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(x, y, self, false);\n        });\n        matrixSignatures[scalar + ', DenseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(y, x, self, true);\n        });\n        matrixSignatures['Array,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(matrix(x), y, self, false).valueOf();\n        });\n        matrixSignatures[scalar + ', Array'] = typed.referToSelf(self => (x, y) => {\n          return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n        });\n      }\n    }\n    var sS = options.sS !== undefined ? options.sS : options.Ss;\n    if (elop) {\n      if (options.Ss) {\n        matrixSignatures['SparseMatrix,' + scalar] = (x, y) => options.Ss(x, y, elop, false);\n      }\n      if (sS) {\n        matrixSignatures[scalar + ', SparseMatrix'] = (x, y) => sS(y, x, elop, true);\n      }\n    } else {\n      if (options.Ss) {\n        matrixSignatures['SparseMatrix,' + scalar] = typed.referToSelf(self => (x, y) => {\n          return options.Ss(x, y, self, false);\n        });\n      }\n      if (sS) {\n        matrixSignatures[scalar + ', SparseMatrix'] = typed.referToSelf(self => (x, y) => {\n          return sS(y, x, self, true);\n        });\n      }\n    }\n    // Also pull in the scalar signatures if the operator is a typed function\n    if (elop && elop.signatures) {\n      extend(matrixSignatures, elop.signatures);\n    }\n    return matrixSignatures;\n  };\n});","import { factory } from '../utils/factory.js';\nimport { deepMap } from '../utils/collection.js';\nvar name = 'number';\nvar dependencies = ['typed'];\n\n/**\n * Separates the radix, integer part, and fractional part of a non decimal number string\n * @param {string} input string to parse\n * @returns {object} the parts of the string or null if not a valid input\n */\nfunction getNonDecimalNumberParts(input) {\n  var nonDecimalWithRadixMatch = input.match(/(0[box])([0-9a-fA-F]*)\\.([0-9a-fA-F]*)/);\n  if (nonDecimalWithRadixMatch) {\n    var radix = {\n      '0b': 2,\n      '0o': 8,\n      '0x': 16\n    }[nonDecimalWithRadixMatch[1]];\n    var integerPart = nonDecimalWithRadixMatch[2];\n    var fractionalPart = nonDecimalWithRadixMatch[3];\n    return {\n      input,\n      radix,\n      integerPart,\n      fractionalPart\n    };\n  } else {\n    return null;\n  }\n}\n\n/**\n * Makes a number from a radix, and integer part, and a fractional part\n * @param {parts} [x] parts of the number string (from getNonDecimalNumberParts)\n * @returns {number} the number\n */\nfunction makeNumberFromNonDecimalParts(parts) {\n  var n = parseInt(parts.integerPart, parts.radix);\n  var f = 0;\n  for (var i = 0; i < parts.fractionalPart.length; i++) {\n    var digitValue = parseInt(parts.fractionalPart[i], parts.radix);\n    f += digitValue / Math.pow(parts.radix, i + 1);\n  }\n  var result = n + f;\n  if (isNaN(result)) {\n    throw new SyntaxError('String \"' + parts.input + '\" is not a valid number');\n  }\n  return result;\n}\nexport var createNumber = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    number: function number(x) {\n      return x;\n    },\n    string: function string(x) {\n      if (x === 'NaN') return NaN;\n      var nonDecimalNumberParts = getNonDecimalNumberParts(x);\n      if (nonDecimalNumberParts) {\n        return makeNumberFromNonDecimalParts(nonDecimalNumberParts);\n      }\n      var size = 0;\n      var wordSizeSuffixMatch = x.match(/(0[box][0-9a-fA-F]*)i([0-9]*)/);\n      if (wordSizeSuffixMatch) {\n        // x includes a size suffix like 0xffffi32, so we extract\n        // the suffix and remove it from x\n        size = Number(wordSizeSuffixMatch[2]);\n        x = wordSizeSuffixMatch[1];\n      }\n      var num = Number(x);\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is not a valid number');\n      }\n      if (wordSizeSuffixMatch) {\n        // x is a signed bin, oct, or hex literal\n        // num is the value of string x if x is interpreted as unsigned\n        if (num > 2 ** size - 1) {\n          // literal is too large for size suffix\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n        // check if the bit at index size - 1 is set and if so do the twos complement\n        if (num >= 2 ** (size - 1)) {\n          num = num - 2 ** size;\n        }\n      }\n      return num;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toNumber();\n    },\n    Fraction: function Fraction(x) {\n      return x.valueOf();\n    },\n    Unit: typed.referToSelf(self => x => {\n      var clone = x.clone();\n      clone.value = self(x.value);\n      return clone;\n    }),\n    null: function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n\n  // reviver function to parse a JSON object like:\n  //\n  //     {\"mathjs\":\"number\",\"value\":\"2.3\"}\n  //\n  // into a number 2.3\n  number.fromJSON = function (json) {\n    return parseFloat(json.value);\n  };\n  return number;\n});","import _extends from \"@babel/runtime/helpers/extends\";\nimport { isInteger } from './number.js';\nimport { isNumber, isBigNumber, isArray, isString } from './is.js';\nimport { format } from './string.js';\nimport { DimensionError } from '../error/DimensionError.js';\nimport { IndexError } from '../error/IndexError.js';\nimport { deepStrictEqual } from './object.js';\n\n/**\n * Calculate the size of a multi dimensional array.\n * This function checks the size of the first entry, it does not validate\n * whether all dimensions match. (use function `validate` for that)\n * @param {Array} x\n * @Return {Number[]} size\n */\nexport function arraySize(x) {\n  var s = [];\n  while (Array.isArray(x)) {\n    s.push(x.length);\n    x = x[0];\n  }\n  return s;\n}\n\n/**\n * Recursively validate whether each element in a multi dimensional array\n * has a size corresponding to the provided size array.\n * @param {Array} array    Array to be validated\n * @param {number[]} size  Array with the size of each dimension\n * @param {number} dim   Current dimension\n * @throws DimensionError\n * @private\n */\nfunction _validate(array, size, dim) {\n  var i;\n  var len = array.length;\n  if (len !== size[dim]) {\n    throw new DimensionError(len, size[dim]);\n  }\n  if (dim < size.length - 1) {\n    // recursively validate each child array\n    var dimNext = dim + 1;\n    for (i = 0; i < len; i++) {\n      var child = array[i];\n      if (!Array.isArray(child)) {\n        throw new DimensionError(size.length - 1, size.length, '<');\n      }\n      _validate(array[i], size, dimNext);\n    }\n  } else {\n    // last dimension. none of the childs may be an array\n    for (i = 0; i < len; i++) {\n      if (Array.isArray(array[i])) {\n        throw new DimensionError(size.length + 1, size.length, '>');\n      }\n    }\n  }\n}\n\n/**\n * Validate whether each element in a multi dimensional array has\n * a size corresponding to the provided size array.\n * @param {Array} array    Array to be validated\n * @param {number[]} size  Array with the size of each dimension\n * @throws DimensionError\n */\nexport function validate(array, size) {\n  var isScalar = size.length === 0;\n  if (isScalar) {\n    // scalar\n    if (Array.isArray(array)) {\n      throw new DimensionError(array.length, 0);\n    }\n  } else {\n    // array\n    _validate(array, size, 0);\n  }\n}\n\n/**\n * Validate whether the source of the index matches the size of the Array\n * @param {Array | Matrix} array    Array to be validated\n * @param {Index} index  Index with the source information to validate\n * @throws DimensionError\n */\nexport function validateIndexSourceSize(value, index) {\n  var valueSize = value.isMatrix ? value._size : arraySize(value);\n  var sourceSize = index._sourceSize;\n  // checks if the source size is not null and matches the valueSize\n  sourceSize.forEach((sourceDim, i) => {\n    if (sourceDim !== null && sourceDim !== valueSize[i]) {\n      throw new DimensionError(sourceDim, valueSize[i]);\n    }\n  });\n}\n\n/**\n * Test whether index is an integer number with index >= 0 and index < length\n * when length is provided\n * @param {number} index    Zero-based index\n * @param {number} [length] Length of the array\n */\nexport function validateIndex(index, length) {\n  if (index !== undefined) {\n    if (!isNumber(index) || !isInteger(index)) {\n      throw new TypeError('Index must be an integer (value: ' + index + ')');\n    }\n    if (index < 0 || typeof length === 'number' && index >= length) {\n      throw new IndexError(index, length);\n    }\n  }\n}\n\n/**\n * Test if and index has empty values\n * @param {number} index    Zero-based index\n */\nexport function isEmptyIndex(index) {\n  for (var i = 0; i < index._dimensions.length; ++i) {\n    var dimension = index._dimensions[i];\n    if (dimension._data && isArray(dimension._data)) {\n      if (dimension._size[0] === 0) {\n        return true;\n      }\n    } else if (dimension.isRange) {\n      if (dimension.start === dimension.end) {\n        return true;\n      }\n    } else if (isString(dimension)) {\n      if (dimension.length === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * Resize a multi dimensional array. The resized array is returned.\n * @param {Array | number} array         Array to be resized\n * @param {number[]} size Array with the size of each dimension\n * @param {*} [defaultValue=0]  Value to be filled in in new entries,\n *                              zero by default. Specify for example `null`,\n *                              to clearly see entries that are not explicitly\n *                              set.\n * @return {Array} array         The resized array\n */\nexport function resize(array, size, defaultValue) {\n  // check the type of the arguments\n  if (!Array.isArray(size)) {\n    throw new TypeError('Array expected');\n  }\n  if (size.length === 0) {\n    throw new Error('Resizing to scalar is not supported');\n  }\n\n  // check whether size contains positive integers\n  size.forEach(function (value) {\n    if (!isNumber(value) || !isInteger(value) || value < 0) {\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');\n    }\n  });\n\n  // convert number to an array\n  if (isNumber(array) || isBigNumber(array)) {\n    array = [array];\n  }\n\n  // recursively resize the array\n  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;\n  _resize(array, size, 0, _defaultValue);\n  return array;\n}\n\n/**\n * Recursively resize a multi dimensional array\n * @param {Array} array         Array to be resized\n * @param {number[]} size       Array with the size of each dimension\n * @param {number} dim          Current dimension\n * @param {*} [defaultValue]    Value to be filled in in new entries,\n *                              undefined by default.\n * @private\n */\nfunction _resize(array, size, dim, defaultValue) {\n  var i;\n  var elem;\n  var oldLen = array.length;\n  var newLen = size[dim];\n  var minLen = Math.min(oldLen, newLen);\n\n  // apply new length\n  array.length = newLen;\n  if (dim < size.length - 1) {\n    // non-last dimension\n    var dimNext = dim + 1;\n\n    // resize existing child arrays\n    for (i = 0; i < minLen; i++) {\n      // resize child array\n      elem = array[i];\n      if (!Array.isArray(elem)) {\n        elem = [elem]; // add a dimension\n        array[i] = elem;\n      }\n      _resize(elem, size, dimNext, defaultValue);\n    }\n\n    // create new child arrays\n    for (i = minLen; i < newLen; i++) {\n      // get child array\n      elem = [];\n      array[i] = elem;\n\n      // resize new child array\n      _resize(elem, size, dimNext, defaultValue);\n    }\n  } else {\n    // last dimension\n\n    // remove dimensions of existing values\n    for (i = 0; i < minLen; i++) {\n      while (Array.isArray(array[i])) {\n        array[i] = array[i][0];\n      }\n    }\n\n    // fill new elements with the default value\n    for (i = minLen; i < newLen; i++) {\n      array[i] = defaultValue;\n    }\n  }\n}\n\n/**\n * Re-shape a multi dimensional array to fit the specified dimensions\n * @param {Array} array           Array to be reshaped\n * @param {number[]} sizes        List of sizes for each dimension\n * @returns {Array}               Array whose data has been formatted to fit the\n *                                specified dimensions\n *\n * @throws {DimensionError}       If the product of the new dimension sizes does\n *                                not equal that of the old ones\n */\nexport function reshape(array, sizes) {\n  var flatArray = flatten(array);\n  var currentLength = flatArray.length;\n  if (!Array.isArray(array) || !Array.isArray(sizes)) {\n    throw new TypeError('Array expected');\n  }\n  if (sizes.length === 0) {\n    throw new DimensionError(0, currentLength, '!=');\n  }\n  sizes = processSizesWildcard(sizes, currentLength);\n  var newLength = product(sizes);\n  if (currentLength !== newLength) {\n    throw new DimensionError(newLength, currentLength, '!=');\n  }\n  try {\n    return _reshape(flatArray, sizes);\n  } catch (e) {\n    if (e instanceof DimensionError) {\n      throw new DimensionError(newLength, currentLength, '!=');\n    }\n    throw e;\n  }\n}\n\n/**\n * Replaces the wildcard -1 in the sizes array.\n * @param {number[]} sizes  List of sizes for each dimension. At most on wildcard.\n * @param {number} currentLength  Number of elements in the array.\n * @throws {Error}                If more than one wildcard or unable to replace it.\n * @returns {number[]}      The sizes array with wildcard replaced.\n */\nexport function processSizesWildcard(sizes, currentLength) {\n  var newLength = product(sizes);\n  var processedSizes = sizes.slice();\n  var WILDCARD = -1;\n  var wildCardIndex = sizes.indexOf(WILDCARD);\n  var isMoreThanOneWildcard = sizes.indexOf(WILDCARD, wildCardIndex + 1) >= 0;\n  if (isMoreThanOneWildcard) {\n    throw new Error('More than one wildcard in sizes');\n  }\n  var hasWildcard = wildCardIndex >= 0;\n  var canReplaceWildcard = currentLength % newLength === 0;\n  if (hasWildcard) {\n    if (canReplaceWildcard) {\n      processedSizes[wildCardIndex] = -currentLength / newLength;\n    } else {\n      throw new Error('Could not replace wildcard, since ' + currentLength + ' is no multiple of ' + -newLength);\n    }\n  }\n  return processedSizes;\n}\n\n/**\n * Computes the product of all array elements.\n * @param {number[]} array Array of factors\n * @returns {number}            Product of all elements\n */\nfunction product(array) {\n  return array.reduce((prev, curr) => prev * curr, 1);\n}\n\n/**\n * Iteratively re-shape a multi dimensional array to fit the specified dimensions\n * @param {Array} array           Array to be reshaped\n * @param {number[]} sizes  List of sizes for each dimension\n * @returns {Array}               Array whose data has been formatted to fit the\n *                                specified dimensions\n */\n\nfunction _reshape(array, sizes) {\n  // testing if there are enough elements for the requested shape\n  var tmpArray = array;\n  var tmpArray2;\n  // for each dimensions starting by the last one and ignoring the first one\n  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {\n    var size = sizes[sizeIndex];\n    tmpArray2 = [];\n\n    // aggregate the elements of the current tmpArray in elements of the requested size\n    var length = tmpArray.length / size;\n    for (var i = 0; i < length; i++) {\n      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));\n    }\n    // set it as the new tmpArray for the next loop turn or for return\n    tmpArray = tmpArray2;\n  }\n  return tmpArray;\n}\n\n/**\n * Squeeze a multi dimensional array\n * @param {Array} array\n * @param {Array} [size]\n * @returns {Array} returns the array itself\n */\nexport function squeeze(array, size) {\n  var s = size || arraySize(array);\n\n  // squeeze outer dimensions\n  while (Array.isArray(array) && array.length === 1) {\n    array = array[0];\n    s.shift();\n  }\n\n  // find the first dimension to be squeezed\n  var dims = s.length;\n  while (s[dims - 1] === 1) {\n    dims--;\n  }\n\n  // squeeze inner dimensions\n  if (dims < s.length) {\n    array = _squeeze(array, dims, 0);\n    s.length = dims;\n  }\n  return array;\n}\n\n/**\n * Recursively squeeze a multi dimensional array\n * @param {Array} array\n * @param {number} dims Required number of dimensions\n * @param {number} dim  Current dimension\n * @returns {Array | *} Returns the squeezed array\n * @private\n */\nfunction _squeeze(array, dims, dim) {\n  var i, ii;\n  if (dim < dims) {\n    var next = dim + 1;\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _squeeze(array[i], dims, next);\n    }\n  } else {\n    while (Array.isArray(array)) {\n      array = array[0];\n    }\n  }\n  return array;\n}\n\n/**\n * Unsqueeze a multi dimensional array: add dimensions when missing\n *\n * Paramter `size` will be mutated to match the new, unqueezed matrix size.\n *\n * @param {Array} array\n * @param {number} dims       Desired number of dimensions of the array\n * @param {number} [outer]    Number of outer dimensions to be added\n * @param {Array} [size] Current size of array.\n * @returns {Array} returns the array itself\n * @private\n */\nexport function unsqueeze(array, dims, outer, size) {\n  var s = size || arraySize(array);\n\n  // unsqueeze outer dimensions\n  if (outer) {\n    for (var i = 0; i < outer; i++) {\n      array = [array];\n      s.unshift(1);\n    }\n  }\n\n  // unsqueeze inner dimensions\n  array = _unsqueeze(array, dims, 0);\n  while (s.length < dims) {\n    s.push(1);\n  }\n  return array;\n}\n\n/**\n * Recursively unsqueeze a multi dimensional array\n * @param {Array} array\n * @param {number} dims Required number of dimensions\n * @param {number} dim  Current dimension\n * @returns {Array | *} Returns the squeezed array\n * @private\n */\nfunction _unsqueeze(array, dims, dim) {\n  var i, ii;\n  if (Array.isArray(array)) {\n    var next = dim + 1;\n    for (i = 0, ii = array.length; i < ii; i++) {\n      array[i] = _unsqueeze(array[i], dims, next);\n    }\n  } else {\n    for (var d = dim; d < dims; d++) {\n      array = [array];\n    }\n  }\n  return array;\n}\n/**\n * Flatten a multi dimensional array, put all elements in a one dimensional\n * array\n * @param {Array} array   A multi dimensional array\n * @return {Array}        The flattened array (1 dimensional)\n */\nexport function flatten(array) {\n  if (!Array.isArray(array)) {\n    // if not an array, return as is\n    return array;\n  }\n  var flat = [];\n  array.forEach(function callback(value) {\n    if (Array.isArray(value)) {\n      value.forEach(callback); // traverse through sub-arrays recursively\n    } else {\n      flat.push(value);\n    }\n  });\n  return flat;\n}\n\n/**\n * A safe map\n * @param {Array} array\n * @param {function} callback\n */\nexport function map(array, callback) {\n  return Array.prototype.map.call(array, callback);\n}\n\n/**\n * A safe forEach\n * @param {Array} array\n * @param {function} callback\n */\nexport function forEach(array, callback) {\n  Array.prototype.forEach.call(array, callback);\n}\n\n/**\n * A safe filter\n * @param {Array} array\n * @param {function} callback\n */\nexport function filter(array, callback) {\n  if (arraySize(array).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n  return Array.prototype.filter.call(array, callback);\n}\n\n/**\n * Filter values in a callback given a regular expression\n * @param {Array} array\n * @param {RegExp} regexp\n * @return {Array} Returns the filtered array\n * @private\n */\nexport function filterRegExp(array, regexp) {\n  if (arraySize(array).length !== 1) {\n    throw new Error('Only one dimensional matrices supported');\n  }\n  return Array.prototype.filter.call(array, entry => regexp.test(entry));\n}\n\n/**\n * A safe join\n * @param {Array} array\n * @param {string} separator\n */\nexport function join(array, separator) {\n  return Array.prototype.join.call(array, separator);\n}\n\n/**\n * Assign a numeric identifier to every element of a sorted array\n * @param {Array} a  An array\n * @return {Array} An array of objects containing the original value and its identifier\n */\nexport function identify(a) {\n  if (!Array.isArray(a)) {\n    throw new TypeError('Array input expected');\n  }\n  if (a.length === 0) {\n    return a;\n  }\n  var b = [];\n  var count = 0;\n  b[0] = {\n    value: a[0],\n    identifier: 0\n  };\n  for (var i = 1; i < a.length; i++) {\n    if (a[i] === a[i - 1]) {\n      count++;\n    } else {\n      count = 0;\n    }\n    b.push({\n      value: a[i],\n      identifier: count\n    });\n  }\n  return b;\n}\n\n/**\n * Remove the numeric identifier from the elements\n * @param {array} a  An array\n * @return {array} An array of values without identifiers\n */\nexport function generalize(a) {\n  if (!Array.isArray(a)) {\n    throw new TypeError('Array input expected');\n  }\n  if (a.length === 0) {\n    return a;\n  }\n  var b = [];\n  for (var i = 0; i < a.length; i++) {\n    b.push(a[i].value);\n  }\n  return b;\n}\n\n/**\n * Check the datatype of a given object\n * This is a low level implementation that should only be used by\n * parent Matrix classes such as SparseMatrix or DenseMatrix\n * This method does not validate Array Matrix shape\n * @param {Array} array\n * @param {function} typeOf   Callback function to use to determine the type of a value\n * @return {string}\n */\nexport function getArrayDataType(array, typeOf) {\n  var type; // to hold type info\n  var length = 0; // to hold length value to ensure it has consistent sizes\n\n  for (var i = 0; i < array.length; i++) {\n    var item = array[i];\n    var _isArray = Array.isArray(item);\n\n    // Saving the target matrix row size\n    if (i === 0 && _isArray) {\n      length = item.length;\n    }\n\n    // If the current item is an array but the length does not equal the targetVectorSize\n    if (_isArray && item.length !== length) {\n      return undefined;\n    }\n    var itemType = _isArray ? getArrayDataType(item, typeOf) // recurse into a nested array\n    : typeOf(item);\n    if (type === undefined) {\n      type = itemType; // first item\n    } else if (type !== itemType) {\n      return 'mixed';\n    } else {\n      // we're good, everything has the same type so far\n    }\n  }\n  return type;\n}\n\n/**\n * Return the last item from an array\n * @param {array}\n * @returns {*}\n */\nexport function last(array) {\n  return array[array.length - 1];\n}\n\n/**\n * Get all but the last element of array.\n * @param {array}\n * @returns {*}\n */\nexport function initial(array) {\n  return array.slice(0, array.length - 1);\n}\n\n/**\n * Test whether an array or string contains an item\n * @param {Array | string} array\n * @param {*} item\n * @return {boolean}\n */\nexport function contains(array, item) {\n  return array.indexOf(item) !== -1;\n}\n\n/**\n * Recursively concatenate two matrices.\n * The contents of the matrices is not cloned.\n * @param {Array} a             Multi dimensional array\n * @param {Array} b             Multi dimensional array\n * @param {number} concatDim    The dimension on which to concatenate (zero-based)\n * @param {number} dim          The current dim (zero-based)\n * @return {Array} c            The concatenated matrix\n * @private\n */\nfunction concatRecursive(a, b, concatDim, dim) {\n  if (dim < concatDim) {\n    // recurse into next dimension\n    if (a.length !== b.length) {\n      throw new DimensionError(a.length, b.length);\n    }\n    var c = [];\n    for (var i = 0; i < a.length; i++) {\n      c[i] = concatRecursive(a[i], b[i], concatDim, dim + 1);\n    }\n    return c;\n  } else {\n    // concatenate this dimension\n    return a.concat(b);\n  }\n}\n\n/**\n * Concatenates many arrays in the specified direction\n * @param {...Array} arrays All the arrays to concatenate\n * @param {number} concatDim The dimension on which to concatenate (zero-based)\n * @returns\n*/\nexport function concat() {\n  var arrays = Array.prototype.slice.call(arguments, 0, -1);\n  var concatDim = Array.prototype.slice.call(arguments, -1);\n  if (arrays.length === 1) {\n    return arrays[0];\n  }\n  if (arrays.length > 1) {\n    return arrays.slice(1).reduce(function (A, B) {\n      return concatRecursive(A, B, concatDim, 0);\n    }, arrays[0]);\n  } else {\n    throw new Error('Wrong number of arguments in function concat');\n  }\n}\n\n/**\n * Receives two or more sizes and get's the broadcasted size for both.\n * @param  {...number[]} sizes Sizes to broadcast together\n * @returns\n */\nexport function broadcastSizes() {\n  for (var _len = arguments.length, sizes = new Array(_len), _key = 0; _key < _len; _key++) {\n    sizes[_key] = arguments[_key];\n  }\n  var dimensions = sizes.map(s => s.length);\n  var N = Math.max(...dimensions);\n  var sizeMax = new Array(N).fill(null);\n  // check for every size\n  for (var i = 0; i < sizes.length; i++) {\n    var size = sizes[i];\n    var dim = dimensions[i];\n    for (var j = 0; j < dim; j++) {\n      var n = N - dim + j;\n      if (size[j] > sizeMax[n]) {\n        sizeMax[n] = size[j];\n      }\n    }\n  }\n  for (var _i = 0; _i < sizes.length; _i++) {\n    checkBroadcastingRules(sizes[_i], sizeMax);\n  }\n  return sizeMax;\n}\n\n/**\n * Checks if it's possible to broadcast a size to another size\n * @param {number[]} size The size of the array to check\n * @param {number[]} toSize The size of the array to validate if it can be broadcasted to\n */\nexport function checkBroadcastingRules(size, toSize) {\n  var N = toSize.length;\n  var dim = size.length;\n  for (var j = 0; j < dim; j++) {\n    var n = N - dim + j;\n    if (size[j] < toSize[n] && size[j] > 1 || size[j] > toSize[n]) {\n      throw new Error(\"shape missmatch: missmatch is found in arg with shape (\".concat(size, \") not possible to broadcast dimension \").concat(dim, \" with size \").concat(size[j], \" to size \").concat(toSize[n]));\n    }\n  }\n}\n\n/**\n * Broadcasts a single array to a certain size\n * @param {array} array Array to be broadcasted\n * @param {number[]} toSize Size to broadcast the array\n * @returns The broadcasted array\n */\nexport function broadcastTo(array, toSize) {\n  var Asize = arraySize(array);\n  if (deepStrictEqual(Asize, toSize)) {\n    return array;\n  }\n  checkBroadcastingRules(Asize, toSize);\n  var broadcastedSize = broadcastSizes(Asize, toSize);\n  var N = broadcastedSize.length;\n  var paddedSize = [...Array(N - Asize.length).fill(1), ...Asize];\n  var A = clone(array);\n  // reshape A if needed to make it ready for concat\n  if (Asize.length < N) {\n    A = reshape(A, paddedSize);\n    Asize = arraySize(A);\n  }\n\n  // stretches the array on each dimension to make it the same size as index\n  for (var dim = 0; dim < N; dim++) {\n    if (Asize[dim] < broadcastedSize[dim]) {\n      A = stretch(A, broadcastedSize[dim], dim);\n      Asize = arraySize(A);\n    }\n  }\n  return A;\n}\n\n/**\n * Broadcasts arrays and returns the broadcasted arrays in an array\n * @param  {...Array | any} arrays\n * @returns\n */\nexport function broadcastArrays() {\n  for (var _len2 = arguments.length, arrays = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    arrays[_key2] = arguments[_key2];\n  }\n  if (arrays.length === 0) {\n    throw new Error('Insuficient number of argumnets in function broadcastArrays');\n  }\n  if (arrays.length === 1) {\n    return arrays[0];\n  }\n  var sizes = arrays.map(function (array) {\n    return arraySize(array);\n  });\n  var broadcastedSize = broadcastSizes(...sizes);\n  var broadcastedArrays = [];\n  arrays.forEach(function (array) {\n    broadcastedArrays.push(broadcastTo(array, broadcastedSize));\n  });\n  return broadcastedArrays;\n}\n\n/**\n * stretches a matrix up to a certain size in a certain dimension\n * @param {Array} arrayToStretch\n * @param {number[]} sizeToStretch\n * @param {number} dimToStretch\n * @returns\n */\nexport function stretch(arrayToStretch, sizeToStretch, dimToStretch) {\n  return concat(...Array(sizeToStretch).fill(arrayToStretch), dimToStretch);\n}\n\n/**\n * Deep clones a multidimensional array\n * @param {Array} array\n * @returns cloned array\n */\nexport function clone(array) {\n  return _extends([], array);\n}","/**\n * Compares two BigNumbers.\n * @param {BigNumber} x       First value to compare\n * @param {BigNumber} y       Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n */\nexport function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x.eq(y);\n  }\n\n  // use \"==\" operator, handles infinities\n  if (x.eq(y)) {\n    return true;\n  }\n\n  // NaN\n  if (x.isNaN() || y.isNaN()) {\n    return false;\n  }\n\n  // at this point x and y should be finite\n  if (x.isFinite() && y.isFinite()) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = x.minus(y).abs();\n    if (diff.isZero()) {\n      return true;\n    } else {\n      // use relative error\n      var max = x.constructor.max(x.abs(), y.abs());\n      return diff.lte(max.times(epsilon));\n    }\n  }\n\n  // Infinite and Number or negative Infinite and positive Infinite cases\n  return false;\n}","import { contains } from './array.js';\nimport { pickShallow } from './object.js';\n\n/**\n * Create a factory function, which can be used to inject dependencies.\n *\n * The created functions are memoized, a consecutive call of the factory\n * with the exact same inputs will return the same function instance.\n * The memoized cache is exposed on `factory.cache` and can be cleared\n * if needed.\n *\n * Example:\n *\n *     const name = 'log'\n *     const dependencies = ['config', 'typed', 'divideScalar', 'Complex']\n *\n *     export const createLog = factory(name, dependencies, ({ typed, config, divideScalar, Complex }) => {\n *       // ... create the function log here and return it\n *     }\n *\n * @param {string} name           Name of the function to be created\n * @param {string[]} dependencies The names of all required dependencies\n * @param {function} create       Callback function called with an object with all dependencies\n * @param {Object} [meta]         Optional object with meta information that will be attached\n *                                to the created factory function as property `meta`.\n * @returns {function}\n */\nexport function factory(name, dependencies, create, meta) {\n  function assertAndCreate(scope) {\n    // we only pass the requested dependencies to the factory function\n    // to prevent functions to rely on dependencies that are not explicitly\n    // requested.\n    var deps = pickShallow(scope, dependencies.map(stripOptionalNotation));\n    assertDependencies(name, dependencies, scope);\n    return create(deps);\n  }\n  assertAndCreate.isFactory = true;\n  assertAndCreate.fn = name;\n  assertAndCreate.dependencies = dependencies.slice().sort();\n  if (meta) {\n    assertAndCreate.meta = meta;\n  }\n  return assertAndCreate;\n}\n\n/**\n * Sort all factories such that when loading in order, the dependencies are resolved.\n *\n * @param {Array} factories\n * @returns {Array} Returns a new array with the sorted factories.\n */\nexport function sortFactories(factories) {\n  var factoriesByName = {};\n  factories.forEach(factory => {\n    factoriesByName[factory.fn] = factory;\n  });\n  function containsDependency(factory, dependency) {\n    // TODO: detect circular references\n    if (isFactory(factory)) {\n      if (contains(factory.dependencies, dependency.fn || dependency.name)) {\n        return true;\n      }\n      if (factory.dependencies.some(d => containsDependency(factoriesByName[d], dependency))) {\n        return true;\n      }\n    }\n    return false;\n  }\n  var sorted = [];\n  function addFactory(factory) {\n    var index = 0;\n    while (index < sorted.length && !containsDependency(sorted[index], factory)) {\n      index++;\n    }\n    sorted.splice(index, 0, factory);\n  }\n\n  // sort regular factory functions\n  factories.filter(isFactory).forEach(addFactory);\n\n  // sort legacy factory functions AFTER the regular factory functions\n  factories.filter(factory => !isFactory(factory)).forEach(addFactory);\n  return sorted;\n}\n\n// TODO: comment or cleanup if unused in the end\nexport function create(factories) {\n  var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  sortFactories(factories).forEach(factory => factory(scope));\n  return scope;\n}\n\n/**\n * Test whether an object is a factory. This is the case when it has\n * properties name, dependencies, and a function create.\n * @param {*} obj\n * @returns {boolean}\n */\nexport function isFactory(obj) {\n  return typeof obj === 'function' && typeof obj.fn === 'string' && Array.isArray(obj.dependencies);\n}\n\n/**\n * Assert that all dependencies of a list with dependencies are available in the provided scope.\n *\n * Will throw an exception when there are dependencies missing.\n *\n * @param {string} name   Name for the function to be created. Used to generate a useful error message\n * @param {string[]} dependencies\n * @param {Object} scope\n */\nexport function assertDependencies(name, dependencies, scope) {\n  var allDefined = dependencies.filter(dependency => !isOptionalDependency(dependency)) // filter optionals\n  .every(dependency => scope[dependency] !== undefined);\n  if (!allDefined) {\n    var missingDependencies = dependencies.filter(dependency => scope[dependency] === undefined);\n\n    // TODO: create a custom error class for this, a MathjsError or something like that\n    throw new Error(\"Cannot create function \\\"\".concat(name, \"\\\", \") + \"some dependencies are missing: \".concat(missingDependencies.map(d => \"\\\"\".concat(d, \"\\\"\")).join(', '), \".\"));\n  }\n}\nexport function isOptionalDependency(dependency) {\n  return dependency && dependency[0] === '?';\n}\nexport function stripOptionalNotation(dependency) {\n  return dependency && dependency[0] === '?' ? dependency.slice(1) : dependency;\n}","// function utils\n\nimport { lruQueue } from './lruQueue.js';\n\n/**\n * Memoize a given function by caching the computed result.\n * The cache of a memoized function can be cleared by deleting the `cache`\n * property of the function.\n *\n * @param {function} fn                     The function to be memoized.\n *                                          Must be a pure function.\n * @param {Object} [options]\n * @param {function(args: Array): string} [options.hasher]\n *    A custom hash builder. Is JSON.stringify by default.\n * @param {number | undefined} [options.limit]\n *    Maximum number of values that may be cached. Undefined indicates\n *    unlimited (default)\n * @return {function}                       Returns the memoized function\n */\nexport function memoize(fn) {\n  var {\n    hasher,\n    limit\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  limit = limit == null ? Number.POSITIVE_INFINITY : limit;\n  hasher = hasher == null ? JSON.stringify : hasher;\n  return function memoize() {\n    if (typeof memoize.cache !== 'object') {\n      memoize.cache = {\n        values: new Map(),\n        lru: lruQueue(limit || Number.POSITIVE_INFINITY)\n      };\n    }\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n    var hash = hasher(args);\n    if (memoize.cache.values.has(hash)) {\n      memoize.cache.lru.hit(hash);\n      return memoize.cache.values.get(hash);\n    }\n    var newVal = fn.apply(fn, args);\n    memoize.cache.values.set(hash, newVal);\n    memoize.cache.values.delete(memoize.cache.lru.hit(hash));\n    return newVal;\n  };\n}\n\n/**\n * Memoize a given function by caching all results and the arguments,\n * and comparing against the arguments of previous results before\n * executing again.\n * This is less performant than `memoize` which calculates a hash,\n * which is very fast to compare. Use `memoizeCompare` only when it is\n * not possible to create a unique serializable hash from the function\n * arguments.\n * The isEqual function must compare two sets of arguments\n * and return true when equal (can be a deep equality check for example).\n * @param {function} fn\n * @param {function(a: *, b: *) : boolean} isEqual\n * @returns {function}\n */\nexport function memoizeCompare(fn, isEqual) {\n  var memoize = function memoize() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n    for (var c = 0; c < memoize.cache.length; c++) {\n      var cached = memoize.cache[c];\n      if (isEqual(args, cached.args)) {\n        // TODO: move this cache entry to the top so recently used entries move up?\n        return cached.res;\n      }\n    }\n    var res = fn.apply(fn, args);\n    memoize.cache.unshift({\n      args,\n      res\n    });\n    return res;\n  };\n  memoize.cache = [];\n  return memoize;\n}\n\n/**\n * Find the maximum number of arguments expected by a typed function.\n * @param {function} fn   A typed function\n * @return {number} Returns the maximum number of expected arguments.\n *                  Returns -1 when no signatures where found on the function.\n */\nexport function maxArgumentCount(fn) {\n  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {\n    var count = (signature.match(/,/g) || []).length + 1;\n    return Math.max(args, count);\n  }, -1);\n}","// type checks for all known types\n//\n// note that:\n//\n// - check by duck-typing on a property like `isUnit`, instead of checking instanceof.\n//   instanceof cannot be used because that would not allow to pass data from\n//   one instance of math.js to another since each has it's own instance of Unit.\n// - check the `isUnit` property via the constructor, so there will be no\n//   matches for \"fake\" instances like plain objects with a property `isUnit`.\n//   That is important for security reasons.\n// - It must not be possible to override the type checks used internally,\n//   for security reasons, so these functions are not exposed in the expression\n//   parser.\n\nexport function isNumber(x) {\n  return typeof x === 'number';\n}\nexport function isBigNumber(x) {\n  if (!x || typeof x !== 'object' || typeof x.constructor !== 'function') {\n    return false;\n  }\n  if (x.isBigNumber === true && typeof x.constructor.prototype === 'object' && x.constructor.prototype.isBigNumber === true) {\n    return true;\n  }\n  if (typeof x.constructor.isDecimal === 'function' && x.constructor.isDecimal(x) === true) {\n    return true;\n  }\n  return false;\n}\nexport function isComplex(x) {\n  return x && typeof x === 'object' && Object.getPrototypeOf(x).isComplex === true || false;\n}\nexport function isFraction(x) {\n  return x && typeof x === 'object' && Object.getPrototypeOf(x).isFraction === true || false;\n}\nexport function isUnit(x) {\n  return x && x.constructor.prototype.isUnit === true || false;\n}\nexport function isString(x) {\n  return typeof x === 'string';\n}\nexport var isArray = Array.isArray;\nexport function isMatrix(x) {\n  return x && x.constructor.prototype.isMatrix === true || false;\n}\n\n/**\n * Test whether a value is a collection: an Array or Matrix\n * @param {*} x\n * @returns {boolean} isCollection\n */\nexport function isCollection(x) {\n  return Array.isArray(x) || isMatrix(x);\n}\nexport function isDenseMatrix(x) {\n  return x && x.isDenseMatrix && x.constructor.prototype.isMatrix === true || false;\n}\nexport function isSparseMatrix(x) {\n  return x && x.isSparseMatrix && x.constructor.prototype.isMatrix === true || false;\n}\nexport function isRange(x) {\n  return x && x.constructor.prototype.isRange === true || false;\n}\nexport function isIndex(x) {\n  return x && x.constructor.prototype.isIndex === true || false;\n}\nexport function isBoolean(x) {\n  return typeof x === 'boolean';\n}\nexport function isResultSet(x) {\n  return x && x.constructor.prototype.isResultSet === true || false;\n}\nexport function isHelp(x) {\n  return x && x.constructor.prototype.isHelp === true || false;\n}\nexport function isFunction(x) {\n  return typeof x === 'function';\n}\nexport function isDate(x) {\n  return x instanceof Date;\n}\nexport function isRegExp(x) {\n  return x instanceof RegExp;\n}\nexport function isObject(x) {\n  return !!(x && typeof x === 'object' && x.constructor === Object && !isComplex(x) && !isFraction(x));\n}\nexport function isNull(x) {\n  return x === null;\n}\nexport function isUndefined(x) {\n  return x === undefined;\n}\nexport function isAccessorNode(x) {\n  return x && x.isAccessorNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isArrayNode(x) {\n  return x && x.isArrayNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isAssignmentNode(x) {\n  return x && x.isAssignmentNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isBlockNode(x) {\n  return x && x.isBlockNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isConditionalNode(x) {\n  return x && x.isConditionalNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isConstantNode(x) {\n  return x && x.isConstantNode === true && x.constructor.prototype.isNode === true || false;\n}\n\n/* Very specialized: returns true for those nodes which in the numerator of\n   a fraction means that the division in that fraction has precedence over implicit\n   multiplication, e.g. -2/3 x parses as (-2/3) x and 3/4 x parses as (3/4) x but\n   6!/8 x parses as 6! / (8x). It is located here because it is shared between\n   parse.js and OperatorNode.js (for parsing and printing, respectively).\n\n   This should *not* be exported from mathjs, unlike most of the tests here.\n   Its name does not start with 'is' to prevent utils/snapshot.js from thinking\n   it should be exported.\n*/\nexport function rule2Node(node) {\n  return isConstantNode(node) || isOperatorNode(node) && node.args.length === 1 && isConstantNode(node.args[0]) && '-+~'.includes(node.op);\n}\nexport function isFunctionAssignmentNode(x) {\n  return x && x.isFunctionAssignmentNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isFunctionNode(x) {\n  return x && x.isFunctionNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isIndexNode(x) {\n  return x && x.isIndexNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isNode(x) {\n  return x && x.isNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isObjectNode(x) {\n  return x && x.isObjectNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isOperatorNode(x) {\n  return x && x.isOperatorNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isParenthesisNode(x) {\n  return x && x.isParenthesisNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isRangeNode(x) {\n  return x && x.isRangeNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isRelationalNode(x) {\n  return x && x.isRelationalNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isSymbolNode(x) {\n  return x && x.isSymbolNode === true && x.constructor.prototype.isNode === true || false;\n}\nexport function isChain(x) {\n  return x && x.constructor.prototype.isChain === true || false;\n}\nexport function typeOf(x) {\n  var t = typeof x;\n  if (t === 'object') {\n    if (x === null) return 'null';\n    if (isBigNumber(x)) return 'BigNumber'; // Special: weird mashup with Decimal\n    if (x.constructor && x.constructor.name) return x.constructor.name;\n    return 'Object'; // just in case\n  }\n\n  return t; // can be 'string', 'number', 'boolean', 'function', 'bigint', ...\n}","export function noBignumber() {\n  throw new Error('No \"bignumber\" implementation available');\n}\nexport function noFraction() {\n  throw new Error('No \"fraction\" implementation available');\n}\nexport function noMatrix() {\n  throw new Error('No \"matrix\" implementation available');\n}\nexport function noIndex() {\n  throw new Error('No \"index\" implementation available');\n}\nexport function noSubset() {\n  throw new Error('No \"matrix\" implementation available');\n}","import { isNumber } from './is.js';\n\n/**\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\n */\n\n/**\n * Check if a number is integer\n * @param {number | boolean} value\n * @return {boolean} isInteger\n */\nexport function isInteger(value) {\n  if (typeof value === 'boolean') {\n    return true;\n  }\n  return isFinite(value) ? value === Math.round(value) : false;\n}\n\n/**\n * Calculate the sign of a number\n * @param {number} x\n * @returns {number}\n */\nexport var sign = /* #__PURE__ */Math.sign || function (x) {\n  if (x > 0) {\n    return 1;\n  } else if (x < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n\n/**\n * Calculate the base-2 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\nexport var log2 = /* #__PURE__ */Math.log2 || function log2(x) {\n  return Math.log(x) / Math.LN2;\n};\n\n/**\n * Calculate the base-10 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\nexport var log10 = /* #__PURE__ */Math.log10 || function log10(x) {\n  return Math.log(x) / Math.LN10;\n};\n\n/**\n * Calculate the natural logarithm of a number + 1\n * @param {number} x\n * @returns {number}\n */\nexport var log1p = /* #__PURE__ */Math.log1p || function (x) {\n  return Math.log(x + 1);\n};\n\n/**\n * Calculate cubic root for a number\n *\n * Code from es6-shim.js:\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\n *\n * @param {number} x\n * @returns {number} Returns the cubic root of x\n */\nexport var cbrt = /* #__PURE__ */Math.cbrt || function cbrt(x) {\n  if (x === 0) {\n    return x;\n  }\n  var negate = x < 0;\n  var result;\n  if (negate) {\n    x = -x;\n  }\n  if (isFinite(x)) {\n    result = Math.exp(Math.log(x) / 3);\n    // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods\n    result = (x / (result * result) + 2 * result) / 3;\n  } else {\n    result = x;\n  }\n  return negate ? -result : result;\n};\n\n/**\n * Calculates exponentiation minus 1\n * @param {number} x\n * @return {number} res\n */\nexport var expm1 = /* #__PURE__ */Math.expm1 || function expm1(x) {\n  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;\n};\n\n/**\n * Formats a number in a given base\n * @param {number} n\n * @param {number} base\n * @param {number} size\n * @returns {string}\n */\nfunction formatNumberToBase(n, base, size) {\n  var prefixes = {\n    2: '0b',\n    8: '0o',\n    16: '0x'\n  };\n  var prefix = prefixes[base];\n  var suffix = '';\n  if (size) {\n    if (size < 1) {\n      throw new Error('size must be in greater than 0');\n    }\n    if (!isInteger(size)) {\n      throw new Error('size must be an integer');\n    }\n    if (n > 2 ** (size - 1) - 1 || n < -(2 ** (size - 1))) {\n      throw new Error(\"Value must be in range [-2^\".concat(size - 1, \", 2^\").concat(size - 1, \"-1]\"));\n    }\n    if (!isInteger(n)) {\n      throw new Error('Value must be an integer');\n    }\n    if (n < 0) {\n      n = n + 2 ** size;\n    }\n    suffix = \"i\".concat(size);\n  }\n  var sign = '';\n  if (n < 0) {\n    n = -n;\n    sign = '-';\n  }\n  return \"\".concat(sign).concat(prefix).concat(n.toString(base)).concat(suffix);\n}\n\n/**\n * Convert a number to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'engineering'    Always use engineering notation.\n *                                          For example '123.4e+0' and '14.0e+6'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lowerExp` and `upperExp` bounds, and\n *                                          uses exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                         'bin', 'oct, or\n *                         'hex'            Format the number using binary, octal,\n *                                          or hexadecimal notation.\n *                                          For example '0b1101' and '0x10fe'.\n *                     {number} wordSize    The word size in bits to use for formatting\n *                                          in binary, octal, or hexadecimal notation.\n *                                          To be used only with 'bin', 'oct', or 'hex'\n *                                          values for 'notation' option. When this option\n *                                          is defined the value is formatted as a signed\n *                                          twos complement integer of the given word size\n *                                          and the size suffix is appended to the output.\n *                                          For example\n *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.\n *                                          Default value is undefined.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default,\n *                                          not rounding any digits.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12.071, {notation: 'fixed'})                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\n *\n * @param {number} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\nexport function format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  }\n\n  // handle special cases\n  if (value === Infinity) {\n    return 'Infinity';\n  } else if (value === -Infinity) {\n    return '-Infinity';\n  } else if (isNaN(value)) {\n    return 'NaN';\n  }\n\n  // default values for options\n  var notation = 'auto';\n  var precision;\n  var wordSize;\n  if (options) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    }\n\n    // determine precision from options\n    if (isNumber(options)) {\n      precision = options;\n    } else if (isNumber(options.precision)) {\n      precision = options.precision;\n    }\n    if (options.wordSize) {\n      wordSize = options.wordSize;\n      if (typeof wordSize !== 'number') {\n        throw new Error('Option \"wordSize\" must be a number');\n      }\n    }\n  }\n\n  // handle the various notations\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n    case 'exponential':\n      return toExponential(value, precision);\n    case 'engineering':\n      return toEngineering(value, precision);\n    case 'bin':\n      return formatNumberToBase(value, 2, wordSize);\n    case 'oct':\n      return formatNumberToBase(value, 8, wordSize);\n    case 'hex':\n      return formatNumberToBase(value, 16, wordSize);\n    case 'auto':\n      // remove trailing zeros after the decimal point\n      return toPrecision(value, precision, options && options).replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", \"fixed\", \"bin\", \"oct\", or \"hex.');\n  }\n}\n\n/**\n * Split a number into sign, coefficients, and exponent\n * @param {number | string} value\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n */\nexport function splitNumber(value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n  var sign = match[1];\n  var digits = match[2];\n  var exponent = parseFloat(match[4] || '0');\n  var dot = digits.indexOf('.');\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\n  .replace(/^0*/, function (zeros) {\n    // remove leading zeros, add their count to the exponent\n    exponent -= zeros.length;\n    return '';\n  }).replace(/0*$/, '') // remove trailing zeros\n  .split('').map(function (d) {\n    return parseInt(d);\n  });\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n  return {\n    sign,\n    coefficients,\n    exponent\n  };\n}\n\n/**\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\nexport function toEngineering(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n  var split = splitNumber(value);\n  var rounded = roundDigits(split, precision);\n  var e = rounded.exponent;\n  var c = rounded.coefficients;\n\n  // find nearest lower multiple of 3 for exponent\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n  if (isNumber(precision)) {\n    // add zeroes to give correct sig figs\n    while (precision > c.length || e - newExp + 1 > c.length) {\n      c.push(0);\n    }\n  } else {\n    // concatenate coefficients with necessary zeros\n    // add zeros if necessary (for example: 1e+8 -> 100e+6)\n    var missingZeros = Math.abs(e - newExp) - (c.length - 1);\n    for (var i = 0; i < missingZeros; i++) {\n      c.push(0);\n    }\n  }\n\n  // find difference in exponents\n  var expDiff = Math.abs(e - newExp);\n  var decimalIdx = 1;\n\n  // push decimal index over by expDiff times\n  while (expDiff > 0) {\n    decimalIdx++;\n    expDiff--;\n  }\n\n  // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n}\n\n/**\n * Format a number with fixed notation.\n * @param {number | string} value\n * @param {number} [precision=undefined]  Optional number of decimals after the\n *                                        decimal point. null by default.\n */\nexport function toFixed(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n  var splitValue = splitNumber(value);\n  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n\n  // append zeros if needed\n  var pp = p + (precision || 0);\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  }\n\n  // prepend zeros if needed\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  }\n\n  // insert a dot if needed\n  if (p < c.length) {\n    c.splice(p, 0, p === 0 ? '0.' : '.');\n  }\n  return rounded.sign + c.join('');\n}\n\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n */\nexport function toExponential(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  // round if needed, else create a clone\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent;\n\n  // append zeros if needed\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  }\n\n  // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\n}\n\n/**\n * Format a number with a certain precision\n * @param {number | string} value\n * @param {number} [precision=undefined] Optional number of digits.\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\n *                                       By default:\n *                                         lowerExp = -3 (incl)\n *                                         upper = +5 (excl)\n * @return {string}\n */\nexport function toPrecision(value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  // determine lower and upper bound for exponential notation.\n  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {\n    // exponential notation\n    return toExponential(value, precision);\n  } else {\n    var c = rounded.coefficients;\n    var e = rounded.exponent;\n\n    // append trailing zeros\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    }\n\n    // append trailing zeros\n    // TODO: simplify the next statement\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0)));\n\n    // prepend zeros\n    c = zeros(-e).concat(c);\n    var dot = e > 0 ? e : 0;\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n    return rounded.sign + c.join('');\n  }\n}\n\n/**\n * Round the number of digits of a number *\n * @param {SplitValue} split       A value split with .splitNumber(value)\n * @param {number} precision  A positive integer\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n *              with rounded digits\n */\nexport function roundDigits(split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  };\n  var c = rounded.coefficients;\n\n  // prepend zeros if needed\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n      while (c[i] === 10) {\n        c.pop();\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n        i--;\n        c[i]++;\n      }\n    }\n  }\n  return rounded;\n}\n\n/**\n * Create an array filled with zeros.\n * @param {number} length\n * @return {Array}\n */\nfunction zeros(length) {\n  var arr = [];\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n  return arr;\n}\n\n/**\n * Count the number of significant digits of a number.\n *\n * For example:\n *   2.34 returns 3\n *   0.0034 returns 2\n *   120.5e+30 returns 4\n *\n * @param {number} value\n * @return {number} digits   Number of significant digits\n */\nexport function digits(value) {\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\n  .replace(/^0\\.?0*|\\./, '') // remove decimal point and leading zeros\n  .length;\n}\n\n/**\n * Minimum number added to one that makes the result different than one\n */\nexport var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n\n/**\n * Compares two floating point numbers.\n * @param {number} x          First value to compare\n * @param {number} y          Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n*/\nexport function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x === y;\n  }\n  if (x === y) {\n    return true;\n  }\n\n  // NaN\n  if (isNaN(x) || isNaN(y)) {\n    return false;\n  }\n\n  // at this point x and y should be finite\n  if (isFinite(x) && isFinite(y)) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = Math.abs(x - y);\n    if (diff <= DBL_EPSILON) {\n      return true;\n    } else {\n      // use relative error\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n    }\n  }\n\n  // Infinite and Number or negative Infinite and positive Infinite cases\n  return false;\n}\n\n/**\n * Calculate the hyperbolic arccos of a number\n * @param {number} x\n * @return {number}\n */\nexport var acosh = Math.acosh || function (x) {\n  return Math.log(Math.sqrt(x * x - 1) + x);\n};\nexport var asinh = Math.asinh || function (x) {\n  return Math.log(Math.sqrt(x * x + 1) + x);\n};\n\n/**\n * Calculate the hyperbolic arctangent of a number\n * @param {number} x\n * @return {number}\n */\nexport var atanh = Math.atanh || function (x) {\n  return Math.log((1 + x) / (1 - x)) / 2;\n};\n\n/**\n * Calculate the hyperbolic cosine of a number\n * @param {number} x\n * @returns {number}\n */\nexport var cosh = Math.cosh || function (x) {\n  return (Math.exp(x) + Math.exp(-x)) / 2;\n};\n\n/**\n * Calculate the hyperbolic sine of a number\n * @param {number} x\n * @returns {number}\n */\nexport var sinh = Math.sinh || function (x) {\n  return (Math.exp(x) - Math.exp(-x)) / 2;\n};\n\n/**\n * Calculate the hyperbolic tangent of a number\n * @param {number} x\n * @returns {number}\n */\nexport var tanh = Math.tanh || function (x) {\n  var e = Math.exp(2 * x);\n  return (e - 1) / (e + 1);\n};\n\n/**\n * Returns a value with the magnitude of x and the sign of y.\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport function copysign(x, y) {\n  var signx = x > 0 ? true : x < 0 ? false : 1 / x === Infinity;\n  var signy = y > 0 ? true : y < 0 ? false : 1 / y === Infinity;\n  return signx ^ signy ? -x : x;\n}","import { isBigNumber, isObject } from './is.js';\n\n/**\n * Clone an object\n *\n *     clone(x)\n *\n * Can clone any primitive type, array, and object.\n * If x has a function clone, this function will be invoked to clone the object.\n *\n * @param {*} x\n * @return {*} clone\n */\nexport function clone(x) {\n  var type = typeof x;\n\n  // immutable primitive types\n  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {\n    return x;\n  }\n\n  // use clone function of the object when available\n  if (typeof x.clone === 'function') {\n    return x.clone();\n  }\n\n  // array\n  if (Array.isArray(x)) {\n    return x.map(function (value) {\n      return clone(value);\n    });\n  }\n  if (x instanceof Date) return new Date(x.valueOf());\n  if (isBigNumber(x)) return x; // bignumbers are immutable\n\n  // object\n  if (isObject(x)) {\n    return mapObject(x, clone);\n  }\n  throw new TypeError(\"Cannot clone: unknown type of value (value: \".concat(x, \")\"));\n}\n\n/**\n * Apply map to all properties of an object\n * @param {Object} object\n * @param {function} callback\n * @return {Object} Returns a copy of the object with mapped properties\n */\nexport function mapObject(object, callback) {\n  var clone = {};\n  for (var key in object) {\n    if (hasOwnProperty(object, key)) {\n      clone[key] = callback(object[key]);\n    }\n  }\n  return clone;\n}\n\n/**\n * Extend object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n */\nexport function extend(a, b) {\n  for (var prop in b) {\n    if (hasOwnProperty(b, prop)) {\n      a[prop] = b[prop];\n    }\n  }\n  return a;\n}\n\n/**\n * Deep extend an object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @returns {Object}\n */\nexport function deepExtend(a, b) {\n  // TODO: add support for Arrays to deepExtend\n  if (Array.isArray(b)) {\n    throw new TypeError('Arrays are not supported by deepExtend');\n  }\n  for (var prop in b) {\n    // We check against prop not being in Object.prototype or Function.prototype\n    // to prevent polluting for example Object.__proto__.\n    if (hasOwnProperty(b, prop) && !(prop in Object.prototype) && !(prop in Function.prototype)) {\n      if (b[prop] && b[prop].constructor === Object) {\n        if (a[prop] === undefined) {\n          a[prop] = {};\n        }\n        if (a[prop] && a[prop].constructor === Object) {\n          deepExtend(a[prop], b[prop]);\n        } else {\n          a[prop] = b[prop];\n        }\n      } else if (Array.isArray(b[prop])) {\n        throw new TypeError('Arrays are not supported by deepExtend');\n      } else {\n        a[prop] = b[prop];\n      }\n    }\n  }\n  return a;\n}\n\n/**\n * Deep test equality of all fields in two pairs of arrays or objects.\n * Compares values and functions strictly (ie. 2 is not the same as '2').\n * @param {Array | Object} a\n * @param {Array | Object} b\n * @returns {boolean}\n */\nexport function deepStrictEqual(a, b) {\n  var prop, i, len;\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) {\n      return false;\n    }\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (i = 0, len = a.length; i < len; i++) {\n      if (!deepStrictEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  } else if (typeof a === 'function') {\n    return a === b;\n  } else if (a instanceof Object) {\n    if (Array.isArray(b) || !(b instanceof Object)) {\n      return false;\n    }\n    for (prop in a) {\n      // noinspection JSUnfilteredForInLoop\n      if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n    for (prop in b) {\n      // noinspection JSUnfilteredForInLoop\n      if (!(prop in a)) {\n        return false;\n      }\n    }\n    return true;\n  } else {\n    return a === b;\n  }\n}\n\n/**\n * Recursively flatten a nested object.\n * @param {Object} nestedObject\n * @return {Object} Returns the flattened object\n */\nexport function deepFlatten(nestedObject) {\n  var flattenedObject = {};\n  _deepFlatten(nestedObject, flattenedObject);\n  return flattenedObject;\n}\n\n// helper function used by deepFlatten\nfunction _deepFlatten(nestedObject, flattenedObject) {\n  for (var prop in nestedObject) {\n    if (hasOwnProperty(nestedObject, prop)) {\n      var value = nestedObject[prop];\n      if (typeof value === 'object' && value !== null) {\n        _deepFlatten(value, flattenedObject);\n      } else {\n        flattenedObject[prop] = value;\n      }\n    }\n  }\n}\n\n/**\n * Test whether the current JavaScript engine supports Object.defineProperty\n * @returns {boolean} returns true if supported\n */\nexport function canDefineProperty() {\n  // test needed for broken IE8 implementation\n  try {\n    if (Object.defineProperty) {\n      Object.defineProperty({}, 'x', {\n        get: function get() {\n          return null;\n        }\n      });\n      return true;\n    }\n  } catch (e) {}\n  return false;\n}\n\n/**\n * Attach a lazy loading property to a constant.\n * The given function `fn` is called once when the property is first requested.\n *\n * @param {Object} object         Object where to add the property\n * @param {string} prop           Property name\n * @param {Function} valueResolver Function returning the property value. Called\n *                                without arguments.\n */\nexport function lazy(object, prop, valueResolver) {\n  var _uninitialized = true;\n  var _value;\n  Object.defineProperty(object, prop, {\n    get: function get() {\n      if (_uninitialized) {\n        _value = valueResolver();\n        _uninitialized = false;\n      }\n      return _value;\n    },\n    set: function set(value) {\n      _value = value;\n      _uninitialized = false;\n    },\n    configurable: true,\n    enumerable: true\n  });\n}\n\n/**\n * Traverse a path into an object.\n * When a namespace is missing, it will be created\n * @param {Object} object\n * @param {string | string[]} path   A dot separated string like 'name.space'\n * @return {Object} Returns the object at the end of the path\n */\nexport function traverse(object, path) {\n  if (path && typeof path === 'string') {\n    return traverse(object, path.split('.'));\n  }\n  var obj = object;\n  if (path) {\n    for (var i = 0; i < path.length; i++) {\n      var key = path[i];\n      if (!(key in obj)) {\n        obj[key] = {};\n      }\n      obj = obj[key];\n    }\n  }\n  return obj;\n}\n\n/**\n * A safe hasOwnProperty\n * @param {Object} object\n * @param {string} property\n */\nexport function hasOwnProperty(object, property) {\n  return object && Object.hasOwnProperty.call(object, property);\n}\n\n/**\n * Test whether an object is a factory. a factory has fields:\n *\n * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n * - name: string (optional)\n * - path: string    A dot separated path (optional)\n * - math: boolean   If true (false by default), the math namespace is passed\n *                   as fifth argument of the factory function\n *\n * @param {*} object\n * @returns {boolean}\n */\nexport function isLegacyFactory(object) {\n  return object && typeof object.factory === 'function';\n}\n\n/**\n * Get a nested property from an object\n * @param {Object} object\n * @param {string | string[]} path\n * @returns {Object}\n */\nexport function get(object, path) {\n  if (typeof path === 'string') {\n    if (isPath(path)) {\n      return get(object, path.split('.'));\n    } else {\n      return object[path];\n    }\n  }\n  var child = object;\n  for (var i = 0; i < path.length; i++) {\n    var key = path[i];\n    child = child ? child[key] : undefined;\n  }\n  return child;\n}\n\n/**\n * Set a nested property in an object\n * Mutates the object itself\n * If the path doesn't exist, it will be created\n * @param {Object} object\n * @param {string | string[]} path\n * @param {*} value\n * @returns {Object}\n */\nexport function set(object, path, value) {\n  if (typeof path === 'string') {\n    if (isPath(path)) {\n      return set(object, path.split('.'), value);\n    } else {\n      object[path] = value;\n      return object;\n    }\n  }\n  var child = object;\n  for (var i = 0; i < path.length - 1; i++) {\n    var key = path[i];\n    if (child[key] === undefined) {\n      child[key] = {};\n    }\n    child = child[key];\n  }\n  if (path.length > 0) {\n    var lastKey = path[path.length - 1];\n    child[lastKey] = value;\n  }\n  return object;\n}\n\n/**\n * Create an object composed of the picked object properties\n * @param {Object} object\n * @param {string[]} properties\n * @param {function} [transform] Optional value to transform a value when picking it\n * @return {Object}\n */\nexport function pick(object, properties, transform) {\n  var copy = {};\n  for (var i = 0; i < properties.length; i++) {\n    var key = properties[i];\n    var value = get(object, key);\n    if (value !== undefined) {\n      set(copy, key, transform ? transform(value, key) : value);\n    }\n  }\n  return copy;\n}\n\n/**\n * Shallow version of pick, creating an object composed of the picked object properties\n * but not for nested properties\n * @param {Object} object\n * @param {string[]} properties\n * @return {Object}\n */\nexport function pickShallow(object, properties) {\n  var copy = {};\n  for (var i = 0; i < properties.length; i++) {\n    var key = properties[i];\n    var value = object[key];\n    if (value !== undefined) {\n      copy[key] = value;\n    }\n  }\n  return copy;\n}\nexport function values(object) {\n  return Object.keys(object).map(key => object[key]);\n}\n\n// helper function to test whether a string contains a path like 'user.name'\nfunction isPath(str) {\n  return str.indexOf('.') !== -1;\n}","import { isBigNumber, isString, typeOf } from './is.js';\nimport { format as formatNumber } from './number.js';\nimport { format as formatBigNumber } from './bignumber/formatter.js';\n\n/**\n * Check if a text ends with a certain string.\n * @param {string} text\n * @param {string} search\n */\nexport function endsWith(text, search) {\n  var start = text.length - search.length;\n  var end = text.length;\n  return text.substring(start, end) === search;\n}\n\n/**\n * Format a value of any type into a string.\n *\n * Usage:\n *     math.format(value)\n *     math.format(value, precision)\n *     math.format(value, options)\n *\n * When value is a function:\n *\n * - When the function has a property `syntax`, it returns this\n *   syntax description.\n * - In other cases, a string `'function'` is returned.\n *\n * When `value` is an Object:\n *\n * - When the object contains a property `format` being a function, this\n *   function is invoked as `value.format(options)` and the result is returned.\n * - When the object has its own `toString` method, this method is invoked\n *   and the result is returned.\n * - In other cases the function will loop over all object properties and\n *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n *\n * Example usage:\n *     math.format(2/7)                // '0.2857142857142857'\n *     math.format(math.pi, 3)         // '3.14'\n *     math.format(new Complex(2, 3))  // '2 + 3i'\n *     math.format('hello')            // '\"hello\"'\n *\n * @param {*} value             Value to be stringified\n * @param {Object | number | Function} [options]\n *     Formatting options. See src/utils/number.js:format for a\n *     description of the available options controlling number output.\n *     This generic \"format\" also supports the option property `truncate: NN`\n *     giving the maximum number NN of characters to return (if there would\n *     have been more, they are deleted and replaced by an ellipsis).\n * @return {string} str\n */\nexport function format(value, options) {\n  var result = _format(value, options);\n  if (options && typeof options === 'object' && 'truncate' in options && result.length > options.truncate) {\n    return result.substring(0, options.truncate - 3) + '...';\n  }\n  return result;\n}\nfunction _format(value, options) {\n  if (typeof value === 'number') {\n    return formatNumber(value, options);\n  }\n  if (isBigNumber(value)) {\n    return formatBigNumber(value, options);\n  }\n\n  // note: we use unsafe duck-typing here to check for Fractions, this is\n  // ok here since we're only invoking toString or concatenating its values\n  if (looksLikeFraction(value)) {\n    if (!options || options.fraction !== 'decimal') {\n      // output as ratio, like '1/3'\n      return value.s * value.n + '/' + value.d;\n    } else {\n      // output as decimal, like '0.(3)'\n      return value.toString();\n    }\n  }\n  if (Array.isArray(value)) {\n    return formatArray(value, options);\n  }\n  if (isString(value)) {\n    return stringify(value);\n  }\n  if (typeof value === 'function') {\n    return value.syntax ? String(value.syntax) : 'function';\n  }\n  if (value && typeof value === 'object') {\n    if (typeof value.format === 'function') {\n      return value.format(options);\n    } else if (value && value.toString(options) !== {}.toString()) {\n      // this object has a non-native toString method, use that one\n      return value.toString(options);\n    } else {\n      var entries = Object.keys(value).map(key => {\n        return stringify(key) + ': ' + format(value[key], options);\n      });\n      return '{' + entries.join(', ') + '}';\n    }\n  }\n  return String(value);\n}\n\n/**\n * Stringify a value into a string enclosed in double quotes.\n * Unescaped double quotes and backslashes inside the value are escaped.\n * @param {*} value\n * @return {string}\n */\nexport function stringify(value) {\n  var text = String(value);\n  var escaped = '';\n  var i = 0;\n  while (i < text.length) {\n    var c = text.charAt(i);\n    escaped += c in controlCharacters ? controlCharacters[c] : c;\n    i++;\n  }\n  return '\"' + escaped + '\"';\n}\nvar controlCharacters = {\n  '\"': '\\\\\"',\n  '\\\\': '\\\\\\\\',\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t'\n};\n\n/**\n * Escape special HTML characters\n * @param {*} value\n * @return {string}\n */\nexport function escape(value) {\n  var text = String(value);\n  text = text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return text;\n}\n\n/**\n * Recursively format an n-dimensional matrix\n * Example output: \"[[1, 2], [3, 4]]\"\n * @param {Array} array\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @returns {string} str\n */\nfunction formatArray(array, options) {\n  if (Array.isArray(array)) {\n    var str = '[';\n    var len = array.length;\n    for (var i = 0; i < len; i++) {\n      if (i !== 0) {\n        str += ', ';\n      }\n      str += formatArray(array[i], options);\n    }\n    str += ']';\n    return str;\n  } else {\n    return format(array, options);\n  }\n}\n\n/**\n * Check whether a value looks like a Fraction (unsafe duck-type check)\n * @param {*} value\n * @return {boolean}\n */\nfunction looksLikeFraction(value) {\n  return value && typeof value === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;\n}\n\n/**\n * Compare two strings\n * @param {string} x\n * @param {string} y\n * @returns {number}\n */\nexport function compareText(x, y) {\n  // we don't want to convert numbers to string, only accept string input\n  if (!isString(x)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(x) + ', index: 0)');\n  }\n  if (!isString(y)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(y) + ', index: 1)');\n  }\n  return x === y ? 0 : x > y ? 1 : -1;\n}","import { isInteger } from '../number.js';\n\n/**\n * Formats a BigNumber in a given base\n * @param {BigNumber} n\n * @param {number} base\n * @param {number} size\n * @returns {string}\n */\nfunction formatBigNumberToBase(n, base, size) {\n  var BigNumberCtor = n.constructor;\n  var big2 = new BigNumberCtor(2);\n  var suffix = '';\n  if (size) {\n    if (size < 1) {\n      throw new Error('size must be in greater than 0');\n    }\n    if (!isInteger(size)) {\n      throw new Error('size must be an integer');\n    }\n    if (n.greaterThan(big2.pow(size - 1).sub(1)) || n.lessThan(big2.pow(size - 1).mul(-1))) {\n      throw new Error(\"Value must be in range [-2^\".concat(size - 1, \", 2^\").concat(size - 1, \"-1]\"));\n    }\n    if (!n.isInteger()) {\n      throw new Error('Value must be an integer');\n    }\n    if (n.lessThan(0)) {\n      n = n.add(big2.pow(size));\n    }\n    suffix = \"i\".concat(size);\n  }\n  switch (base) {\n    case 2:\n      return \"\".concat(n.toBinary()).concat(suffix);\n    case 8:\n      return \"\".concat(n.toOctal()).concat(suffix);\n    case 16:\n      return \"\".concat(n.toHexadecimal()).concat(suffix);\n    default:\n      throw new Error(\"Base \".concat(base, \" not supported \"));\n  }\n}\n\n/**\n * Convert a BigNumber to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lower` and `upper` bounds, and uses\n *                                          exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                         'bin', 'oct, or\n *                         'hex'            Format the number using binary, octal,\n *                                          or hexadecimal notation.\n *                                          For example '0b1101' and '0x10fe'.\n *                     {number} wordSize    The word size in bits to use for formatting\n *                                          in binary, octal, or hexadecimal notation.\n *                                          To be used only with 'bin', 'oct', or 'hex'\n *                                          values for 'notation' option. When this option\n *                                          is defined the value is formatted as a signed\n *                                          twos complement integer of the given word size\n *                                          and the size suffix is appended to the output.\n *                                          For example\n *                                          format(-1, {notation: 'hex', wordSize: 8}) === '0xffi8'.\n *                                          Default value is undefined.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'\n *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'\n *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'\n *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'\n *\n * @param {BigNumber} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\nexport function format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  }\n\n  // handle special cases\n  if (!value.isFinite()) {\n    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';\n  }\n\n  // default values for options\n  var notation = 'auto';\n  var precision;\n  var wordSize;\n  if (options !== undefined) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    }\n\n    // determine precision from options\n    if (typeof options === 'number') {\n      precision = options;\n    } else if (options.precision !== undefined) {\n      precision = options.precision;\n    }\n    if (options.wordSize) {\n      wordSize = options.wordSize;\n      if (typeof wordSize !== 'number') {\n        throw new Error('Option \"wordSize\" must be a number');\n      }\n    }\n  }\n\n  // handle the various notations\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n    case 'exponential':\n      return toExponential(value, precision);\n    case 'engineering':\n      return toEngineering(value, precision);\n    case 'bin':\n      return formatBigNumberToBase(value, 2, wordSize);\n    case 'oct':\n      return formatBigNumberToBase(value, 8, wordSize);\n    case 'hex':\n      return formatBigNumberToBase(value, 16, wordSize);\n    case 'auto':\n      {\n        // determine lower and upper bound for exponential notation.\n        // TODO: implement support for upper and lower to be BigNumbers themselves\n        var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n        var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\n\n        // handle special case zero\n        if (value.isZero()) return '0';\n\n        // determine whether or not to output exponential notation\n        var str;\n        var rounded = value.toSignificantDigits(precision);\n        var exp = rounded.e;\n        if (exp >= lowerExp && exp < upperExp) {\n          // normal number notation\n          str = rounded.toFixed();\n        } else {\n          // exponential notation\n          str = toExponential(value, precision);\n        }\n\n        // remove trailing zeros after the decimal point\n        return str.replace(/((\\.\\d*?)(0+))($|e)/, function () {\n          var digits = arguments[2];\n          var e = arguments[4];\n          return digits !== '.' ? digits + e : e;\n        });\n      }\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", \"fixed\", \"bin\", \"oct\", or \"hex.');\n  }\n}\n\n/**\n * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {BigNumber} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\nexport function toEngineering(value, precision) {\n  // find nearest lower multiple of 3 for exponent\n  var e = value.e;\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n\n  // find difference in exponents, and calculate the value without exponent\n  var valueWithoutExp = value.mul(Math.pow(10, -newExp));\n  var valueStr = valueWithoutExp.toPrecision(precision);\n  if (valueStr.indexOf('e') !== -1) {\n    var BigNumber = value.constructor;\n    valueStr = new BigNumber(valueStr).toFixed();\n  }\n  return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n}\n\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {BigNumber} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n * @returns {string} str\n */\nexport function toExponential(value, precision) {\n  if (precision !== undefined) {\n    return value.toExponential(precision - 1); // Note the offset of one\n  } else {\n    return value.toExponential();\n  }\n}\n\n/**\n * Format a number with fixed notation.\n * @param {BigNumber} value\n * @param {number} [precision=undefined] Optional number of decimals after the\n *                                       decimal point. Undefined by default.\n */\nexport function toFixed(value, precision) {\n  return value.toFixed(precision);\n}"],"names":["root","cosh","Math","x","sinh","cosm1","b","xx","hypot","y","a","parser_exit","SyntaxError","logHypot","_a","_b","parse","z","undefined","_type_of","Number","Complex","tokens","plus","minus","i","c","isNaN","parseFloat","_instanceof","abs","t","d","arg","loh","re","im","r","tmp","t1","t2","Infinity","res","oneMinus","onePlus","temp","noIM","places","ret","isFinite","NaN","define","exports","Object","module","P","assign","n","s","parseInt","InvalidParameter","newFraction","DivisionByZero","f","Fraction","gcd","factorize","num","factors","p1","p2","M","v","w","A","B","C","D","NonIntegerParameter","Error","N","k","eps","thisABS","cont","excludeWhole","whole","str","dec","cycLen","cycleLen","rem","cycOff","cycleStart","len","rem1","rem2","modpow","e","m","Array","Date","RegExp","TypeError","arguments","Map","Set","p","l","o","_extends","target","source","key","isSafeProperty","object","prop","hasOwnProperty","safeNativeProperties","Function","isPlainObject","safeNativeMethods","ObjectWrappingMap","keys","get","method","set","value","setSafeProperty","has","isMap","_createTyped2","typedFunction","createTyped","factory","_ref","BigNumber","DenseMatrix","typed","isNumber","isComplex","isBigNumber","isFraction","isUnit","isString","isChain","isArray","isMatrix","isDenseMatrix","isSparseMatrix","isRange","isIndex","isBoolean","isResultSet","isHelp","isFunction","isDate","isRegExp","isNull","isUndefined","isAccessorNode","isArrayNode","isAssignmentNode","isBlockNode","isConditionalNode","isConstantNode","isFunctionNode","isFunctionAssignmentNode","isIndexNode","isNode","isObjectNode","isOperatorNode","isParenthesisNode","isRangeNode","isRelationalNode","isSymbolNode","isObject","throwNoBignumber","digits","throwNoComplex","throwNoFraction","err","String","array","throwNoMatrix","matrix","name","args","signatures","usualError","isCollection","sig","DEFAULT_CONFIG","config","options","MATRIX_OPTIONS","NUMBER_OPTIONS","DimensionError","actual","expected","relation","RangeError","IndexError","index","min","max","createLup","_denseLUP","j","rows","columns","data","clone","ldata","lsize","udata","usize","addScalar","multiplyScalar","subtractScalar","pi","pabsv","vjj","absv","larger","equalScalar","divideScalar","u","pv","_sparseLUP","values","ptr","lvalues","lindex","lptr","uvalues","uindex","uptr","pvCo","pvOc","swapIndeces","kx","ky","_loop","spa","Spa","k0","k1","vkj","SparseMatrix","vik","unaryMinus","csTdfs","head","next","post","stack","top","createCsAmd","_createTargetMatrix","order","dense","at","transpose","add","tindex","tptr","multiply","_initializeQuotientGraph","cptr","W","last","hhead","nv","elen","degree","mark","_wclear","_initializeDegreeLists","nel","h","lemax","_diag","k2","pj","ln","nvi","pk","eln","pn","asize","cm","csFkeep","callback","other","avalues","aindex","aptr","nz","cindex","cnz","mindeg","elenk","nvk","dk","pk1","pk2","wnvi","dext","p3","p4","nvj","jlast","ok","createCsCounts","parent","ata","J","p0","prevleaf","first","colcount","ancestor","csLeaf","maxfirst","sparent","q","jleaf","jprev","createCsSqr","_vcount","pinv","leftmost","tail","nque","pa","csAmd","csCounts","qr","csPermute","adt","t0","csEtree","inext","prev","csPost","csMark","csUnflip","createCsSpsolve","subtract","g","xi","lo","gvalues","gindex","gptr","gsize","bvalues","bindex","bptr","csReach","csDfs","size","jnew","done","px","createCsLu","largerEq","csSpsolve","tol","lnz","unz","L","U","col","ipiv","xabs","pivot","createSlu","csSqr","csLu","threshold","isInteger","createLsolve","_denseForwardSubstitution","bdata","solveValidation","mdata","bj","xj","_sparseForwardSubstitution","jValues","jIndices","firstIndex","lastIndex","_k","_i","createSolveValidation","csIpvec","createLusolve","_toMatrix","_lusolve","usolve","lsolve","lup","slu","createUsolve","_denseBackwardSubstitution","_sparseBackwardSubstitution","_lastIndex","copy","mSize","format","bSize","_i2","bsize","arraySize","_i4","_i5","createAbs","absNumber","self","deepMap","createMatAlgo04xSidSid","dt","bdt","eq","zero","cf","cvalues","xa","xb","wa","wb","createAdd","concat","matAlgo01xDSid","createMatAlgo01xDSid","matAlgo04xSidSid","matAlgo10xSids","createMatAlgo10xSids","matrixAlgorithmSuite","createMatrixAlgorithmSuite","rest","result","createAddScalar","addNumber","createDivideScalar","numeric","createMatAlgo02xDS0","denseMatrix","sparseMatrix","inverse","adata","cij","createMatAlgo09xS0Sf","vb","vc","createDotMultiply","matAlgo02xDS0","matAlgo09xS0Sf","matAlgo11xS0s","createMatAlgo11xS0s","createMultiply","_validateMatrixDimensions","size1","size2","_multiplyVectorVector","dot","_multiplyVectorMatrix","_multiplyVectorDenseMatrix","alength","bcolumns","af","mf","sum","matAlgo14xDs","createMatAlgo14xDs","_multiplyMatrixVector","arows","acolumns","row","brows","ib","vbi","ka0","ka1","ka","ia","ic","_multiplyMatrixMatrix","jb","kb0","kb1","kb","vbij","selfMM","xsize","ysize","createMultiplyScalar","multiplyNumber","createMatAlgo05xSfSf","wai","wbi","createSubtract","matAlgo03xDSf","createMatAlgo03xDSf","matAlgo05xSfSf","matAlgo12xSfs","createMatAlgo12xSfs","createSubtractScalar","subtractNumber","createUnaryMinus","unaryMinusNumber","createConj","createConcat","prevDim","dim","asMatrix","matrices","_concat","createDot","_validateDim","xLen","yLen","xSize","_size","ySize","conj","aIsColumn","bIsColumn","mul","_c","_c2","_c3","_i3","xindex","xvalues","yindex","yvalues","I","createSize","noMatrix","createTranspose","transposeMatrix","_denseTranspose","_sparseTranspose","transposedRow","transposed","createCompareUnits","createEqualScalar","compareUnits","nearlyEqual","bigNearlyEqual","epsilon","_ref2","createLarger","matAlgo07xSSf","createMatAlgo07xSSf","createLargerNumber","createLargerEq","createLargerEqNumber","createSmaller","createSmallerNumber","createIsInteger","isIntegerNumber","createNumeric","_number","bignumber","fraction","validInputTypes","validOutputTypes","noBignumber","noFraction","outputType","check","inputType","typeOf","n1","n2","inexact","quadrant","NUMERALS","LN10","PI","DEFAULTS","external","decimalError","invalidArgument","precisionLimitExceeded","cryptoUnavailable","tag","mathfloor","mathpow","isBinary","isHex","isOctal","isDecimal","LN10_PRECISION","PI_PRECISION","digitsToString","ws","indexOfLastWord","LOG_BASE","getZeroString","checkInt32","checkRoundingDigits","rm","repeating","di","rd","convertBase","baseIn","baseOut","arrL","arr","strL","finalise","Ctor","xdL","ydL","xd","yd","xs","ys","pr","cosine","tinyPow","taylorSeries","cos2x","toLessThanHalfPi","rep","sd","t3","t3plusx","divide","one","cosh2_x","d8","sinh2_x","d5","d16","d20","halfPi","getPi","wpr","xsd","x2","base","isBase10","denominator","inf","naturalLogarithm","getLn10","xe","xLTy","BASE","getBase10Exponent","naturalExponential","carry","getPrecision","sine","sin2_x","rL","toStringBinary","dp","finiteToString","maxD","d0","d1","d2","n0","yn","intPow","multiplyInteger","compare","aL","bL","cmp","logBase","more","prod","prodL","qd","remL","rem0","xL","yd0","yL","yz","sign","isTruncated","roundUp","xdi","out","isExp","nonFiniteToString","zs","truncate","isOdd","maxOrMin","ltgt","guard","pow","c0","numerator","x1","parseDecimal","isHyperbolic","isNeg","acos","acosh","asin","asinh","atan","atanh","atan2","cbrt","ceil","clamp","obj","useDefaults","ps","crypto","cos","div","exp","floor","isDecimalInstance","Decimal","log","log2","log10","mod","random","Uint32Array","round","sin","sqrt","sub","tan","tanh","trunc","Symbol","parseOther","divisor","isFloat","createBigNumberClass","on","json","curr","createBignumber","wordSizeSuffixMatch","twoPowSize","twoPowSizeSubOne","createComplexClass","strRe","strIm","precision","phi","createFractionClass","createFraction","createDenseMatrixClass","_get","ii","validateIndex","_getSubmatrix","dims","range","_set","submatrix","defaultValue","sSize","iSize","isScalar","deepStrictEqual","broadcastTo","_unused","outer","unsqueeze","_fit","_setSubmatrix","dataIndex","subIndex","_resize","resize","newSize","changed","datatype","validate","preprocess","Matrix","getArrayDataType","replacement","indexI","sizeArray","reshape","currentLength","length","processSizesWildcard","me","maxArgumentCount","recurse","child","_iteratorError","_this","kSuper","kSub","_value","ms","vi","createFibonacciHeapClass","_decreaseKey","minimum","node","smaller","_cut","_cascadingCut","_findMinimumNode","oneOverLogPhi","numRoots","_linkNodes","FibonacciHeap","numberOfChildren","tempRight","createMatrixClass","skipZeros","createSpaClass","from","to","heap","nodes","nodei","nodej","createSparseMatrixClass","_createFromMatrix","_createFromArray","_getsubset","idx","kk","mvalues","mindex","mptr","_setsubset","firstDimensionRange","secondDimensionRange","firstDataIndex","firstSubIndex","secondDataIndex","secondSubIndex","_getValueIndex","bottom","_remove","_insert","ins","_map","minRow","maxRow","minColumn","maxColumn","invoke","_values","_toArray","sizes","newLength","colIndex","rowIndex","r1","c1","flat","_j","_k2","_i7","density","vx","vy","createMatrix","_create","JSON","cdata","_scatter","va","_iterate","level","av","bv","cv","createMatAlgo13xDD","csize","createBroadcast","_padLeft","shape","filler","_stretch","arrayToStretch","sizeToStretch","dimToStretch","sizeA","sizeB","sizeMax","checkBroadcastingRules","AA","BB","_dim","matAlgo13xDD","broadcast","matrixSignatures","elop","SD","_options","_options1","_options2","scalar","sS","extend","createNumber","number","input","nonDecimalWithRadixMatch","nonDecimalNumberParts","radix","integerPart","fractionalPart","makeNumberFromNonDecimalParts","parts","digitValue","unit","valuelessUnit","type","item","_isArray","itemType","_validate","dimNext","elem","oldLen","newLen","minLen","flatArray","flatten","product","_reshape","tmpArray2","tmpArray","sizeIndex","processedSizes","wildCardIndex","_unsqueeze","arrays","concatDim","concatRecursive","toSize","Asize","broadcastedSize","broadcastSizes","_Math","_len","_key","dimensions","paddedSize","diff","dependencies","create","meta","assertAndCreate","scope","deps","pickShallow","stripOptionalNotation","assertDependencies","dependency","missingDependencies","fn","signature","log1p","negate","expm1","formatNumberToBase","suffix","prefixes","wordSize","notation","toFixed","splitValue","splitNumber","rounded","roundDigits","pp","zeros","toExponential","toEngineering","newExp","missingZeros","expDiff","decimalIdx","decimals","decimalVal","toPrecision","lowerExp","upperExp","split","match","exponent","coefficients","removed","DBL_EPSILON","mapObject","property","properties","_format","formatNumber","formatBigNumber","valueStr","valueWithoutExp","formatBigNumberToBase","formatArray","stringify","entries","big2","text","escaped","controlCharacters"],"mappings":"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"}