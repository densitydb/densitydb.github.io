{"version":3,"file":"240.js","sources":["webpack://assets/./src/quiz/statistics.ts"],"sourcesContent":["import { persistentClient } from '../utils/urbanstats-persistent-client'\n\nimport { infiniteQuizIsDone, validQuizInfiniteVersions } from './infinite'\nimport { QuizDescriptorWithTime, QuizHistory, QuizKindWithStats, QuizKindWithTime, QuizModel } from './quiz'\n\nasync function registerUser(): Promise<void> {\n    // Idempotent\n    await persistentClient.POST('/juxtastat/register_user', {\n        params: {\n            header: QuizModel.shared.userHeaders(),\n        },\n        body: {\n            // eslint-disable-next-line no-restricted-syntax -- Using the window hostname\n            domain: localStorage.getItem('testHostname') ?? window.location.hostname,\n        },\n    })\n}\n\nasync function reportToServerGeneric(wholeHistory: QuizHistory, endpointLatest: '/juxtastat/latest_day' | '/retrostat/latest_week', endpointStore: '/juxtastat/store_user_stats' | '/retrostat/store_user_stats', parseDay: (day: string) => number): Promise<void> {\n    await registerUser()\n\n    // fetch from latest_day endpoint\n    const { data } = await persistentClient.GET(endpointLatest, {\n        params: {\n            header: QuizModel.shared.userHeaders(),\n        },\n    })\n\n    if (data === undefined) {\n        return\n    }\n    const latestDay = data.latest_day\n    const filteredDays = Object.keys(wholeHistory).filter(day => parseDay(day) > latestDay)\n    const update = filteredDays.map<[number, boolean[]]>((day) => {\n        return [\n            parseDay(day),\n            wholeHistory[day].correct_pattern.map(b => b === 1 || b === true),\n        ]\n    })\n\n    await persistentClient.POST(endpointStore, {\n        params: {\n            header: QuizModel.shared.userHeaders(),\n        },\n        body: {\n            day_stats: update,\n        },\n    })\n}\n\nexport function getInfiniteQuizzes(wholeHistory: QuizHistory, isDone: boolean): [[string, number][], string[]] {\n    const seedVersions: [string, number][] = []\n    const keys: string[] = []\n    for (const day of Object.keys(wholeHistory)) {\n        const parsed = parseInfiniteSeedVersion(day)\n        if (parsed === undefined) {\n            continue\n        }\n        if (infiniteQuizIsDone(wholeHistory[day].correct_pattern) !== isDone) {\n            continue\n        }\n        if (!(validQuizInfiniteVersions as number[]).includes(parsed[1])) {\n            continue\n        }\n        seedVersions.push(parsed)\n        keys.push(day)\n    }\n    return [seedVersions, keys]\n}\n\nasync function getUnreportedSeedVersions(user: string, secureID: string, wholeHistory: QuizHistory): Promise<[[string, number][], string[]] | undefined> {\n    const [seedVersions, keys] = getInfiniteQuizzes(wholeHistory, true)\n    // post seedVersions to /juxtastat_infinite/has_infinite_stats\n    await registerUser()\n\n    const { data } = await persistentClient.POST('/juxtastat_infinite/has_infinite_stats', {\n        params: {\n            header: QuizModel.shared.userHeaders(),\n        },\n        body: { seedVersions },\n    })\n\n    if (data === undefined) {\n        return undefined\n    }\n\n    const has = data.has\n    return [seedVersions.filter((_, index) => !has[index]), keys.filter((_, index) => !has[index])]\n}\n\nasync function reportToServerInfinite(wholeHistory: QuizHistory): Promise<void> {\n    const user = QuizModel.shared.uniquePersistentId.value\n    const secureID = QuizModel.shared.uniqueSecureId.value\n    const res = await getUnreportedSeedVersions(user, secureID, wholeHistory)\n    if (res === undefined) {\n        return\n    }\n    const [seedVersions, keys] = res\n    for (let i = 0; i < seedVersions.length; i++) {\n        const [seed, version] = seedVersions[i]\n        const key = keys[i]\n        const dayStats = wholeHistory[key]\n        await persistentClient.POST('/juxtastat_infinite/store_user_stats', {\n            params: {\n                header: QuizModel.shared.userHeaders(),\n            },\n            body: {\n                seed, version, corrects: dayStats.correct_pattern.map(b => b === 1 || b === true),\n            },\n        })\n    }\n}\n\nexport function parseTimeIdentifier(quizKind: QuizKindWithTime, today: string): number {\n    switch (quizKind) {\n        case 'juxtastat':\n            return parseJuxtastatDay(today)\n        case 'retrostat':\n            return parseRetrostatWeek(today)\n    }\n}\n\nfunction parseJuxtastatDay(day: string): number {\n    // return -10000 if day doesn't match -?[0-9]+\n    if (!/^-?[0-9]+$/.test(day)) {\n        return -10000\n    }\n    return parseInt(day)\n}\n\nfunction parseRetrostatWeek(day: string): number {\n    // return -10000 if day doesn't match W-?[0-9]+\n    if (!/^W-?[0-9]+$/.test(day)) {\n        return -10000\n    }\n    return parseInt(day.substring(1))\n}\n\nfunction parseInfiniteSeedVersion(day: string): [string, number] | undefined {\n    const pattern = /^I_([0-9a-zA-Z]+)_([0-9]+)$/\n    const match = pattern.exec(day)\n    if (match === null) {\n        return undefined\n    }\n    return [match[1], parseInt(match[2])]\n}\n\nexport async function reportToServer(wholeHistory: QuizHistory, kind: QuizKindWithStats): Promise<void> {\n    switch (kind) {\n        case 'juxtastat':\n        { await reportToServerGeneric(wholeHistory, '/juxtastat/latest_day', '/juxtastat/store_user_stats', parseJuxtastatDay); return }\n        case 'retrostat':\n        { await reportToServerGeneric(wholeHistory, '/retrostat/latest_week', '/retrostat/store_user_stats', parseRetrostatWeek); return }\n        case 'infinite':\n        { await reportToServerInfinite(wholeHistory); return }\n    }\n}\n\n// eslint-disable-next-line no-restricted-syntax -- Data from server\nexport interface PerQuestionStats { total: number, per_question: number[] }\n\nconst questionStatsCache = new Map<string, PerQuestionStats>()\n\n// These are separate sync and async functions to eliminate flashing in the UI\nexport function getCachedPerQuestionStats(descriptor: QuizDescriptorWithTime): PerQuestionStats | undefined {\n    return questionStatsCache.get(JSON.stringify(descriptor))\n}\n\nexport async function getPerQuestionStats(descriptor: QuizDescriptorWithTime): Promise<PerQuestionStats> {\n    return getCachedPerQuestionStats(descriptor) ?? await fetchPerQuestionStats(descriptor)\n}\n\nasync function fetchPerQuestionStats(descriptor: QuizDescriptorWithTime): Promise<PerQuestionStats> {\n    let response: { data?: PerQuestionStats }\n    switch (descriptor.kind) {\n        case 'juxtastat':\n            response = await persistentClient.GET('/juxtastat/get_per_question_stats', {\n                params: {\n                    query: { day: descriptor.name },\n                },\n            })\n            break\n        case 'retrostat':\n            response = await persistentClient.GET('/retrostat/get_per_question_stats', {\n                params: {\n                    query: { week: parseInt(descriptor.name.substring(1)) },\n                },\n            })\n            break\n    }\n    if (response.data === undefined) {\n        throw new Error('Failed to get per question stats')\n    }\n    return response.data\n}\n"],"names":["registerUser","_localStorage_getItem","persistentClient","QuizModel","window","reportToServerGeneric","wholeHistory","endpointLatest","endpointStore","parseDay","data","latestDay","update","undefined","filteredDays","Object","day","b","getInfiniteQuizzes","isDone","seedVersions","keys","_iteratorError","parsed","parseInfiniteSeedVersion","match","pattern","parseInt","infiniteQuizIsDone","validQuizInfiniteVersions","parseTimeIdentifier","quizKind","today","parseJuxtastatDay","parseRetrostatWeek","reportToServer","kind","user","secureID","res","_res","i","_seedVersions_i","seed","version","dayStats","_getInfiniteQuizzes","has","_","index","questionStatsCache","Map","getCachedPerQuestionStats","descriptor","JSON","getPerQuestionStats","_getCachedPerQuestionStats","response","Error","a"],"mappings":"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"}