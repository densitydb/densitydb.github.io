{"version":3,"file":"327.js","sources":["webpack://assets/./src/components/quiz.css","webpack://assets/./src/components/GenericShareButton.tsx","webpack://assets/./src/components/Icon.tsx","webpack://assets/./src/components/quiz.css?1e07","webpack://assets/./src/quiz/SignedOutPanel.tsx","webpack://assets/./src/quiz/quiz-components.tsx","webpack://assets/./src/quiz/quiz-question.tsx","webpack://assets/./node_modules/react-spinners/esm/GridLoader.js","webpack://assets/./src/quiz/quiz-friends.tsx","webpack://assets/./src/quiz/quiz-statistics.tsx","webpack://assets/./src/quiz/quiz-result.tsx","webpack://assets/./src/components/quiz-panel.tsx","webpack://assets/./src/quiz/dates.ts","webpack://assets/./src/quiz/friends.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.quiz_clickable {\n  display: block;\n  border-radius: 1em;\n  background-color: var(--quiz-plain-bg);\n  margin: 0.25em;\n  height: 100%;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .quiz_clickable:hover {\n    background-color: var(--quiz-selected-bg);\n    color: var(--text-main-opposite);\n  }\n}\n\n.quiz_correct {\n  background-color: var(--quiz-correct);\n  color: #000;\n}\n\n.quiz_correct:hover {\n  background-color: var(--quiz-correct);\n  color: #000;\n}\n\n.quiz_incorrect {\n  background-color: var(--quiz-incorrect);\n  color: #000;\n}\n\n.quiz_incorrect:hover {\n  background-color: var(--quiz-incorrect);\n  color: #000;\n}\n\n.quiz_results_question {\n  text-align: center;\n  display: table;\n  margin: 0 auto;\n  font-size: 1.25em;\n}\n\n.quiz_result_name_left {\n  width: 35%;\n  text-align: right;\n  vertical-align: middle;\n}\n\n.quiz_result_value_left {\n  width: 10%;\n  text-align: right;\n  font-weight: 500;\n  vertical-align: middle;\n}\n\n.quiz_result_symbol {\n  width: 5%;\n  text-align: center;\n  font-weight: 500;\n  vertical-align: middle;\n}\n\n.quiz_result_value_right {\n  width: 10%;\n  text-align: left;\n  font-weight: 500;\n  vertical-align: middle;\n}\n\n.quiz_result_name_right {\n  width: 35%;\n  text-align: left;\n  vertical-align: middle;\n}\n\n.quiz_summary {\n  text-align: center;\n  font-size: 2em;\n  display: table;\n  margin: 0 auto;\n}\n\n.quiz_footer {\n  table-layout: fixed;\n  width: 40%;\n  margin-left: 30%;\n  margin-right: 30%;\n  height: 3em;\n}\n\n.quiz_barchart {\n  margin: 0 auto;\n}\n\n.quiz_bar_td {\n  height: 1.5em;\n  vertical-align: middle;\n  font-size: 1em;\n}\n\n.quiz_bar {\n  padding-left: 0.5em;\n  float: left;\n  vertical-align: middle;\n  height: 1.5em;\n  font-size: 1em;\n}\n\n.quiz_stat {\n  padding-left: 0.5em;\n  float: left;\n  vertical-align: middle;\n  height: 1.5em;\n  line-height: 1.5em;\n  font-size: 1em;\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/quiz.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,cAAc;EACd,kBAAkB;EAClB,sCAAsC;EACtC,cAAc;EACd,YAAY;AACd;;AAEA;EACE;IACE,yCAAyC;IACzC,gCAAgC;EAClC;AACF;;AAEA;EACE,qCAAqC;EACrC,WAAW;AACb;;AAEA;EACE,qCAAqC;EACrC,WAAW;AACb;;AAEA;EACE,uCAAuC;EACvC,WAAW;AACb;;AAEA;EACE,uCAAuC;EACvC,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,cAAc;EACd,cAAc;EACd,iBAAiB;AACnB;;AAEA;EACE,UAAU;EACV,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,UAAU;EACV,iBAAiB;EACjB,gBAAgB;EAChB,sBAAsB;AACxB;;AAEA;EACE,SAAS;EACT,kBAAkB;EAClB,gBAAgB;EAChB,sBAAsB;AACxB;;AAEA;EACE,UAAU;EACV,gBAAgB;EAChB,gBAAgB;EAChB,sBAAsB;AACxB;;AAEA;EACE,UAAU;EACV,gBAAgB;EAChB,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,cAAc;EACd,cAAc;EACd,cAAc;AAChB;;AAEA;EACE,mBAAmB;EACnB,UAAU;EACV,gBAAgB;EAChB,iBAAiB;EACjB,WAAW;AACb;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,cAAc;AAChB;;AAEA;EACE,mBAAmB;EACnB,WAAW;EACX,sBAAsB;EACtB,aAAa;EACb,cAAc;AAChB;;AAEA;EACE,mBAAmB;EACnB,WAAW;EACX,sBAAsB;EACtB,aAAa;EACb,kBAAkB;EAClB,cAAc;AAChB\",\"sourcesContent\":[\".quiz_clickable {\\n  display: block;\\n  border-radius: 1em;\\n  background-color: var(--quiz-plain-bg);\\n  margin: 0.25em;\\n  height: 100%;\\n}\\n\\n@media (hover: hover) and (pointer: fine) {\\n  .quiz_clickable:hover {\\n    background-color: var(--quiz-selected-bg);\\n    color: var(--text-main-opposite);\\n  }\\n}\\n\\n.quiz_correct {\\n  background-color: var(--quiz-correct);\\n  color: #000;\\n}\\n\\n.quiz_correct:hover {\\n  background-color: var(--quiz-correct);\\n  color: #000;\\n}\\n\\n.quiz_incorrect {\\n  background-color: var(--quiz-incorrect);\\n  color: #000;\\n}\\n\\n.quiz_incorrect:hover {\\n  background-color: var(--quiz-incorrect);\\n  color: #000;\\n}\\n\\n.quiz_results_question {\\n  text-align: center;\\n  display: table;\\n  margin: 0 auto;\\n  font-size: 1.25em;\\n}\\n\\n.quiz_result_name_left {\\n  width: 35%;\\n  text-align: right;\\n  vertical-align: middle;\\n}\\n\\n.quiz_result_value_left {\\n  width: 10%;\\n  text-align: right;\\n  font-weight: 500;\\n  vertical-align: middle;\\n}\\n\\n.quiz_result_symbol {\\n  width: 5%;\\n  text-align: center;\\n  font-weight: 500;\\n  vertical-align: middle;\\n}\\n\\n.quiz_result_value_right {\\n  width: 10%;\\n  text-align: left;\\n  font-weight: 500;\\n  vertical-align: middle;\\n}\\n\\n.quiz_result_name_right {\\n  width: 35%;\\n  text-align: left;\\n  vertical-align: middle;\\n}\\n\\n.quiz_summary {\\n  text-align: center;\\n  font-size: 2em;\\n  display: table;\\n  margin: 0 auto;\\n}\\n\\n.quiz_footer {\\n  table-layout: fixed;\\n  width: 40%;\\n  margin-left: 30%;\\n  margin-right: 30%;\\n  height: 3em;\\n}\\n\\n.quiz_barchart {\\n  margin: 0 auto;\\n}\\n\\n.quiz_bar_td {\\n  height: 1.5em;\\n  vertical-align: middle;\\n  font-size: 1em;\\n}\\n\\n.quiz_bar {\\n  padding-left: 0.5em;\\n  float: left;\\n  vertical-align: middle;\\n  height: 1.5em;\\n  font-size: 1em;\\n}\\n\\n.quiz_stat {\\n  padding-left: 0.5em;\\n  float: left;\\n  vertical-align: middle;\\n  height: 1.5em;\\n  line-height: 1.5em;\\n  font-size: 1em;\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import React, { CSSProperties, ReactNode } from 'react'\nimport { isFirefox, isMobile } from 'react-device-detect'\n\nimport { useColors } from '../page_template/colors'\n\nexport function GenericShareButton(props: {\n    buttonRef: React.RefObject<HTMLButtonElement>\n    produceSummary: () => Promise<[string, string]>\n}): ReactNode {\n    const colors = useColors()\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- We need to check the condition for browser compatibility.\n    const canShare = navigator.canShare?.({ url: 'https://juxtastat.org', text: 'test' }) ?? false\n    const isShare = isMobile && canShare && !isFirefox\n\n    return (\n        <button\n            className=\"serif\"\n            style={buttonStyle(colors.hueColors.green, colors.buttonTextWhite)}\n            ref={props.buttonRef}\n            onClick={async () => {\n                const [text, url] = await props.produceSummary()\n\n                async function copyToClipboard(): Promise<void> {\n                    await navigator.clipboard.writeText(`${text}\\n${url}`)\n                    props.buttonRef.current!.textContent = 'Copied!'\n                }\n\n                if (isShare) {\n                    try {\n                        await navigator.share({\n                            url,\n                            text: `${text}\\n`,\n                        })\n                    }\n                    catch {\n                        await copyToClipboard()\n                    }\n                }\n                else {\n                    await copyToClipboard()\n                }\n            }}\n        >\n            <div>{isShare ? 'Share' : 'Copy'}</div>\n            <div style={{ marginInline: '0.25em' }}></div>\n            <img src=\"/share.png\" className=\"icon\" style={{ width: '1em', height: '1em' }} />\n        </button>\n    )\n}\n\nexport function buttonStyle(color: string, textColor: string): CSSProperties {\n    return {\n        textAlign: 'center',\n        fontSize: '2em',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'row',\n        margin: '0 auto',\n        padding: '0.25em 1em',\n        backgroundColor: color,\n        borderRadius: '0.25em',\n        border: 'none',\n        color: textColor,\n    }\n}\n","/**\n * This only uses the transparency of the icon image to display the specified color.\n */\n\nimport React, { CSSProperties, ReactNode } from 'react'\n\nexport function Icon({ size, color, src, style }: { size: string, color: string, src: string, style?: Partial<CSSProperties> }): ReactNode {\n    return (\n        <div style={{ backgroundColor: color, width: size, height: size, maskImage: `url(${src})`, maskRepeat: 'no-repeat', maskSize: 'contain', maskPosition: 'center', ...style }} />\n    )\n}\n","\n      import API from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../node_modules/css-loader/dist/cjs.js!./quiz.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../node_modules/css-loader/dist/cjs.js!./quiz.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import React, { ReactNode } from 'react'\n\nimport { ErrorBox } from '../ErrorBox'\n\nimport { AuthenticationStateMachine } from './AuthenticationStateMachine'\n\nexport function SignedOutPanel(): ReactNode {\n    const startSignIn = AuthenticationStateMachine.shared.useStartSignIn()\n    const authState = AuthenticationStateMachine.shared.useState()\n\n    return (\n        <ErrorBox>\n            <h1>You were signed out</h1>\n            <p>\n                Sign back in to\n                {' '}\n                <b>{authState.email}</b>\n                {' '}\n                ensure your quiz progress continues syncing.\n            </p>\n            <button style={{ margin: '1em', padding: '0.5em 1em' }} onClick={() => { startSignIn?.() }}>\n                Sign In\n            </button>\n            <button style={{ margin: '1em', padding: '0.5em 1em' }} onClick={() => { void AuthenticationStateMachine.shared.userSignOut() }}>\n                Sign Out\n            </button>\n        </ErrorBox>\n    )\n}\n","import React, { ReactNode } from 'react'\n\nimport '../common.css'\nimport '../components/quiz.css'\nimport { useColors, useJuxtastatColors } from '../page_template/colors'\nimport { useHeaderTextClass } from '../utils/responsive'\n\nimport { AuthenticationStateMachine } from './AuthenticationStateMachine'\nimport { juxtaInfiniteCorrectForBonus } from './infinite'\nimport { nameOfQuizKind, QuizHistory, QuizKind, QuizModel } from './quiz'\n\nexport function Header({ quiz }: { quiz: { kind: QuizKind, name: string | number } }): ReactNode {\n    let text = nameOfQuizKind(quiz.kind)\n    if (typeof quiz.name !== 'number' && quiz.kind !== 'infinite') {\n        text += ` ${quiz.name}`\n    }\n    return (<div className={useHeaderTextClass()}>{text}</div>)\n}\n\nexport function Footer(props: { length: number, history: QuizHistory[string] }): ReactNode {\n    const colors = useColors()\n    const juxtaColors = useJuxtastatColors()\n    const footerColors: string[] = props.history.correct_pattern.map(\n        correct => correct ? juxtaColors.correct : juxtaColors.incorrect,\n    )\n    while (footerColors.length < props.length) {\n        footerColors.push(colors.unselectedButton)\n    }\n    return (\n        <table className=\"quiz_footer\">\n            <tbody>\n                <tr>\n                    {footerColors.map((x, i) =>\n                        <td key={i} style={{ backgroundColor: x }}></td>,\n                    )}\n                </tr>\n            </tbody>\n        </table>\n    )\n}\n\nexport function Help(props: { quizKind: QuizKind }): ReactNode {\n    const text = (): string => {\n        switch (props.quizKind) {\n            case 'juxtastat':\n                return 'Select the geographical region answering the question. The questions get harder as you go on.'\n            case 'retrostat':\n                return 'Select the easier question. A question is considered easier if more people got it right.'\n            case 'custom':\n                return 'Select the geographical region answering the question.'\n            case 'infinite':\n                return `Select the geographical region answering the question. You lose when you run out of lives.`\n                    + ` You gain lives by getting ${juxtaInfiniteCorrectForBonus} questions right in a row.`\n        }\n    }\n    return (\n        <div className=\"centered_text serif\">\n            {text()}\n            {' '}\n            {UserId()}\n            {ExportImport()}\n        </div>\n    )\n}\n\nexport function UserId(): ReactNode {\n    const user = QuizModel.shared.uniquePersistentId.use()\n    return (\n        <div>\n            {'Your user id is '}\n            <span className=\"juxtastat-user-id\">{user}</span>\n            {'. '}\n            <QuizAuthStatus />\n        </div>\n    )\n}\n\nexport function QuizAuthStatus(): ReactNode {\n    const state = AuthenticationStateMachine.shared.useState()\n\n    const startSignIn = AuthenticationStateMachine.shared.useStartSignIn()\n\n    if (state.state === 'signedOut') {\n        const signIn = (e: React.MouseEvent): void => {\n            e.preventDefault()\n            startSignIn?.()\n        }\n        return (\n            <>\n                <a href=\"\" data-test=\"googleSignIn\" onClick={signIn}>Sign In with Google</a>\n                {' to sync your quiz history across devices.'}\n            </>\n        )\n    }\n    else {\n        const signOut = (e: React.MouseEvent): void => {\n            e.preventDefault()\n            void AuthenticationStateMachine.shared.userSignOut()\n        }\n\n        return (\n            <>\n                {`Signed in with ${state.email}. `}\n                <a href=\"\" onClick={signOut}>Sign Out</a>\n            </>\n        )\n    }\n}\n\nexport function ExportImport(): ReactNode {\n    return (\n        <div style={{ marginTop: '5px' }}>\n            <button onClick={() => { QuizModel.shared.exportQuizPersona() }}>\n                Export Quiz History\n            </button>\n            {' '}\n            <button onClick={() => { void QuizModel.shared.importQuizPersona() }}>\n                Import Quiz History\n            </button>\n        </div>\n    )\n}\n","import '../common.css'\nimport '../components/quiz.css'\n\nimport React, { ReactNode } from 'react'\nimport { isFirefox } from 'react-device-detect'\n\nimport { MapGeneric, MapGenericProps, ShapeRenderingSpec } from '../components/map'\nimport { useColors } from '../page_template/colors'\nimport { useMobileLayout } from '../utils/responsive'\n\nimport { JuxtastatLivesDisplay } from './infinite'\nimport { JuxtaQuestion, QuizHistory, QuizKind, RetroQuestion, aCorrect } from './quiz'\nimport { Footer, Header, Help } from './quiz-components'\n\ninterface MapProps extends MapGenericProps {\n    longname: string\n    color: string\n}\n\nclass Map extends MapGeneric<MapProps> {\n    override computeShapesToRender(): Promise<ShapeRenderingSpec> {\n        return Promise.resolve({\n            shapes: [\n                {\n                    name: this.props.longname,\n                    spec: { type: 'polygon', style: { fillOpacity: 0.5, weight: 1, color: this.props.color, fillColor: this.props.color } },\n                    meta: {},\n                    notClickable: true,\n                },\n            ],\n            zoomIndex: 0,\n        })\n    }\n}\n\nexport function QuizQuestionDispatch(props: QuizQuestionProps & (\n    { question: JuxtaQuestion | RetroQuestion }\n)): ReactNode {\n    switch (props.question.kind) {\n        case 'retrostat':\n            return <RetroQuizQuestion {...props} question={props.question} />\n        case 'juxtastat':\n            return <JuxtastatQuizQuestion {...props} question={props.question} />\n        default:\n            throw new Error('Invalid question kind')\n    }\n}\n\ninterface QuizQuestionProps {\n    waiting: boolean\n    history: QuizHistory[string]\n    nested: boolean\n    noHeader: boolean\n    noFooter: boolean\n    quiz: { kind: QuizKind, name: number | string }\n    onSelect: (letter: 'A' | 'B') => void\n    length: number\n}\n\nfunction QuizQuestion(props: QuizQuestionProps & {\n    getQuestion: () => ReactNode\n    getOption: (letter: 'a' | 'b') => ReactNode\n    getDemo: (letter: 'a' | 'b') => ReactNode\n}): ReactNode {\n    let buttonA = 'quiz_clickable'\n    let buttonB = 'quiz_clickable'\n    if (props.waiting) {\n        const choices = props.history.choices\n        const pattern = props.history.correct_pattern\n        const choice = choices[choices.length - 1]\n        const correct = pattern[pattern.length - 1]\n        const cssClass = correct ? ' quiz_correct' : ' quiz_incorrect'\n        if (choice === 'A') {\n            buttonA += cssClass\n        }\n        else {\n            buttonB += cssClass\n        }\n    }\n\n    const question = props.getQuestion()\n\n    const buttonStyle: React.CSSProperties = {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column',\n        padding: '0.5em',\n    }\n\n    const rowStyle = { display: 'flex', justifyContent: 'center', width: '90%', margin: 'auto' }\n\n    let quizTextCSS = useMobileLayout() ? 'quiztext_mobile' : 'quiztext'\n    if (props.nested) {\n        quizTextCSS += '_nested'\n    }\n\n    return (\n        <div>\n            {props.noHeader ? undefined : <Header quiz={props.quiz} />}\n            <div className={`centered_text ${quizTextCSS}`}>\n                {question}\n            </div>\n            <div className=\"gap\"></div>\n            <div style={rowStyle}>\n                <div style={{ width: '50%', padding: '0.5em' }}>\n                    <div role=\"button\" id=\"quiz-answer-button-a\" className={buttonA} onClick={() => { props.onSelect('A') }} style={buttonStyle}>\n                        <span style={{ margin: 'auto' }}>\n                            <div className={`centered_text ${quizTextCSS}`}>\n                                {props.getOption('a')}\n                            </div>\n                        </span>\n                    </div>\n                </div>\n                <div style={{ width: '50%', padding: '0.5em' }}>\n                    <div role=\"button\" id=\"quiz-answer-button-b\" className={buttonB} onClick={() => { props.onSelect('B') }} style={buttonStyle}>\n                        <span style={{ margin: 'auto' }}>\n                            <div className={`centered_text ${quizTextCSS}`}>\n                                {props.getOption('b')}\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            </div>\n            <div style={rowStyle}>\n                <div style={{ width: '50%', padding: '0.5em' }}>\n                    {props.getDemo('a')}\n                </div>\n                <div style={{ width: '50%', padding: '0.5em' }}>\n                    {props.getDemo('b')}\n                </div>\n            </div>\n            {props.noFooter\n                ? undefined\n                : (\n                        <>\n                            {props.quiz.kind === 'infinite'\n                                ? <JuxtastatLivesDisplay correctPattern={props.history.correct_pattern.map(x => x ? true : false)} />\n                                : undefined}\n                            <Footer history={props.history} length={props.length} />\n                            <Help quizKind={props.quiz.kind} />\n                        </>\n                    )}\n        </div>\n    )\n}\n\nfunction RetroQuizQuestion(props: QuizQuestionProps & { question: RetroQuestion }): ReactNode {\n    const getDemo = (key: 'a' | 'b'): ReactNode => {\n        const keyUpper = aCorrect(props.question[key]) ? 'A' : 'B'\n        return (\n            <div style={{ zoom: 0.5 }}>\n                <JuxtastatQuizQuestion\n                    question={props.question[key]}\n                    history={{ choices: [keyUpper], correct_pattern: [true] }}\n                    length={5}\n                    onSelect={() => undefined}\n                    waiting={true}\n                    quiz={{ kind: 'juxtastat', name: 'demo' }}\n                    noHeader={true}\n                    noFooter={true}\n                    nested={isFirefox} // Firefox doesn't support zoom so we use special CSS for nested questions\n                />\n            </div>\n        )\n    }\n\n    return (\n        <QuizQuestion\n            {...props}\n            getQuestion={() => 'Which question was easier?'}\n            getOption={letter => `Question ${letter.toUpperCase()}`}\n            getDemo={getDemo}\n        />\n    )\n}\n\nfunction JuxtastatQuizQuestion(props: QuizQuestionProps & {\n    question: JuxtaQuestion\n}): ReactNode {\n    const colors = useColors()\n    return (\n        <QuizQuestion\n            {...props}\n            getQuestion={() => renderQuestion(props.question.question)}\n            getOption={letter => props.question[`longname_${letter}`]}\n            getDemo={letter => (\n                <Map\n                    longname={props.question[`longname_${letter}`]}\n                    basemap={{ type: 'osm' }}\n                    color={colors.hueColors.blue}\n                    attribution={letter === 'b' ? 'startHidden' : 'none'}\n                />\n            )}\n        />\n    )\n}\n\nexport function questionString(question: string): string {\n    if (question.startsWith('!FULL ')) {\n        return question.slice(6)\n    }\n    return `Which has a ${question}?`\n}\n\nexport function renderQuestion(questionText: string): ReactNode {\n    if (questionText.includes('!TOOLTIP')) {\n        const [question, tooltip] = questionText.split('!TOOLTIP ')\n        return (\n            <span>\n                {questionString(question)}\n                <Tooltip content={tooltip} />\n            </span>\n        )\n    }\n    const q = questionString(questionText)\n    return q\n}\n\nexport function Tooltip(props: { content: ReactNode }): ReactNode {\n    // create an image that looks like a little [?] text superscript that when you click on it\n    // shows the tooltip\n    const [show, setShow] = React.useState(false)\n    return (\n        <span>\n            <sup>\n                <div\n                    style={{\n                        cursor: 'pointer',\n                        fontSize: 'smaller',\n                        margin: '5px',\n                        fontWeight: 'bold',\n                        border: 'none',\n                        display: 'unset',\n                        height: 'unset',\n                        padding: '0px 5px',\n                    }}\n                    onClick={() => { setShow(!show) }}\n                    className=\"quiz_clickable\"\n                    role=\"button\"\n                >\n                    {'ⓘ\\ufe0e'}\n                </div>\n            </sup>\n            {show\n                ? (\n                        <div style={{ fontSize: '20px' }}>\n                            (\n                            {props.content}\n                            )\n                        </div>\n                    )\n                : undefined}\n        </span>\n    )\n}\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { cssValue, parseLengthAndUnit } from \"./helpers/unitConverter\";\nimport { createAnimation } from \"./helpers/animation\";\nvar grid = createAnimation(\"GridLoader\", \"0% {transform: scale(1)} 50% {transform: scale(0.5); opacity: 0.7} 100% {transform: scale(1); opacity: 1}\", \"grid\");\nvar random = function (top) { return Math.random() * top; };\nfunction GridLoader(_a) {\n    var _b = _a.loading, loading = _b === void 0 ? true : _b, _c = _a.color, color = _c === void 0 ? \"#000000\" : _c, _d = _a.speedMultiplier, speedMultiplier = _d === void 0 ? 1 : _d, _e = _a.cssOverride, cssOverride = _e === void 0 ? {} : _e, _f = _a.size, size = _f === void 0 ? 15 : _f, _g = _a.margin, margin = _g === void 0 ? 2 : _g, additionalprops = __rest(_a, [\"loading\", \"color\", \"speedMultiplier\", \"cssOverride\", \"size\", \"margin\"]);\n    var sizeWithUnit = parseLengthAndUnit(size);\n    var marginWithUnit = parseLengthAndUnit(margin);\n    var width = parseFloat(sizeWithUnit.value.toString()) * 3 + parseFloat(marginWithUnit.value.toString()) * 6;\n    var wrapper = __assign({ width: \"\".concat(width).concat(sizeWithUnit.unit), fontSize: 0, display: \"inline-block\" }, cssOverride);\n    var style = function (rand) {\n        return {\n            display: \"inline-block\",\n            backgroundColor: color,\n            width: \"\".concat(cssValue(size)),\n            height: \"\".concat(cssValue(size)),\n            margin: cssValue(margin),\n            borderRadius: \"100%\",\n            animationFillMode: \"both\",\n            animation: \"\".concat(grid, \" \").concat((rand / 100 + 0.6) / speedMultiplier, \"s \").concat(rand / 100 - 0.2, \"s infinite ease\"),\n        };\n    };\n    if (!loading) {\n        return null;\n    }\n    return (React.createElement(\"span\", __assign({ style: wrapper }, additionalprops, { ref: function (node) {\n            if (node) {\n                node.style.setProperty(\"width\", \"\".concat(width).concat(sizeWithUnit.unit), \"important\");\n            }\n        } }),\n        React.createElement(\"span\", { style: style(random(100)) }),\n        React.createElement(\"span\", { style: style(random(100)) }),\n        React.createElement(\"span\", { style: style(random(100)) }),\n        React.createElement(\"span\", { style: style(random(100)) }),\n        React.createElement(\"span\", { style: style(random(100)) }),\n        React.createElement(\"span\", { style: style(random(100)) }),\n        React.createElement(\"span\", { style: style(random(100)) }),\n        React.createElement(\"span\", { style: style(random(100)) }),\n        React.createElement(\"span\", { style: style(random(100)) })));\n}\nexport default GridLoader;\n","import React, { CSSProperties, ReactNode, useContext, useEffect, useState } from 'react'\nimport { GridLoader, MoonLoader } from 'react-spinners'\n\nimport { EditableString } from '../components/table'\nimport { Navigator } from '../navigation/Navigator'\nimport { urlFromPageDescriptor } from '../navigation/PageDescriptor'\nimport { useColors, useJuxtastatColors } from '../page_template/colors'\nimport { mixWithBackground } from '../utils/color'\nimport { persistentClient } from '../utils/urbanstats-persistent-client'\n\nimport { AuthenticationStateMachine } from './AuthenticationStateMachine'\nimport { addFriend } from './friends'\nimport { QuizDescriptorWithTime, QuizDescriptorWithStats, QuizFriends, QuizModel, QuizDescriptor } from './quiz'\nimport { CorrectPattern } from './quiz-result'\nimport { parseTimeIdentifier } from './statistics'\n\nexport type ResultToDisplayForFriends = { corrects: CorrectPattern | null } | { forThisSeed: number | null, maxScore: number | null, maxScoreSeed: string | null, maxScoreVersion: number | null }\n\ntype FriendResponse = { result: ResultToDisplayForFriends, friends: true } | { friends: false }\ntype FriendScore = { name?: string } & FriendResponse\n\nasync function juxtaRetroResponse(\n    quizDescriptor: QuizDescriptorWithTime,\n    requesters: string[],\n): Promise<FriendResponse[] | undefined> {\n    const date = parseTimeIdentifier(quizDescriptor.kind, quizDescriptor.name.toString())\n    const { data: friendScoresResponse } = await persistentClient.POST('/juxtastat/todays_score_for', {\n        params: {\n            header: QuizModel.shared.userHeaders(),\n        },\n        body: {\n            date,\n            requesters,\n            quiz_kind: quizDescriptor.kind,\n        },\n    })\n    if (friendScoresResponse === undefined) {\n        return undefined // Probably some sort of auth error, handled elsewhere\n    }\n    return friendScoresResponse.results.map(x => x.friends ? { friends: true, result: x } : { friends: false })\n}\n\nasync function infiniteResponse(\n    quizDescriptor: QuizDescriptor & { kind: 'infinite' },\n    requesters: string[],\n): Promise<FriendResponse[] | undefined> {\n    const { data: friendScoresResponse } = await persistentClient.POST('/juxtastat/infinite_results', {\n        params: {\n            header: QuizModel.shared.userHeaders(),\n        },\n        body: {\n            requesters, seed: quizDescriptor.seed, version: quizDescriptor.version,\n        },\n    })\n    if (friendScoresResponse === undefined) {\n        return undefined // Probably some sort of auth error, handled elsewhere\n    }\n    return friendScoresResponse.results.map(x => x.friends ? { friends: true, result: x } : { friends: false })\n}\n\nexport function QuizFriendsPanel(props: {\n    quizFriends: QuizFriends\n    setQuizFriends: (quizFriends: QuizFriends) => void\n    quizDescriptor: QuizDescriptorWithStats\n    myResult: ResultToDisplayForFriends\n}): ReactNode {\n    const colors = useColors()\n\n    const [friendScores, setFriendScores] = useState([] as FriendScore[])\n    const [isLoading, setIsLoading] = useState(false)\n    const [error, setError] = useState<string | undefined>(undefined)\n\n    const user = QuizModel.shared.uniquePersistentId.use()\n    const secureID = QuizModel.shared.uniqueSecureId.use()\n\n    useEffect(() => {\n        void (async () => {\n            setIsLoading(true)\n            setError(undefined)\n            try {\n                const friends = props.quizFriends.filter(([name]) => name !== null) as [string, string, number | undefined][]\n                // map name to id for quizFriends\n                const quizIDtoName = Object.fromEntries(friends.map(([name, id]) => [id, name]))\n                const requesters = friends.map(x => x[1])\n                const friendScoresResponse\n                    = props.quizDescriptor.kind === 'infinite'\n                        ? await infiniteResponse(props.quizDescriptor, requesters)\n                        : await juxtaRetroResponse(props.quizDescriptor, requesters)\n                if (friendScoresResponse === undefined) {\n                    return\n                }\n                setFriendScores(friendScoresResponse.map(\n                    (x, idx) => ({ name: quizIDtoName[requesters[idx]], ...x }),\n                ))\n            }\n            catch {\n                setError('Network Error')\n            }\n            finally {\n                setIsLoading(false)\n            }\n        })()\n    }, [props.quizDescriptor, props.quizFriends, user, secureID])\n\n    const allResults = [props.myResult, ...friendScores.flatMap(x => x.friends ? [x.result] : [])]\n\n    const content = (\n        <div>\n            <div style={{ margin: 'auto', width: '100%' }}>\n                <div className=\"quiz_summary\">Friends</div>\n            </div>\n            <>\n                {props.quizDescriptor.kind === 'infinite' ? <InfiniteHeader /> : undefined}\n                <PlayerScore result={props.myResult} otherResults={allResults} />\n\n                {\n                    friendScores.map((friendScore, idx) => (\n                        <FriendScore\n                            key={idx}\n                            index={idx}\n                            friendScore={friendScore}\n                            removeFriend={async () => {\n                                await persistentClient.POST('/juxtastat/unfriend', {\n                                    params: {\n                                        header: QuizModel.shared.userHeaders(),\n                                    },\n                                    body: {\n                                        requestee: props.quizFriends[idx][1],\n                                    },\n                                })\n                                const newQuizFriends = props.quizFriends.map<[string | null, string, number] | [string, string]>(tuple => tuple[0] === friendScore.name ? [null, tuple[1], Date.now()] : tuple)\n                                props.setQuizFriends(newQuizFriends)\n                            }}\n                            quizFriends={props.quizFriends}\n                            setQuizFriends={props.setQuizFriends}\n                            otherResults={allResults}\n                        />\n                    ),\n                    )\n                }\n            </>\n            <div style={{ height: '1em' }} />\n            <AddFriend />\n        </div>\n    )\n\n    const spinnerSize = '78px'\n    const spinnerStyle: CSSProperties = {\n        position: 'absolute',\n        left: `calc(50% - ${spinnerSize} / 2)`,\n        top: `calc(50% - ${spinnerSize} / 2)`,\n    }\n\n    return (\n        <div style={{ position: 'relative' }}>\n            <div style={{ opacity: isLoading ? 0.5 : 1, pointerEvents: isLoading ? 'none' : undefined }}>\n                <WithError content={content} error={error} />\n            </div>\n            {isLoading ? <MoonLoader size={spinnerSize} color={colors.textMain} cssOverride={spinnerStyle} /> : null}\n        </div>\n    )\n}\n\nfunction InfiniteHeader(): ReactNode {\n    return (\n        <div\n            style={{ display: 'flex', flexDirection: 'row', height: scoreCorrectHeight, alignItems: 'center' }}\n            className=\"testing-friends-section\"\n        >\n            <div style={{ width: '25%' }} />\n            <div style={{ width: '50%', display: 'flex', flexDirection: 'row' }}>\n                <div style={{ width: '50%', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                    On This Seed\n                </div>\n                <div style={{ width: '50%', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                    Overall Best\n                </div>\n            </div>\n            <div style={{ width: '25%' }} />\n        </div>\n    )\n}\n\nconst scoreCorrectHeight = '2em'\nconst addFriendHeight = '1.5em'\n\nfunction PlayerScore(props: { result: ResultToDisplayForFriends, otherResults: ResultToDisplayForFriends[] }): ReactNode {\n    const copyFriendLink = async (): Promise<void> => {\n        const playerName = prompt('Enter your name:')\n\n        if (playerName === null) {\n            return\n        }\n\n        const hash = urlFromPageDescriptor({ kind: 'quiz', id: AuthenticationStateMachine.shared.state.email ?? QuizModel.shared.uniquePersistentId.value, name: playerName }).hash\n        const url = `https://juxtastat.org/${hash}`\n\n        await navigator.clipboard.writeText(url)\n\n        alert('Link copied to clipboard!')\n    }\n\n    return (\n        <div\n            style={{ display: 'flex', flexDirection: 'row', height: scoreCorrectHeight, alignItems: 'center' }}\n            className=\"testing-friends-section\"\n        >\n            <div style={{ width: '25%' }}>\n                You\n            </div>\n            <div style={{ width: '50%' }}>\n                <FriendScoreCorrects result={props.result} friends={true} otherResults={props.otherResults} />\n            </div>\n            <div style={{ width: '25%', display: 'flex', height: addFriendHeight }}>\n                <button\n                    onClick={copyFriendLink}\n                    style={{ marginLeft: '1em' }}\n                    data-test-id=\"friend-link-button\"\n                >\n                    Copy Link\n                </button>\n            </div>\n        </div>\n    )\n}\n\nfunction FriendScore(props: {\n    index: number\n    friendScore: FriendScore\n    removeFriend: () => Promise<void>\n    quizFriends: QuizFriends\n    setQuizFriends: (x: QuizFriends) => void\n    otherResults: ResultToDisplayForFriends[]\n}): ReactNode {\n    const colors = useColors()\n\n    const [error, setError] = useState<string | undefined>(undefined)\n    const [loading, setLoading] = useState(false)\n\n    const renameFriend = (name: string): void => {\n        if (name === '') {\n            setError('Friend name cannot be empty')\n            return\n        }\n        if (props.quizFriends.map(x => x[0]).includes(name)) {\n            setError('Friend name already exists')\n            return\n        }\n        const newQuizFriends = [...props.quizFriends]\n        newQuizFriends[props.index] = [name, props.quizFriends[props.index][1], Date.now()]\n        props.setQuizFriends(newQuizFriends)\n        setError(undefined)\n    }\n\n    const removeFriend = async (): Promise<void> => {\n        setLoading(true)\n        try {\n            await props.removeFriend()\n        }\n        catch {\n            setError('Network Error')\n        }\n        finally {\n            setLoading(false)\n        }\n    }\n\n    const row = (\n        <div\n            style={{ display: 'flex', flexDirection: 'row', height: scoreCorrectHeight, alignItems: 'center' }}\n            className=\"testing-friends-section\"\n        >\n            <div style={{ width: '25%' }}>\n                <EditableString\n                    content={props.friendScore.name ?? 'Unknown'}\n                    onNewContent={renameFriend}\n                    style={{ width: '100%', height: '100%' }}\n                    inputMode=\"text\"\n                />\n            </div>\n            <div style={{ width: '50%' }}>\n                <FriendScoreCorrects {...props.friendScore} otherResults={props.otherResults} />\n            </div>\n            <div style={{ width: '25%', display: 'flex', height: addFriendHeight }}>\n                <button\n                    onClick={removeFriend}\n                    style={{ marginLeft: '1em' }}\n                    disabled={loading}\n                >\n                    Remove\n                </button>\n                {loading ? <GridLoader color={colors.textMain} size=\"4px\" cssOverride={{ marginLeft: '10px' }} /> : null}\n\n            </div>\n        </div>\n    )\n    return <WithError error={error} content={row} />\n}\n\nfunction FriendScoreCorrects(props: FriendScore & { otherResults: ResultToDisplayForFriends[] }): ReactNode {\n    const colors = useColors()\n    const juxtaColors = useJuxtastatColors()\n    const navContext = useContext(Navigator.Context)\n    const border = `1px solid ${colors.background}`\n    const greyedOut = {\n        backgroundColor: mixWithBackground(colors.hueColors.orange, 0.5, colors.background),\n        width: '100%',\n        height: scoreCorrectHeight,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        border,\n    }\n    if (!props.friends) {\n        return (\n            <div style={greyedOut}>\n                Ask&nbsp;\n                <b>\n                    {props.name}\n                </b>\n                &nbsp;to add you\n            </div>\n        )\n    }\n    if ('forThisSeed' in props.result) {\n        const link\n            = props.result.maxScoreSeed === null || props.result.maxScoreVersion === null\n                // eslint-disable-next-line @typescript-eslint/no-empty-function -- this is a dummy onClick function for when there is no link\n                ? { href: undefined, onClick: () => { } }\n                : navContext.link({\n                    kind: 'quiz', mode: 'infinite', seed: props.result.maxScoreSeed, v: props.result.maxScoreVersion,\n                }, { scroll: { kind: 'position', top: 0 } })\n        const relevantOtherResults = props.otherResults.filter(\n            x => 'forThisSeed' in x,\n        )\n        const baseStyle = { width: '50%', border, display: 'flex', justifyContent: 'center', alignItems: 'center', color: colors.buttonTextWhite, fontWeight: 'bold' }\n        const maxMaxScore = Math.max(...relevantOtherResults.map(x => x.maxScore ?? 0)) === props.result.maxScore\n        const maxForThisSeed = Math.max(...relevantOtherResults.map(x => x.forThisSeed ?? 0)) === props.result.forThisSeed\n        return (\n            <div style={{ display: 'flex', flexDirection: 'row', height: scoreCorrectHeight }}>\n                <div style={{ ...baseStyle, backgroundColor: maxForThisSeed ? colors.hueColors.green : colors.hueColors.blue }}>\n                    {props.result.forThisSeed ?? '-'}\n                </div>\n                <div\n                    style={{ ...baseStyle, backgroundColor: maxMaxScore ? colors.hueColors.green : colors.hueColors.blue }}\n                    onClick={link.onClick}\n                >\n                    <a style={{ textDecoration: 'none', color: colors.buttonTextWhite }} href={link.href}>{props.result.maxScore ?? '-'}</a>\n                </div>\n            </div>\n        )\n    }\n    if (props.result.corrects === null) {\n        return (\n            <div style={greyedOut}>Not Done Yet</div>\n        )\n    }\n    const corrects = props.result.corrects\n    return (\n        <div\n            className=\"testing-friend-score\"\n            style={{ display: 'flex', flexDirection: 'row', height: scoreCorrectHeight }}\n        >\n            {corrects.map((correct, idx) => {\n                const color = correct ? juxtaColors.correct : juxtaColors.incorrect\n                return (\n                    <div\n                        className={correct ? 'testing-friend-score-correct' : 'testing-friend-score-incorrect'}\n                        key={idx}\n                        style={{\n                            backgroundColor: color,\n                            color,\n                            width: `${100 / corrects.length}%`,\n                            border,\n                        }}\n                    >\n                        {correct ? 'y' : 'n'}\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nfunction AddFriend(): ReactNode {\n    const colors = useColors()\n\n    const [friendNameField, setFriendNameField] = useState('')\n    const [friendIDField, setFriendIDField] = useState('')\n    const [error, setError] = useState<string | undefined>(undefined)\n    const [loading, setLoading] = useState(false)\n\n    const addFriendClick = async (): Promise<void> => {\n        const friendID = friendIDField.trim()\n        const friendName = friendNameField.trim()\n        setLoading(true)\n        const result = await addFriend(friendID, friendName)\n        setLoading(false)\n        if (result !== undefined) {\n            setError(result.errorMessage)\n        }\n        else {\n            setError(undefined)\n            setFriendNameField('')\n            setFriendIDField('')\n        }\n    }\n\n    const form = (\n        <div style={{ display: 'flex', flexDirection: 'row', height: addFriendHeight, alignItems: 'center' }}>\n            <div\n                style={{ width: '37.5%', padding: '0 0.2em' }}\n            >\n                <input\n                    type=\"text\"\n                    placeholder=\"Friend Name\"\n                    value={friendNameField}\n                    style={{ width: '100%', height: '100%' }}\n                    onChange={(e) => { setFriendNameField(e.target.value) }}\n                    disabled={loading}\n                />\n            </div>\n            <div\n                style={{ width: '37.5%', padding: '0 0.2em', height: addFriendHeight }}\n            >\n                <input\n                    type=\"text\"\n                    placeholder=\"Friend ID or Email\"\n                    value={friendIDField}\n                    style={{ width: '100%', height: '100%' }}\n                    onChange={(e) => { setFriendIDField(e.target.value) }}\n                    disabled={loading}\n                />\n            </div>\n            <div style={{ width: '25%', display: 'flex', height: addFriendHeight }}>\n                <button\n                    onClick={addFriendClick}\n                    style={{ marginLeft: '1em', height: '100%' }}\n                    disabled={loading}\n                >\n                    Add\n                </button>\n                {loading ? <GridLoader color={colors.textMain} size=\"4px\" cssOverride={{ marginLeft: '10px' }} /> : null}\n            </div>\n        </div>\n    )\n    return <WithError error={error} content={form} />\n}\n\nfunction WithError(props: { error?: string, content: ReactNode }): ReactNode {\n    const colors = useColors()\n    if (props.error !== undefined) {\n        return (\n            <div>\n                {props.content}\n                <div style={{ backgroundColor: colors.slightlyDifferentBackgroundFocused, padding: '0 0.5em', marginRight: '25%' }}>\n                    {props.error}\n                </div>\n            </div>\n        )\n    }\n    return props.content\n}\n","import React, { ReactNode, useContext } from 'react'\n\nimport { Navigator } from '../navigation/Navigator'\nimport { useColors, useJuxtastatColors } from '../page_template/colors'\n\nimport { QuizDescriptor, QuizDescriptorWithTime, QuizHistory } from './quiz'\nimport { ResultToDisplayForFriends } from './quiz-friends'\nimport { getInfiniteQuizzes, parseTimeIdentifier } from './statistics'\n\nexport function QuizStatistics(\n    props: {\n        quiz: QuizDescriptor\n        wholeHistory: QuizHistory\n    },\n): ReactNode | undefined {\n    switch (props.quiz.kind) {\n        case 'juxtastat':\n        case 'retrostat':\n            return <QuizStatisticsForTimedStatistics quiz={props.quiz} wholeHistory={props.wholeHistory} />\n        case 'infinite':\n            return <QuizStatisticsForInfinite quiz={props.quiz} wholeHistory={props.wholeHistory} />\n        case 'custom':\n            return undefined\n    }\n}\n\nexport function QuizStatisticsForTimedStatistics(\n    props: {\n        quiz: QuizDescriptorWithTime\n        wholeHistory: QuizHistory\n    },\n): ReactNode {\n    const colors = useColors()\n    const history = (i: number): QuizHistory[string] | undefined => {\n        switch (props.quiz.kind) {\n            case 'juxtastat':\n                return props.wholeHistory[i]\n            case 'retrostat':\n                return props.wholeHistory[`W${i}`]\n        }\n    }\n\n    const today = parseTimeIdentifier(props.quiz.kind, props.quiz.name.toString())\n    const historicalCorrect = new Array(today + 1).fill(-1)\n    const frequencies = new Array<number>(6).fill(0)\n    const playedGames = []\n    for (let i = 0; i <= today; i++) {\n        const histI = history(i)\n        if (histI === undefined) {\n            continue\n        }\n        else {\n            const amount = histI.correct_pattern.reduce((partialSum: number, a) => partialSum + (a ? 1 : 0), 0)\n            historicalCorrect[i] = amount\n            frequencies[amount] += 1\n            playedGames.push(amount)\n        }\n    }\n    const maxStreaks = new Array<number>(historicalCorrect.length).fill(0)\n    for (let val = 0; val < maxStreaks.length; val++) {\n        if (historicalCorrect[val] >= 3) {\n            maxStreaks[val] = (val > 0 ? maxStreaks[val - 1] : 0) + 1\n        }\n    }\n    const maxStreak = Math.max(...maxStreaks)\n    const currentStreak = maxStreaks[today]\n    const totalFreq = frequencies.reduce((partialSum, a) => partialSum + a, 0)\n    const statistics = [\n        {\n            name: 'Played',\n            value: playedGames.length.toString(),\n        },\n        {\n            name: 'Mean score',\n            value: (\n                playedGames.reduce((partialSum, a) => partialSum + a, 0)\n                / playedGames.length\n            ).toFixed(2),\n        },\n        {\n            name: 'Win Rate (3+)',\n            value: `${(\n                playedGames.filter(x => x >= 3).length\n                / playedGames.length * 100\n            ).toFixed(0)}%`,\n        },\n        {\n            name: 'Current Streak (3+)',\n            value: currentStreak.toString(),\n        },\n        {\n            name: 'Max Streak (3+)',\n            value: maxStreak.toString(),\n        },\n    ]\n    return (\n        <div>\n            <div className=\"serif quiz_summary\">Your Statistics</div>\n            <DisplayedStats statistics={statistics} />\n            <div className=\"gap_small\" />\n            <table className=\"quiz_barchart\">\n                <tbody>\n                    {frequencies.map((amt, i) => (\n                        <tr key={i}>\n                            <td className=\"quiz_bar_td serif\" style={{ color: colors.textMain }}>\n                                {i}\n                                /5\n                            </td>\n                            <td className=\"quiz_bar_td serif\">\n                                <span className=\"quiz_bar\" style={{ width: `${amt / totalFreq * 20}em`, backgroundColor: colors.hueColors.blue }}>\n                                </span>\n                                {amt > 0\n                                    ? (\n                                            <span className=\"quiz_stat\" style={{ color: colors.textMain }}>\n                                                {amt}\n                                                {' '}\n                                                (\n                                                {(amt / totalFreq * 100).toFixed(1)}\n                                                %)\n                                            </span>\n                                        )\n                                    : undefined}\n                            </td>\n                        </tr>\n                    ),\n                    )}\n                </tbody>\n            </table>\n        </div>\n    )\n}\nexport function AudienceStatistics({ total, perQuestion }: { total: number, perQuestion: number[] }): ReactNode {\n    const juxtaColors = useJuxtastatColors()\n    // two flexboxes of the scores for each\n    return (\n        <div id=\"quiz-audience-statistics\">\n            <div className=\"serif quiz_summary\">Question Difficulty</div>\n            <DisplayedStats statistics={perQuestion.map((x, i) => {\n                return {\n                    name: `Q${i + 1} Correct`,\n                    value: `${(x / total * 100).toFixed(0)}%`,\n                    addtl_class: 'quiz-audience-statistics-displayed',\n                    color: x / total > 0.5 ? juxtaColors.correct : juxtaColors.incorrect,\n                }\n            },\n            )}\n            />\n        </div>\n    )\n}\nexport function DisplayedStats({ statistics }: {\n    statistics: {\n        value: string\n        name: string\n        additionalClass?: string\n        color?: string\n        onClick?: () => void\n    }[]\n}): ReactNode {\n    return (\n        <div\n            className=\"serif\"\n            style={{\n                textAlign: 'center', width: '100%', margin: 'auto', fontSize: '1.5em',\n                display: 'flex', flexWrap: 'wrap', justifyContent: 'center',\n            }}\n        >\n            {statistics.map((stat, i) => (\n                <DisplayedStat\n                    key={i}\n                    number={stat.value}\n                    name={stat.name}\n                    additionalClass={stat.additionalClass}\n                    color={stat.color}\n                    onClick={stat.onClick}\n                />\n            ),\n            )}\n        </div>\n    )\n}\nexport function DisplayedStat({ number, name, additionalClass, color, onClick }: {\n    number: string\n    name: string\n    additionalClass?: string\n    color?: string\n    onClick?: () => void\n}): ReactNode {\n    // large font for numbers, small for names. Center-aligned using flexbox\n    return (\n        <div\n            style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', padding: '0.3em' }}\n            onClick={onClick}\n        >\n            <div className={`serif ${additionalClass ?? ''}`} style={{ fontSize: '1.5em', color }}>{number}</div>\n            <div className=\"serif\" style={{ fontSize: '0.5em' }}>{name}</div>\n        </div>\n    )\n}\n\nfunction computeOrdinalsAndIndices(numCorrects: number[], keepNumber: number, saveIndex: number): [number[], number[]] {\n    /**\n     * Given an array of numbers, returns two arrays:\n     * 1. An array of ordinals, where the ith element is the rank of the ith element in the input array\n     *      Note that for duplicates, the ordinal is duplicated, and that the ordinals are 1-indexed\n     * 2. An array of indices, where the ith element is the index of the ith element in the input array\n     */\n    const sortedIndicesAll = Array.from(Array(numCorrects.length).keys())\n    sortedIndicesAll.sort((a, b) => numCorrects[b] - numCorrects[a])\n    let currentOrdinal = 1\n    let currentVal = numCorrects[sortedIndicesAll[0]]\n    const ordinals = sortedIndicesAll.map((index) => {\n        if (numCorrects[index] !== currentVal) {\n            currentVal = numCorrects[index]\n            currentOrdinal += 1\n        }\n        return currentOrdinal\n    })\n    const mask = ordinals.map((x, i) => x <= keepNumber || sortedIndicesAll[i] === saveIndex)\n\n    const sortedIndicesFilt = sortedIndicesAll.filter((_, i) => mask[i])\n    const ordinalsFilt = ordinals.filter((_, i) => mask[i])\n\n    return [ordinalsFilt, sortedIndicesFilt]\n}\n\ninterface InfiniteDisplay {\n    ordinals: number[]\n    sortedIndices: number[]\n    seedVersions: [string, number][]\n    numCorrects: number[]\n}\n\nfunction juxtastatInfiniteDisplay(quiz: QuizDescriptor & { kind: 'infinite' }, wholeHistory: QuizHistory): InfiniteDisplay {\n    const [seedVersions, keys] = getInfiniteQuizzes(wholeHistory, true)\n    const numCorrects = keys.map(\n        key => wholeHistory[key].correct_pattern.reduce((partialSum: number, a) => partialSum + (a ? 1 : 0), 0),\n    )\n    const thisIndex = seedVersions.findIndex(([seed, version]) => seed === quiz.seed && version === quiz.version)\n\n    const [ordinals, sortedIndices] = computeOrdinalsAndIndices(numCorrects, 3, thisIndex)\n\n    return { ordinals, sortedIndices, seedVersions, numCorrects }\n}\n\nexport type Medal = 1 | 2 | 3\n\nexport function ordinalThis(quiz: QuizDescriptor & { kind: 'infinite' }, wholeHistory: QuizHistory): Medal | undefined {\n    const { ordinals, sortedIndices, seedVersions } = juxtastatInfiniteDisplay(quiz, wholeHistory)\n    const thisIndex = seedVersions.findIndex(([seed, version]) => seed === quiz.seed && version === quiz.version)\n    const thisOrdinal = ordinals[sortedIndices.indexOf(thisIndex)]\n    switch (thisOrdinal) {\n        case 1:\n        case 2:\n        case 3:\n            return thisOrdinal\n        default:\n            return undefined\n    }\n}\n\nexport function ourResultToDisplayForFriends(quiz: QuizDescriptor & { kind: 'infinite' }, wholeHistory: QuizHistory): ResultToDisplayForFriends {\n    const { sortedIndices, seedVersions, numCorrects } = juxtastatInfiniteDisplay(quiz, wholeHistory)\n    const thisIndex = seedVersions.findIndex(([seed, version]) => seed === quiz.seed && version === quiz.version)\n    const thisNumCorrect = numCorrects[thisIndex]\n    const bestIndex = sortedIndices[0]\n\n    return {\n        forThisSeed: thisNumCorrect,\n        maxScore: numCorrects[bestIndex],\n        maxScoreSeed: seedVersions[bestIndex][0],\n        maxScoreVersion: seedVersions[bestIndex][1],\n    }\n}\n\nexport function QuizStatisticsForInfinite(\n    props: {\n        quiz: QuizDescriptor & { kind: 'infinite' }\n        wholeHistory: QuizHistory\n    },\n): ReactNode | undefined {\n    const colors = useColors()\n    const navContext = useContext(Navigator.Context)\n\n    const { ordinals, sortedIndices, seedVersions, numCorrects } = juxtastatInfiniteDisplay(props.quiz, props.wholeHistory)\n\n    return (\n        <div id=\"your-best-scores\">\n            <div className=\"serif quiz_summary\">Your Best Scores</div>\n            <DisplayedStats\n                statistics={sortedIndices.map((idx, i) => {\n                    return {\n                        name: `#${ordinals[i]}`,\n                        value: numCorrects[idx].toString(),\n                        additionalClass: 'quiz-audience-statistics-displayed',\n                        color: seedVersions[idx][0] === props.quiz.seed ? colors.hueColors.green : colors.hueColors.blue,\n                        onClick: () => {\n                            void navContext.navigate({\n                                kind: 'quiz',\n                                mode: 'infinite',\n                                seed: seedVersions[idx][0],\n                                v: seedVersions[idx][1],\n                            },\n                            { history: 'push', scroll: { kind: 'none' } })\n                        },\n                    }\n                },\n                )}\n            />\n        </div>\n\n    )\n}\n","import React, { CSSProperties, ReactNode, useContext, useEffect, useRef, useState } from 'react'\n\nimport { GenericShareButton } from '../components/GenericShareButton'\nimport { Icon } from '../components/Icon'\nimport { JuxtastatInfiniteButton, OtherQuizzesButtons } from '../components/quiz-panel'\nimport { CheckboxSetting } from '../components/sidebar'\nimport { Statistic } from '../components/table'\nimport { Navigator } from '../navigation/Navigator'\nimport { JuxtastatColors } from '../page_template/color-themes'\nimport { useColors, useJuxtastatColors } from '../page_template/colors'\nimport { Settings, useSetting } from '../page_template/settings'\nimport { getVector, VectorSettingsDictionary } from '../page_template/settings-vector'\nimport { allGroups, allYears, statParents, StatPath, StatName } from '../page_template/statistic-tree'\nimport { persistentClient } from '../utils/urbanstats-persistent-client'\n\nimport { AuthenticationStateMachine } from './AuthenticationStateMachine'\nimport { msRemaining, renderTimeRemaining } from './dates'\nimport { JuxtaQuestion, QuizDescriptor, QuizHistory, QuizQuestion, RetroQuestion, aCorrect, QuizFriends, nameOfQuizKind, QuizKind, QuizModel, QuizDescriptorWithTime } from './quiz'\nimport { ExportImport, Header, QuizAuthStatus, UserId } from './quiz-components'\nimport { QuizFriendsPanel } from './quiz-friends'\nimport { renderQuestion } from './quiz-question'\nimport { AudienceStatistics, Medal, ordinalThis, ourResultToDisplayForFriends, QuizStatistics } from './quiz-statistics'\nimport { getCachedPerQuestionStats, getPerQuestionStats, PerQuestionStats, reportToServer } from './statistics'\n\nexport type CorrectPattern = (boolean | 0 | 1)[]\n\nconst maxPerLine = 10\n\nconst authNagEntries = 10\n\ninterface QuizResultProps {\n    quizDescriptor: QuizDescriptor\n    todayName?: string\n    history: {\n        // eslint-disable-next-line no-restricted-syntax -- Persistent data\n        correct_pattern: CorrectPattern\n        choices: ('A' | 'B')[]\n    }\n    wholeHistory: QuizHistory\n    quiz: QuizQuestion[]\n}\n\nexport function QuizResult(props: QuizResultProps): ReactNode {\n    const button = useRef<HTMLButtonElement>(null)\n    const [stats, setStats] = useState<PerQuestionStats>((\n        props.quizDescriptor.kind === 'custom' || props.quizDescriptor.kind === 'infinite'\n            ? undefined\n            : getCachedPerQuestionStats(props.quizDescriptor)\n    ) ?? { total: 0, per_question: [0, 0, 0, 0, 0] })\n    const quizFriends = QuizModel.shared.friends.use()\n\n    const setQuizFriends = (qf: QuizFriends): void => {\n        QuizModel.shared.friends.value = qf\n    }\n\n    useEffect(() => {\n        // TODO stats for infinite quiz\n        if (props.quizDescriptor.kind === 'custom') {\n            return\n        }\n        void reportToServer(props.wholeHistory, props.quizDescriptor.kind)\n        if (props.quizDescriptor.kind === 'infinite') {\n            return\n        }\n        void getPerQuestionStats(props.quizDescriptor).then(setStats)\n    }, [props.wholeHistory, props.quizDescriptor])\n\n    const correctPattern = props.history.correct_pattern\n\n    const authError = QuizModel.shared.authenticationError.use()\n\n    const dismiss = QuizModel.shared.dismissAuthNag.use() !== null\n\n    const authState = AuthenticationStateMachine.shared.useState()\n\n    const nagSignIn = !dismiss && authState.state === 'signedOut' && Object.keys(props.wholeHistory).length >= authNagEntries\n\n    const colors = useColors()\n\n    return (\n        <div>\n            <Header quiz={props.quizDescriptor} />\n            <div className=\"gap\"></div>\n            {authError\n                ? (\n                        <NotificationBanner>\n                            <b>\n                                Warning! Someone is possibly attempting to hijack your account.\n                                Please contact us at security@urbanstats.org, and send your persistent ID.\n                            </b>\n                        </NotificationBanner>\n                    )\n                : undefined}\n            {nagSignIn && !authError\n                ? (\n                        <NotificationBanner>\n                            <div>\n                                <QuizAuthStatus />\n                            </div>\n                            <div role=\"button\" title=\"Dismiss\" onClick={() => QuizModel.shared.dismissAuthNag.value = Date.now()}>\n                                <Icon size=\"1em\" color={colors.textMain} src=\"/close.png\" style={{ display: 'inline-block' }} />\n                            </div>\n                        </NotificationBanner>\n                    )\n                : undefined}\n            <Summary correctPattern={correctPattern} quizKind={props.quizDescriptor.kind} />\n            <div className=\"gap_small\"></div>\n            <ShareButton\n                buttonRef={button}\n                todayName={props.todayName}\n                correctPattern={correctPattern}\n                quizKind={props.quizDescriptor.kind}\n                medal={props.quizDescriptor.kind === 'infinite' ? ordinalThis(props.quizDescriptor, props.wholeHistory) : undefined}\n            />\n            <div className=\"gap\" />\n            <div className=\"gap\"></div>\n            {stats.total > 30\n                ? (\n                        <div>\n                            <AudienceStatistics total={stats.total} perQuestion={stats.per_question} />\n                            <div className=\"gap\"></div>\n                            <div className=\"gap\"></div>\n                        </div>\n                    )\n                : undefined}\n            {\n                props.quizDescriptor.kind === 'custom' || props.quizDescriptor.kind === 'infinite'\n                    ? undefined\n                    : <TimeToNextQuiz quiz={props.quizDescriptor} />\n            }\n            {\n                props.quizDescriptor.kind === 'infinite'\n                    ? <JuxtastatInfiniteButton />\n                    : undefined\n            }\n            <div className=\"gap\"></div>\n            <QuizStatistics wholeHistory={props.wholeHistory} quiz={props.quizDescriptor} />\n            <div className=\"gap\"></div>\n            <span className=\"serif quiz_summary\">Details (spoilers, don&apos;t share!)</span>\n            <div className=\"gap_small\"></div>\n            {props.quiz.map(\n                (quiz, index) => (\n                    <QuizResultRow\n                        question={quiz}\n                        key={index}\n                        index={index}\n                        choice={props.history.choices[index]}\n                        correct={correctPattern[index]}\n                    />\n                ),\n            )}\n            <div className=\"gap_small\"></div>\n            {\n                // TODO stats for infinite quiz\n                props.quizDescriptor.kind === 'custom'\n                    ? undefined\n                    : (\n                            <div style={{ margin: 'auto', width: '100%', maxWidth: '500px' }}>\n                                <QuizFriendsPanel\n                                    quizFriends={quizFriends}\n                                    quizDescriptor={props.quizDescriptor}\n                                    setQuizFriends={setQuizFriends}\n                                    myResult={\n                                        props.quizDescriptor.kind === 'infinite'\n                                            ? ourResultToDisplayForFriends(props.quizDescriptor, props.wholeHistory)\n                                            : { corrects: correctPattern }\n                                    }\n                                />\n                            </div>\n                        )\n            }\n            <div className=\"gap_small\"></div>\n            <div className=\"centered_text serif\">\n                <UserId />\n                <ExportImport />\n            </div>\n            <OtherQuizzesButtons />\n        </div>\n    )\n}\n\nfunction NotificationBanner(props: { children: ReactNode }): ReactNode {\n    const colors = useColors()\n    return (\n        <>\n            <div\n                className=\"serif\"\n                style={{\n                    backgroundColor: colors.slightlyDifferentBackgroundFocused, width: '75%', margin: 'auto',\n                    fontSize: '1.5em',\n                    padding: '0.5em',\n                    textAlign: 'center',\n                    borderRadius: '5px',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-evenly',\n                }}\n            >\n                {props.children}\n            </div>\n            <div className=\"gap\" />\n        </>\n    )\n}\n\ninterface ShareButtonProps {\n    buttonRef: React.RefObject<HTMLButtonElement>\n    todayName: string | undefined\n    correctPattern: CorrectPattern\n    quizKind: QuizKind\n    medal?: Medal\n}\n\nfunction ShareButton(props: ShareButtonProps): ReactNode {\n    const [compactRepr] = useSetting('juxtastatCompactEmoji')\n    const asb = <ActualShareButton {...props} compactRepr={compactRepr} />\n    if (props.correctPattern.length <= maxPerLine) {\n        return asb\n    }\n    return (\n        <div>\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\n                <CheckboxSetting\n                    name=\"Compact emoji representation\"\n                    settingKey=\"juxtastatCompactEmoji\"\n                    testId=\"juxtastatCompactEmoji\"\n                />\n            </div>\n            <div className=\"gap_small\"></div>\n            {asb}\n        </div>\n    )\n}\n\nfunction ActualShareButton({ buttonRef, todayName, correctPattern, quizKind, medal, compactRepr }: (ShareButtonProps & { compactRepr: boolean })): ReactNode {\n    const juxtaColors = useJuxtastatColors()\n    const produceSummary = (): Promise<[string, string]> => summary(juxtaColors, todayName, correctPattern, quizKind, medal, compactRepr)\n    return <GenericShareButton buttonRef={buttonRef} produceSummary={produceSummary} />\n}\n\nfunction TimeToNextQuiz({ quiz }: { quiz: QuizDescriptorWithTime }): ReactNode {\n    const colors = useColors()\n    const [, setTime] = useState(0)\n    useEffect(() => {\n        const interval = setInterval(() => { setTime(time => time + 1) }, 1000)\n        return () => { clearInterval(interval) }\n    })\n\n    const w = quiz.kind === 'juxtastat' ? '5em' : '6.5em'\n\n    const timerStyle: CSSProperties = {\n        width: w,\n        margin: 0,\n        backgroundColor: colors.hueColors.blue,\n        textAlign: 'center',\n        fontSize: '2em',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'row',\n        padding: '0.25em 0.25em',\n        borderRadius: '0.25em',\n        border: 'none',\n        color: colors.buttonTextWhite,\n    }\n\n    const navigator = useContext(Navigator.Context)\n\n    let contents: ReactNode\n\n    if (msRemaining(quiz) < 0 && navigator.currentDescriptor.kind === 'quiz') {\n        contents = (\n            <a\n                {...navigator.link({\n                    kind: 'quiz',\n                    mode: quiz.kind === 'retrostat' ? 'retro' : undefined,\n                    date: navigator.currentDescriptor.date !== undefined ? navigator.currentDescriptor.date + 1 : undefined,\n                }, { scroll: { kind: 'position', top: 0 } })}\n                style={{ textDecoration: 'none' }}\n            >\n                <div\n                    className=\"serif\"\n                    style={{\n                        ...timerStyle,\n                        width: undefined,\n                        padding: '0.25em 1em',\n                    }}\n                >\n                    Next Quiz\n                </div>\n            </a>\n        )\n    }\n    else {\n        contents = (\n            <>\n                <div className=\"serif quiz_summary\" style={{ margin: 'auto 0' }}>Next quiz in </div>\n                <div\n                    className=\"serif\"\n                    style={timerStyle}\n                >\n                    <span>{renderTimeRemaining(quiz)}</span>\n                </div>\n            </>\n        )\n    }\n\n    return (\n        <div\n            style={{ margin: 'auto' }}\n            id=\"quiz-timer\"\n        >\n            <div style={{\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'center',\n                alignItems: 'flex-center',\n                flexWrap: 'wrap',\n                gap: '1em',\n            }}\n            >\n                {contents}\n            </div>\n        </div>\n    )\n}\n\nfunction juxtaSummary(correctPattern: CorrectPattern): [string, string] {\n    let show = 'error'\n    const total = correctPattern.length\n    const correct = correctPattern.reduce((partialSum: number, a) => partialSum + (a ? 1 : 0), 0)\n    const incorrect = total - correct\n\n    if (correct === 0) {\n        show = 'Impressively Bad Job! 🤷'\n    }\n    else if (incorrect === 0) {\n        show = 'Perfect! 🔥'\n    }\n    else if (correct === 1) {\n        show = 'No! No!! 😠'\n    }\n    else if (incorrect === 1) {\n        show = 'Excellent! 😊'\n    }\n    else if (incorrect === 2) {\n        show = 'Good! 🙃'\n    }\n    else {\n        show = 'Better luck next time! 🫤'\n    }\n    return [show, `${correct}/${total}`]\n}\n\nfunction infiniteSummary(correctPattern: CorrectPattern): [string, string] {\n    const correct = correctPattern.reduce((partialSum: number, a) => partialSum + (a ? 1 : 0), 0)\n    const pattern = `${correct}/∞`\n    if (correct < 10) {\n        return ['You can do better! 🤷', pattern]\n    }\n    if (correct < 20) {\n        return ['Not bad! 🫤', pattern]\n    }\n    if (correct < 30) {\n        return ['Good job! 🙃', pattern]\n    }\n    if (correct < 40) {\n        return ['Great! 😊', pattern]\n    }\n    return ['Amazing! 🔥', pattern]\n}\n\nfunction summaryTexts(correctPattern: CorrectPattern, quizKind: QuizKind): [string, string] {\n    switch (quizKind) {\n        case 'juxtastat':\n        case 'retrostat':\n        case 'custom':\n            return juxtaSummary(correctPattern)\n        case 'infinite':\n            return infiniteSummary(correctPattern)\n    }\n}\n\nexport function Summary(props: { correctPattern: CorrectPattern, quizKind: QuizKind }): ReactNode {\n    const [compactRepr] = useSetting('juxtastatCompactEmoji')\n    const juxtaColors = useJuxtastatColors()\n    const [prefix, summaryText] = summaryTexts(props.correctPattern, props.quizKind)\n    const show = `${prefix} ${summaryText}`\n    return (\n        <div>\n            <span className=\"serif quiz_summary\" id=\"quiz-result-summary-words\">{show}</span>\n            <div id=\"quiz-result-summary-emoji\">\n                {\n                    redAndGreenSquares(juxtaColors, props.correctPattern, compactRepr).map((line, index) => (\n                        <div className=\"serif quiz_summary\" key={index}>{line}</div>\n                    ))\n                }\n            </div>\n        </div>\n    )\n}\n\nfunction renderMedalAsString(medal: Medal): string {\n    return ['🥇 Personal Best!', '🥈 Personal 2nd Best!', '🥉 Personal 3rd Best!'][medal - 1]\n}\n\nexport async function summary(juxtaColors: JuxtastatColors, todayName: string | undefined, correctPattern: CorrectPattern, quizKind: QuizKind, medal: Medal | undefined, compactRepr: boolean): Promise<[string, string]> {\n    // wordle-style summary\n    const [, summaryText] = summaryTexts(correctPattern, quizKind)\n    let text = nameOfQuizKind(quizKind)\n    if (todayName !== undefined) {\n        text += ` ${todayName}`\n    }\n    text += ` ${summaryText}`\n\n    text += '\\n'\n    text += '\\n'\n\n    text += redAndGreenSquares(juxtaColors, correctPattern, compactRepr).join('\\n')\n\n    if (medal !== undefined) {\n        text += '\\n'\n        text += '\\n'\n        text += renderMedalAsString(medal)\n    }\n\n    text += '\\n'\n\n    // eslint-disable-next-line no-restricted-syntax -- Sharing\n    const hash = window.location.hash\n    let url = `https://juxtastat.org${hash === '' ? '' : `/${hash}`}`\n    if (hash.length > 40) {\n        // current url is too long, shorten it. get the current url without the origin or slash\n        // eslint-disable-next-line no-restricted-syntax -- Sharing\n        const thisURL = window.location.href.substring(window.location.origin.length + 1)\n        const { data } = await persistentClient.POST('/shorten', {\n            body: { full_text: thisURL },\n        })\n        if (data === undefined) {\n            throw new Error('Error while shortening')\n        }\n        url = `https://s.urbanstats.org/s?c=${data.shortened}`\n    }\n    return [text, url]\n}\n\nfunction QuizResultRow(props: QuizResultRowProps & { question: QuizQuestion }): ReactNode {\n    switch (props.question.kind) {\n        case 'juxtastat':\n            return <JuxtastatQuizResultRow {...props} question={props.question} />\n        case 'retrostat':\n            return <RetrostatQuizResultRow {...props} question={props.question} />\n    }\n}\n\ninterface QuizResultRowProps {\n    question: QuizQuestion\n    choice: 'A' | 'B'\n    correct: boolean | 0 | 1\n    index: number\n}\n\ninterface GenericQuizResultRowProps extends QuizResultRowProps {\n    getLabel: () => ReactNode\n    getOption: (letter: 'a' | 'b') => ReactNode\n    getStat: (letter: 'a' | 'b') => ReactNode\n}\n\nexport function GenericQuizResultRow(props: GenericQuizResultRowProps): ReactNode {\n    const colors = useColors()\n    const juxtaColors = useJuxtastatColors()\n    const comparison = aCorrect(props.question)\n        ? (<span>&gt;</span>)\n        : (<span>&lt;</span>)\n    let firstStyle: React.CSSProperties = {}\n    let secondStyle: React.CSSProperties = {}\n\n    if (props.choice === 'A') {\n        firstStyle = { backgroundColor: colors.selectedButton, color: colors.selectedButtonText }\n    }\n    else {\n        secondStyle = { backgroundColor: colors.selectedButton, color: colors.selectedButtonText }\n    }\n    const result = props.correct ? juxtaColors.correctEmoji : juxtaColors.incorrectEmoji\n\n    return (\n        <div key={props.index}>\n            {props.getLabel()}\n            <table\n                className=\"stats_table\"\n                style={{\n                    width: '80%',\n                    marginLeft: '10%',\n                    marginRight: '10%',\n                    borderCollapse: 'separate',\n                    borderSpacing: '0.1em',\n                    fontSize: '1.25em',\n                    backgroundColor: colors.unselectedButton,\n                }}\n            >\n                <tbody style={{ color: colors.textMain }}>\n                    <tr>\n                        <td className=\"serif quiz_result_name_left\" style={firstStyle}>\n                            {props.getOption('a')}\n                        </td>\n                        <td style={{ fontWeight: 400 }} className=\"serif quiz_result_value_left\">\n                            {props.getStat('a')}\n                        </td>\n                        <td className=\"serif quiz_result_symbol quiz_result_comparison_symbol\">\n                            {comparison}\n                        </td>\n                        <td style={{ fontWeight: 400 }} className=\"serif quiz_result_value_right\">\n                            {props.getStat('b')}\n                        </td>\n                        <td className=\"serif quiz_result_name_right\" style={secondStyle}>\n                            {props.getOption('b')}\n                        </td>\n                        <td className=\"serif quiz_result_symbol\">\n                            {result}\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            <div className=\"gap_small\" />\n        </div>\n\n    )\n}\n\nfunction Value({ stat, statColumn }: { stat: number, statColumn: StatName | '%' }): ReactNode {\n    return (\n        <span>\n            <Statistic\n                statname={statColumn}\n                value={stat}\n                isUnit={false}\n            />\n            <Statistic\n                statname={statColumn}\n                value={stat}\n                isUnit={true}\n            />\n        </span>\n    )\n}\n\nfunction JuxtastatQuizResultRow(props: QuizResultRowProps & { question: JuxtaQuestion }): ReactNode {\n    return (\n        <ComparisonLink question={props.question}>\n            <GenericQuizResultRow\n                {...props}\n                getLabel={() => (\n                    <span className=\"serif quiz_results_question\">\n                        {props.question.stat_column}\n                    </span>\n                )}\n                getOption={letter => props.question[`longname_${letter}`]}\n                getStat={stat => <Value stat={props.question[`stat_${stat}`]} statColumn={props.question.stat_column} />}\n            />\n        </ComparisonLink>\n    )\n}\n\nfunction RetrostatQuizResultRow(props: QuizResultRowProps & { question: RetroQuestion }): ReactNode {\n    return (\n        <GenericQuizResultRow\n            {...props}\n            getLabel={() => (\n                <span className=\"serif quiz_results_question\">\n                    Juxtastat Users Who Got This Question Right %\n                </span>\n            )}\n            getOption={(letter) => {\n                const style = letter === 'a' ? { marginLeft: '20%' } : { marginRight: '20%' }\n                const q = props.question[letter]\n                return (\n                    <ComparisonLink question={q}>\n                        <div style={{ zoom: 0.5 }}>\n                            <div>{renderQuestion(q.question)}</div>\n                            <div style={style}>\n                                <div>\n                                    {q.longname_a}\n                                    {' '}\n                                    <Value stat={q.stat_a} statColumn={q.stat_column} />\n                                </div>\n                                <div>\n                                    {q.longname_b}\n                                    {' '}\n                                    <Value stat={q.stat_b} statColumn={q.stat_column} />\n                                </div>\n                            </div>\n                        </div>\n                    </ComparisonLink>\n                )\n            }}\n            getStat={stat => <Value stat={props.question[`${stat}_ease`]} statColumn=\"%\" />}\n        />\n    )\n}\n\nfunction ComparisonLink({ question, children }: { question: JuxtaQuestion, children: ReactNode }): ReactNode {\n    const navContext = useContext(Navigator.Context)\n    const settings = useContext(Settings.Context)\n    const colors = useColors()\n    return (\n        <a\n            {...navContext.link({\n                kind: 'comparison',\n                longnames: [question.longname_a, question.longname_b],\n                s: getVector(settings, settingsOverrides(question.stat_path)),\n            }, { scroll: { kind: 'position', top: 0 } })}\n            style={{ textDecoration: 'none', color: colors.textMain }}\n        >\n            {children}\n\n        </a>\n    )\n}\n\nfunction settingsOverrides(questionStatPath?: StatPath): Partial<VectorSettingsDictionary> | undefined {\n    if (questionStatPath === undefined) {\n        // Old question, doesnt' have stat path\n        return undefined\n    }\n    const parents = statParents.get(questionStatPath)\n    if (parents === undefined) {\n        // Unknown stat path, possible one that has been removed\n        return undefined\n    }\n    const categoryId = parents.group.parent.id\n    const year = parents.year\n\n    return Object.fromEntries([\n        ...allGroups.map(group => [`show_stat_group_${group.id}`, group.parent.id === categoryId] as const),\n        ...(year !== null ? allYears.map(y => [`show_stat_year_${y}`, y === year] as const) : []),\n    ])\n}\n\nfunction emojiForCount(count: number): string[] {\n    if (count >= 10) {\n        return [...emojiForCount(Math.floor(count / 10)), ...emojiForCount(count % 10)]\n    }\n    switch (count) {\n        case 0:\n            return ['0️⃣']\n        case 1:\n            return ['1️⃣']\n        case 2:\n            return ['2️⃣']\n        case 3:\n            return ['3️⃣']\n        case 4:\n            return ['4️⃣']\n        case 5:\n            return ['5️⃣']\n        case 6:\n            return ['6️⃣']\n        case 7:\n            return ['7️⃣']\n        case 8:\n            return ['8️⃣']\n        case 9:\n            return ['9️⃣']\n    }\n    throw new Error(`unexpected count ${count}`)\n}\n\nfunction toCompactRepresentation(correctPattern: CorrectPattern, correct: string, incorrect: string): string[] {\n    // RRGGG -> R<emoji 2>G<emoji 3>\n    const result: string[][] = [[]]\n    let currentSymbol: boolean | undefined = undefined\n    let currentCount = 0\n\n    const add = (symbol: boolean | undefined, count: number): void => {\n        if (symbol === undefined) {\n            return\n        }\n        const last = result[result.length - 1]\n        last.push(symbol ? correct : incorrect)\n        if (count > 1) {\n            last.push(...emojiForCount(count))\n        }\n        if (last.length >= maxPerLine) {\n            result.push([])\n        }\n    }\n\n    for (const x of correctPattern.map(t => t ? true : false)) {\n        if (x === currentSymbol) {\n            currentCount += 1\n        }\n        else {\n            add(currentSymbol, currentCount)\n            currentSymbol = x\n            currentCount = 1\n        }\n    }\n    add(currentSymbol, currentCount)\n    return result.map(line => line.join(''))\n}\n\nexport function redAndGreenSquares(juxtaColors: JuxtastatColors, correctPattern: CorrectPattern, compactRepr: boolean): string[] {\n    if (compactRepr && correctPattern.length > maxPerLine) {\n        return toCompactRepresentation(correctPattern, juxtaColors.correctEmoji, juxtaColors.incorrectEmoji)\n    }\n    if (correctPattern.length > maxPerLine) {\n        const lines = []\n        for (let i = 0; i < correctPattern.length; i += maxPerLine) {\n            lines.push(redAndGreenSquares(juxtaColors, correctPattern.slice(i, i + maxPerLine), compactRepr)[0])\n        }\n        return lines\n    }\n    return [\n        correctPattern.map(function (x) {\n            // red square emoji for wrong, green for right\n            return x ? juxtaColors.correctEmoji : juxtaColors.incorrectEmoji\n        }).join(''),\n    ]\n}\n","import React, { CSSProperties, ReactNode, useContext, useEffect, useMemo, useState } from 'react'\n\nimport { Navigator } from '../navigation/Navigator'\nimport { loadPageDescriptor, PageData, PageDescriptor } from '../navigation/PageDescriptor'\nimport { LongLoad } from '../navigation/loading'\nimport { useColors } from '../page_template/colors'\nimport { Settings } from '../page_template/settings'\nimport { PageTemplate } from '../page_template/template'\nimport '../common.css'\nimport './quiz.css'\nimport { AuthenticationStateMachine } from '../quiz/AuthenticationStateMachine'\nimport { SignedOutPanel } from '../quiz/SignedOutPanel'\nimport { validQuizInfiniteVersions } from '../quiz/infinite'\nimport { QuizDescriptor, QuizHistory, QuizModel, QuizQuestion, QuizQuestionsModel, aCorrect, getCorrectPattern, nameOfQuizKind } from '../quiz/quiz'\nimport { QuizQuestionDispatch } from '../quiz/quiz-question'\nimport { QuizResult } from '../quiz/quiz-result'\nimport { useHeaderTextClass } from '../utils/responsive'\n\nimport { buttonStyle } from './GenericShareButton'\n\nexport function QuizPanel(props: { quizDescriptor: QuizDescriptor, todayName?: string, todaysQuiz: QuizQuestionsModel }): ReactNode {\n    // set a unique key for the quiz panel so that it will re-render when the quiz changes\n    // this is necessary because the quiz panel is a stateful component with all the questions cached.\n    return (\n        <QuizPanelNoResets\n            key={props.todaysQuiz.uniqueKey}\n            quizDescriptor={props.quizDescriptor}\n            todayName={props.todayName}\n            todaysQuiz={props.todaysQuiz}\n        />\n    )\n}\n\nfunction QuizPanelNoResets(props: { quizDescriptor: QuizDescriptor, todayName?: string, todaysQuiz: QuizQuestionsModel }): ReactNode {\n    // We don't want to save certain quiz types, so bypass the persistent store for those\n    const headerClass = useHeaderTextClass()\n    const colors = useColors()\n    const persistentQuizHistory = QuizModel.shared.history.use()\n    const [transientQuizHistory, setTransientQuizHistory] = useState<QuizHistory>({})\n\n    let quizHistory: QuizHistory\n    let setQuizHistory: (newQuizHistory: QuizHistory) => void\n    switch (props.quizDescriptor.kind) {\n        case 'juxtastat':\n        case 'retrostat':\n        case 'infinite':\n            quizHistory = persistentQuizHistory\n            setQuizHistory = newHistory => QuizModel.shared.history.value = newHistory\n            break\n        case 'custom':\n            quizHistory = transientQuizHistory\n            setQuizHistory = (newHistory) => { setTransientQuizHistory(newHistory) }\n            break\n    }\n\n    const [waitingForTime, setWaitingForTime] = useState(false)\n    const [waitingForNextQuestion, setWaitingForNextQuestion] = useState(false)\n    const [questions, setQuestions] = useState<QuizQuestion[]>([])\n\n    const authState = AuthenticationStateMachine.shared.useState()\n\n    if (authState.state === 'signedOut' && authState.email !== null) {\n        return <SignedOutPanel />\n    }\n\n    if (props.quizDescriptor.kind === 'infinite' && !(validQuizInfiniteVersions satisfies number[] as number[]).includes(props.quizDescriptor.version)) {\n        // TODO this should not come up if you've already done the quiz (only relevant once we add the stats)\n        return (\n            <PageTemplate>\n                <div>\n                    <div className={headerClass}>Quiz version mismatch</div>\n                    <div style={{\n                        width: '50%',\n                        margin: 'auto',\n                        backgroundColor: colors.slightlyDifferentBackgroundFocused,\n                        padding: '1em',\n                        fontWeight: 'bold',\n                    }}\n                    >\n                        Juxtastat generation has been updated, so infinite Juxtastat you are trying to access is no longer available.\n                    </div>\n                    <div style={{ height: '1.5em' }} />\n                    <OtherQuizzesButtons />\n                </div>\n            </PageTemplate>\n        )\n    }\n\n    const todaysQuizHistory = quizHistory[props.quizDescriptor.name] ?? { choices: [], correct_pattern: [] }\n\n    const quizDone = props.todaysQuiz.isDone(getCorrectPattern(quizHistory, props.quizDescriptor.name))\n    const questionsExpected = quizDone ? todaysQuizHistory.choices.length : todaysQuizHistory.choices.length + 1\n    const missing = questionsExpected - questions.length\n    const waiting = waitingForTime || waitingForNextQuestion || missing > 0\n\n    if (!waitingForNextQuestion && missing > 0) {\n        setWaitingForNextQuestion(true)\n        const promises = Array.from({ length: missing }, (_, i) => props.todaysQuiz.questionByIndex(questions.length + i))\n        Promise.all(promises).then((newQuestions) => {\n            setWaitingForNextQuestion(false)\n            setQuestions([...questions, ...newQuestions.filter((question): question is QuizQuestion => question !== undefined)])\n        }).catch((err: unknown) => {\n            console.error('Error fetching questions', err)\n            // setWaitingForNextQuestion(false)\n        })\n    }\n\n    const setTodaysQuizHistory = (historyToday: QuizHistory[string]): void => {\n        const newHistory = { ...quizHistory, [props.quizDescriptor.name]: historyToday }\n        setWaitingForTime(true)\n        setQuizHistory(newHistory)\n    }\n\n    const onSelect = (selected: 'A' | 'B'): void => {\n        if (waiting) {\n            return\n        }\n        const history = todaysQuizHistory\n        const idx = history.correct_pattern.length\n        const question = questions[idx]\n        history.choices.push(selected)\n        history.correct_pattern.push((selected === 'A') === aCorrect(question))\n        setTodaysQuizHistory(history)\n        setTimeout(() => { setWaitingForTime(false) }, 500)\n    }\n\n    return (\n        <PageTemplate>\n            {(() => {\n                const quiz = props.todaysQuiz\n                const history = todaysQuizHistory\n\n                let index = history.choices.length\n                if (waiting) {\n                    index -= 1\n                }\n\n                if (!waiting && quizDone) {\n                    return (\n                        <QuizResult\n                            // can only show results if the quiz is done\n                            quiz={questions}\n                            wholeHistory={quizHistory}\n                            history={history}\n                            todayName={props.todayName}\n                            quizDescriptor={props.quizDescriptor}\n                        />\n                    )\n                }\n\n                if (index < 0 || index >= questions.length) {\n                    const message = index < 0 ? 'Loading quiz...' : 'Loading results...'\n                    return (\n                        <div>\n                            <input type=\"hidden\" data-test-loading-quiz={true} />\n                            <div className={headerClass}>{message}</div>\n                            <LongLoad />\n                        </div>\n                    )\n                }\n\n                return (\n                    <QuizQuestionDispatch\n                        quiz={props.quizDescriptor}\n                        question={questions[index]}\n                        history={history}\n                        length={quiz.length ?? history.choices.length}\n                        onSelect={onSelect}\n                        waiting={waiting}\n                        nested={false}\n                        noHeader={false}\n                        noFooter={false}\n                    />\n                )\n            })()}\n        </PageTemplate>\n    )\n}\n\nexport function JuxtastatInfiniteButton(): ReactNode {\n    const colors = useColors()\n    const navContext = useContext(Navigator.Context)\n\n    return (\n        <a\n            style={{\n                ...buttonStyle(colors.hueColors.blue, colors.buttonTextWhite),\n                width: '30%',\n                textDecoration: 'none',\n            }}\n            {...navContext.link({ kind: 'quiz', mode: 'infinite' }, { scroll: { kind: 'position', top: 0 } })}\n        >\n            Random Juxtastat Infinite\n        </a>\n    )\n}\ntype QuizPageDescriptor = Extract<PageDescriptor, { kind: 'quiz' }>\ninterface TodoQuiz {\n    pageData: Extract<PageData, {\n        kind: 'quiz'\n    }>\n    newPageDescriptor: QuizPageDescriptor\n}\n\nexport function OtherQuizzesButtons(): ReactNode {\n    /**\n     * Show users other quizzes they haven't completed yet (and Juxtastat Infinite)\n     */\n\n    const colors = useColors()\n    const navContext = useContext(Navigator.Context)\n\n    const { current } = navContext.usePageState()\n    const currentQuizMode = current.descriptor.kind === 'quiz' ? current.descriptor.mode : 'notAQuiz'\n\n    const otherQuizPages: QuizPageDescriptor[] = useMemo(() => ([\n        { kind: 'quiz', mode: undefined },\n        { kind: 'quiz', mode: 'retro' },\n        { kind: 'quiz', mode: 'infinite' },\n    ] as const).filter(({ mode }) => mode !== currentQuizMode), [currentQuizMode])\n\n    const [todoQuizzes, setTodoQuizzes] = useState<TodoQuiz[]>([])\n\n    useEffect(() => {\n        let cancel = false\n\n        void (async () => {\n            const quizDatas = await Promise.all(otherQuizPages.map(pageDescriptor => loadPageDescriptor(pageDescriptor, Settings.shared)))\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- Prevents races\n            if (!cancel) {\n                setTodoQuizzes(\n                    quizDatas.filter(q =>\n                        q.newPageDescriptor.mode === 'infinite'\n                        || !q.pageData.quiz.isDone(\n                            getCorrectPattern(QuizModel.shared.history.value, q.pageData.quizDescriptor.name))))\n            }\n        })()\n\n        return () => { cancel = true }\n    }, [otherQuizPages])\n\n    const otherQuizButtonStyle: CSSProperties = {\n        ...buttonStyle(colors.hueColors.blue, colors.buttonTextWhite),\n        width: '30%',\n        textDecoration: 'none',\n    }\n\n    if (todoQuizzes.length === 0) {\n        return null\n    }\n\n    return (\n        <>\n            <div className=\"gap\"></div>\n            <div style={{\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'center',\n                alignItems: 'flex-center',\n                flexWrap: 'wrap',\n                gap: '1em',\n            }}\n            >\n                {todoQuizzes.map(quiz => (\n                    <a\n                        key={quiz.pageData.quizDescriptor.kind}\n                        style={otherQuizButtonStyle}\n                        {...navContext.link(quiz.newPageDescriptor, { scroll: { kind: 'position', top: 0 } })}\n                    >\n                        Play\n                        {' '}\n                        { nameOfQuizKind(quiz.pageData.quizDescriptor.kind) }\n                    </a>\n                ))}\n            </div>\n        </>\n    )\n}\n","import { QuizDescriptorWithTime } from './quiz'\n\nconst reference = new Date(2023, 8, 2) // 2023-09-02. 8 is September, since months are 0-indexed for some fucking reason\n\nlet offsetForTesting = 0\nconst debugMillis = parseInt(localStorage.getItem('debug_quiz_transition') ?? '0')\nif (debugMillis > 0) {\n    // Simulates the quiz being 10 seconds from ending\n    const startOfDay = new Date()\n    startOfDay.setHours(0, 0, 0, 0)\n    offsetForTesting = (startOfDay.valueOf() + (24 * 60 * 60 * 1000) - debugMillis) - Date.now()\n}\n\nexport function getDailyOffsetNumber(): number {\n    // fractional days since reference\n    // today's date without the time\n    const today = new Date(Date.now() + offsetForTesting)\n    today.setHours(0, 0, 0, 0)\n    let offset = (today.valueOf() - reference.valueOf()) / (1000 * 60 * 60 * 24)\n    // round to nearest day. this handles daylight savings time, since it's always a midnight-to-midnight comparison.\n    // E.g., if it's 9/3 at 1am, the offset will be 9/3 at 0am - 9/2 at 0am = 1 day, which is correct.\n    // Similarly, if it's 11/11 at 1am, the offset will be\n    //      11/11 at 0am [NO DST] - 9/2 at 0am [DST] = (30 + 31 + 9) days + 1 hour = 70 days + 1 hour\n    //      which rounded to the nearest day is 70 days, which is correct.\n    offset = Math.round(offset)\n    return offset\n}\n\nexport function getRetrostatOffsetNumber(): number {\n    const daily = getDailyOffsetNumber()\n    // 78 through 84 --> 0\n    return Math.floor((daily - 1) / 7) - 11\n}\n\nfunction dayStart(offset: number): Date {\n    const date = new Date(reference)\n    date.setDate(date.getDate() + offset)\n    return date\n}\n\nfunction dayEnd(offset: number): number {\n    const start = dayStart(offset)\n    start.setDate(start.getDate() + 1)\n    return start.valueOf()\n}\n\nfunction weekStart(weekId: string): Date {\n    // check that week_id is W + number\n    if (!weekId.startsWith('W')) {\n        throw new Error('week_id must start with W')\n    }\n    const weekNumber = parseInt(weekId.slice(1))\n    return dayStart((weekNumber + 11) * 7 + 1)\n}\n\nfunction weekEnd(weekId: string): number {\n    const start = weekStart(weekId)\n    start.setDate(start.getDate() + 7)\n    return start.valueOf()\n}\n\nfunction timeToEndOfDay(offset: number): number {\n    return dayEnd(offset) - Date.now() - offsetForTesting\n}\n\nfunction timeToEndOfWeek(weekId: string): number {\n    return weekEnd(weekId) - Date.now()\n}\n\nfunction renderTimeWithinDay(ms: number): string {\n    // render HH:MM:SS from ms. Make sure to pad with 0s.\n    const seconds = Math.floor(ms / 1000)\n    const minutes = Math.floor(seconds / 60)\n    const hours = Math.floor(minutes / 60)\n    const secondRemainder = seconds % 60\n    const minutesRemainder = minutes % 60\n    const hoursRemainder = hours % 24\n\n    const secondsString = secondRemainder.toString().padStart(2, '0')\n    const minutesString = minutesRemainder.toString().padStart(2, '0')\n    const hoursString = hoursRemainder.toString().padStart(2, '0')\n\n    return `${hoursString}:${minutesString}:${secondsString}`\n}\n\nfunction renderTimeWithinWeek(ms: number): string {\n    // render X days, HH:MM:SS from ms. Make sure to pad with 0s.\n    const msPerDay = 1000 * 60 * 60 * 24\n    const days = Math.floor(ms / msPerDay)\n    const withoutDays = ms % msPerDay\n    const timeString = renderTimeWithinDay(withoutDays)\n    // const s_if_plural = days === 1 ? '' : 's';\n    return `${days}d ${timeString}`\n}\n\nexport function msRemaining({ kind, name }: QuizDescriptorWithTime): number {\n    switch (kind) {\n        case 'juxtastat':\n            return timeToEndOfDay(name)\n        case 'retrostat':\n            return timeToEndOfWeek(name)\n    }\n}\n\nexport function renderTimeRemaining({ kind, name }: QuizDescriptorWithTime): string {\n    switch (kind) {\n        case 'juxtastat':\n            return renderTimeWithinDay(timeToEndOfDay(name))\n        case 'retrostat':\n            return renderTimeWithinWeek(timeToEndOfWeek(name))\n    }\n}\n","import { persistentClient } from '../utils/urbanstats-persistent-client'\n\nimport { AuthenticationStateMachine } from './AuthenticationStateMachine'\nimport { QuizModel } from './quiz'\n\nexport async function addFriend(friendID: string, friendName: string): Promise<undefined | { errorMessage: string, problemDomain: 'friendID' | 'friendName' | 'other' }> {\n    const user = QuizModel.shared.uniquePersistentId.value\n    const email = AuthenticationStateMachine.shared.state.email\n    const idOrEmail = 'Friend ID or Email'\n    if (friendID === '') {\n        return { errorMessage: `${idOrEmail} cannot be empty`, problemDomain: 'friendID' }\n    }\n    if (friendID === user) {\n        return { errorMessage: 'Friend ID cannot be your own ID', problemDomain: 'friendID' }\n    }\n    if (friendID === email) {\n        return { errorMessage: 'Friend Email cannot be your own Email', problemDomain: 'friendID' }\n    }\n    let dupFriend\n    if ((dupFriend = QuizModel.shared.friends.value.find(([name, id]) => name !== null && id === friendID))) {\n        return { errorMessage: `${idOrEmail} ${friendID} already exists as ${dupFriend[0]}`, problemDomain: 'friendID' }\n    }\n    if (friendName === '') {\n        return { errorMessage: 'Friend name cannot be empty', problemDomain: 'friendName' }\n    }\n    if (QuizModel.shared.friends.value.map(x => x[0]).includes(friendName)) {\n        return { errorMessage: 'Friend name already exists', problemDomain: 'friendName' }\n    }\n    try {\n        const { response, error } = await persistentClient.POST('/juxtastat/friend_request', {\n            body: { requestee: friendID },\n            params: {\n                header: QuizModel.shared.userHeaders(),\n            },\n        })\n\n        if (response.status === 422) {\n            return { errorMessage: `Invalid ${idOrEmail}`, problemDomain: 'friendID' }\n        }\n        if (error !== undefined) {\n            return { errorMessage: 'Unknown Error', problemDomain: 'other' }\n        }\n\n        QuizModel.shared.friends.value = [...QuizModel.shared.friends.value.filter(([,id]) => id !== friendID), [friendName, friendID, Date.now()]]\n        return undefined\n    }\n    catch {\n        return { errorMessage: 'Network Error', problemDomain: 'other' }\n    }\n}\n\nexport async function addFriendFromLink(friendID: string, friendName: string): Promise<void> {\n    const result = await addFriend(friendID, friendName)\n    if (result === undefined) {\n        alert(`Friend added: ${friendName} !`)\n    }\n    else {\n        if (result.problemDomain === 'friendName') {\n            const newFriendName = prompt(`Could not add friend: ${result.errorMessage}\\n\\nPlease correct the friend name:`, friendName)\n            if (newFriendName !== null) {\n                await addFriendFromLink(friendID, newFriendName.trim())\n            }\n        }\n        else {\n            alert(`Could not add friend: ${result.errorMessage}`)\n        }\n    }\n}\n"],"names":["GenericShareButton","props","_navigator_canShare1","colors","useColors","canShare","isShare","isMobile","isFirefox","buttonStyle","_ref","text","url","copyToClipboard","navigator","a","color","textColor","Icon","param","size","src","style","SignedOutPanel","startSignIn","AuthenticationStateMachine","authState","ErrorBox","Header","quiz","nameOfQuizKind","useHeaderTextClass","Footer","juxtaColors","useJuxtastatColors","footerColors","correct","x","i","Help","juxtaInfiniteCorrectForBonus","UserId","ExportImport","user","QuizModel","QuizAuthStatus","state","e","Map","computeShapesToRender","Promise","MapGeneric","QuizQuestionDispatch","RetroQuizQuestion","JuxtastatQuizQuestion","Error","QuizQuestion","buttonA","buttonB","choices","pattern","choice","cssClass","question","rowStyle","quizTextCSS","useMobileLayout","undefined","JuxtastatLivesDisplay","letter","key","keyUpper","aCorrect","renderQuestion","questionString","questionText","_questionText_split","tooltip","Tooltip","_React_useState","show","setShow","__assign","Object","t","s","n","arguments","p","__rest","grid","createAnimation","random","top","Math","_a","_b","_c","_d","speedMultiplier","_e","_f","_g","margin","additionalprops","sizeWithUnit","parseLengthAndUnit","marginWithUnit","width","parseFloat","wrapper","rand","cssValue","React","ref","node","QuizFriendsPanel","_useState","friendScores","setFriendScores","_useState1","isLoading","setIsLoading","_useState2","error","setError","secureID","useEffect","friends","quizIDtoName","requesters","friendScoresResponse","quizDescriptor","name","id","persistentClient","date","parseTimeIdentifier","idx","allResults","content","InfiniteHeader","PlayerScore","friendScore","FriendScore","newQuizFriends","tuple","Date","AddFriend","spinnerSize","WithError","MoonLoader","scoreCorrectHeight","addFriendHeight","FriendScoreCorrects","playerName","_AuthenticationStateMachine_shared_state_email","hash","prompt","urlFromPageDescriptor","alert","_props_friendScore_name","loading","setLoading","row","EditableString","GridLoader","navContext","useContext","Navigator","border","greyedOut","mixWithBackground","_Math","_Math1","_props_result_forThisSeed","_props_result_maxScore","link","relevantOtherResults","baseStyle","maxMaxScore","_x_maxScore","maxForThisSeed","_x_forThisSeed","corrects","friendNameField","setFriendNameField","friendIDField","setFriendIDField","_useState3","form","friendID","friendName","result","addFriend","QuizStatistics","QuizStatisticsForTimedStatistics","QuizStatisticsForInfinite","today","historicalCorrect","Array","frequencies","playedGames","histI","history","amount","partialSum","maxStreaks","val","maxStreak","currentStreak","totalFreq","statistics","DisplayedStats","amt","AudienceStatistics","total","perQuestion","stat","DisplayedStat","number","additionalClass","onClick","juxtastatInfiniteDisplay","wholeHistory","sortedIndicesAll","currentOrdinal","currentVal","ordinals","mask","sortedIndicesFilt","_getInfiniteQuizzes","seedVersions","numCorrects","keys","thisIndex","seed","version","_computeOrdinalsAndIndices","b","index","_","sortedIndices","_juxtastatInfiniteDisplay","QuizResult","bestIndex","button","useRef","getCachedPerQuestionStats","stats","setStats","quizFriends","reportToServer","getPerQuestionStats","correctPattern","authError","dismiss","nagSignIn","NotificationBanner","Summary","ShareButton","ordinalThis","thisOrdinal","TimeToNextQuiz","JuxtastatInfiniteButton","QuizResultRow","qf","OtherQuizzesButtons","compactRepr","_useSetting","asb","ActualShareButton","CheckboxSetting","buttonRef","todayName","quizKind","medal","summaryText","thisURL","data","_summaryTexts","redAndGreenSquares","window","contents","setTime","interval","setInterval","time","clearInterval","timerStyle","msRemaining","renderTimeRemaining","summaryTexts","incorrect","prefix","line","JuxtastatQuizResultRow","RetrostatQuizResultRow","GenericQuizResultRow","comparison","firstStyle","secondStyle","Value","statColumn","Statistic","ComparisonLink","q","children","settings","Settings","getVector","settingsOverrides","questionStatPath","parents","statParents","categoryId","year","allGroups","group","allYears","y","toCompactRepresentation","currentSymbol","currentCount","add","symbol","count","last","_last","emojiForCount","_iteratorError","lines","QuizPanel","QuizPanelNoResets","quizHistory","setQuizHistory","_quizHistory_props_quizDescriptor_name","headerClass","persistentQuizHistory","transientQuizHistory","setTransientQuizHistory","newHistory","waitingForTime","setWaitingForTime","waitingForNextQuestion","setWaitingForNextQuestion","questions","setQuestions","validQuizInfiniteVersions","PageTemplate","todaysQuizHistory","quizDone","getCorrectPattern","missing","questionsExpected","waiting","newQuestions","err","console","setTodaysQuizHistory","historyToday","onSelect","selected","setTimeout","_quiz_length","message","LongLoad","current","currentQuizMode","otherQuizPages","useMemo","mode","todoQuizzes","setTodoQuizzes","cancel","quizDatas","pageDescriptor","loadPageDescriptor","otherQuizButtonStyle","_localStorage_getItem","reference","offsetForTesting","debugMillis","parseInt","startOfDay","getDailyOffsetNumber","offset","getRetrostatOffsetNumber","daily","dayStart","timeToEndOfDay","start","dayEnd","timeToEndOfWeek","weekId","weekEnd","weekStart","weekNumber","renderTimeWithinDay","ms","seconds","minutes","hours","secondsString","secondRemainder","minutesString","minutesRemainder","hoursString","hoursRemainder","kind","days","timeString","addFriendFromLink","newFriendName","email","idOrEmail","dupFriend","response"],"mappings":"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"}