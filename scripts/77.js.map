{"version":3,"file":"77.js","sources":["webpack://assets/./src/mapper/style.ts","webpack://assets/./src/utils/bitap-selector.ts","webpack://assets/./src/mapper/settings/BetterSelector.tsx","webpack://assets/./src/utils/bitap.ts","webpack://assets/./src/mapper/settings/SelectionContext.ts","webpack://assets/./src/mapper/settings/CustomEditor.tsx","webpack://assets/./src/mapper/settings/Selector.tsx","webpack://assets/./src/mapper/settings/AutoUXEditor.tsx","webpack://assets/./src/mapper/settings/ConditionEditor.tsx","webpack://assets/./src/mapper/settings/PreambleEditor.tsx","webpack://assets/./src/mapper/settings/utils.ts","webpack://assets/./src/mapper/settings/TopLevelEditor.tsx","webpack://assets/./src/mapper/settings/MapperSettings.tsx","webpack://assets/./src/components/mapper-panel.tsx","webpack://assets/./src/data/universes_ordered.ts","webpack://assets/./src/utils/Property.ts"],"sourcesContent":["import { useColors } from '../page_template/colors'\n\nexport const settingNameStyle = {\n    fontWeight: 500,\n    fontSize: '1.2em',\n    marginBottom: '0.125em',\n    marginTop: '0.25em',\n}\n\nexport const useSettingSubNameStyle = (): React.CSSProperties => ({\n    fontWeight: 500,\n    fontSize: '1em',\n    marginBottom: '0.125em',\n    color: useColors().ordinalTextColor,\n})\n","/**\n * Finds the minimum number of edits between `haystack` and some `needle` in `haystack`\n *\n * Use `bitapAlphabet` to prepare needly\n *\n * Differs from bitap for search in that it doesn't expect needly to be at the beginning of haystack\n *\n * Returns [0, maxErrors + 1], where maxErrors + 1 means a match was not found with lte maxErrors errors\n *\n * Takes scratch buffers, which must be an array of at least length maxErrors + 1 length, filled with Uint32Arrays of at least (needle.length + haystack.length + 1) length\n */\nexport function bitap(haystack: string, needle: { alphabet: Uint32Array, length: number }, maxErrors: number, sb: Uint32Array[]): number {\n    for (let errors = 0; errors <= maxErrors; errors++) {\n        sb[errors].fill(0)\n        sb[errors][0] = (1 << errors) - 1\n    }\n\n    const matchMask = 1 << (needle.length - 1)\n\n    search: for (let j = 1; j <= needle.length + haystack.length; j++) {\n        let charMatch: number\n        if (j - 1 < haystack.length) {\n            charMatch = needle.alphabet[haystack.charCodeAt(j - 1)]\n        }\n        else {\n            charMatch = 0\n        }\n\n        for (let errors = 0; errors <= maxErrors; errors++) {\n            if (errors === 0) {\n                sb[0][j] = ((sb[0][j - 1] << 1) | 1) & charMatch\n            }\n            else {\n                sb[errors][j] = (((sb[errors][j - 1] << 1) | 1) & charMatch) | (((sb[errors - 1][j - 1] | sb[errors - 1][j]) << 1) | 1) | sb[errors - 1][j - 1]\n            }\n\n            if ((sb[errors][j] & matchMask) !== 0) {\n                maxErrors = errors - 1\n                if (errors === 0) {\n                    break search\n                }\n            }\n        }\n    }\n    return maxErrors + 1\n}\n","import stableStringify from 'json-stable-stringify'\nimport React, { ReactNode, useState, useEffect, useRef, useMemo } from 'react'\n\nimport { useColors } from '../../page_template/colors'\nimport { toNeedle } from '../../utils/bitap'\nimport { bitap } from '../../utils/bitap-selector'\n\nexport const labelPadding = '4px'\n\nconst maxErrors = 31\n\nexport function BetterSelector<T>({ value, onChange, possibleValues, renderValue }: {\n    value: T\n    onChange: (newValue: T) => void\n    possibleValues: readonly T[] // Memo this for performance\n    renderValue: (v: T) => string // Memo this for performance\n}): ReactNode {\n    const colors = useColors()\n\n    const selectedRendered = renderValue(value)\n\n    const [searchValue, setSearchValue] = useState(selectedRendered)\n    const [isOpen, setIsOpen] = useState(false)\n    const [highlightedIndex, setHighlightedIndex] = useState(0)\n\n    const inputRef = useRef<HTMLInputElement>(null)\n\n    const menuRef = useRef<HTMLDivElement>(null)\n\n    // Needed if this component is reused in a different context\n    useEffect(() => {\n        setSearchValue(selectedRendered)\n    }, [selectedRendered])\n\n    const { bitapBuffers, options } = useMemo(() => {\n        const optionsResult = possibleValues.map((choice, index) => ({ renderedChoice: renderValue(choice), index }))\n\n        const longestSelectionPossibility = optionsResult.reduce((acc, poss) => Math.max(acc, poss.renderedChoice.toLowerCase().length), 0)\n        const bitapBuffersResult = Array.from({ length: maxErrors + 1 }, () => new Uint32Array(31 + longestSelectionPossibility + 1))\n\n        return {\n            options: optionsResult,\n            bitapBuffers: bitapBuffersResult,\n        }\n    }, [possibleValues, renderValue])\n\n    const sortedOptions = useMemo(() => {\n        const needle = toNeedle(searchValue.toLowerCase().slice(0, 31))\n\n        return options.sort((a, b) => {\n            const aScore = bitap(a.renderedChoice.toLowerCase(), needle, maxErrors, bitapBuffers)\n            const bScore = bitap(b.renderedChoice.toLowerCase(), needle, maxErrors, bitapBuffers)\n            if (aScore === bScore) {\n                return a.renderedChoice.length - b.renderedChoice.length\n            }\n            return aScore - bScore\n        })\n    }, [bitapBuffers, searchValue, options])\n\n    const handleOptionSelect = (option: typeof sortedOptions[number]): void => {\n        const newValue = possibleValues[option.index]\n        if (stableStringify(newValue) !== stableStringify(value)) {\n            onChange(newValue)\n        }\n        setSearchValue(option.renderedChoice)\n        setIsOpen(false)\n        setHighlightedIndex(0)\n    }\n\n    const handleKeyDown = (e: React.KeyboardEvent): void => {\n        if (!isOpen || sortedOptions.length === 0) return\n\n        switch (e.key) {\n            case 'ArrowDown':\n                e.preventDefault()\n                setHighlightedIndex(prev =>\n                    prev < sortedOptions.length - 1 ? prev + 1 : 0,\n                )\n                break\n            case 'ArrowUp':\n                e.preventDefault()\n                setHighlightedIndex(prev =>\n                    prev > 0 ? prev - 1 : sortedOptions.length - 1,\n                )\n                break\n            case 'Enter':\n                e.preventDefault()\n                if (highlightedIndex >= 0 && highlightedIndex < sortedOptions.length) {\n                    handleOptionSelect(sortedOptions[highlightedIndex])\n                }\n                break\n            case 'Escape':\n                e.preventDefault()\n                setIsOpen(false)\n                setHighlightedIndex(0)\n                break\n        }\n    }\n\n    return (\n        <div style={{ position: 'relative', flex: 1 }}>\n            <input\n                ref={inputRef}\n                type=\"text\"\n                value={searchValue}\n                onChange={(e) => {\n                    setSearchValue(e.target.value)\n                    setIsOpen(true)\n                    setHighlightedIndex(0)\n                    if (menuRef.current) {\n                        menuRef.current.scrollTop = 0\n                    }\n                }}\n                onKeyDown={handleKeyDown}\n                onClick={(e) => {\n                    (e.target as HTMLInputElement).select()\n                }}\n                onFocus={() => {\n                    setIsOpen(true)\n                    setHighlightedIndex(0)\n                }}\n                onBlur={() => {\n                    // Delay closing to allow clicking on options\n                    setTimeout(() => {\n                        setIsOpen(false)\n                        setHighlightedIndex(0)\n                    }, 150)\n                }}\n                placeholder=\"Search options...\"\n                style={{\n                    width: '100%',\n                    padding: `${labelPadding} 8px`,\n                    border: `1px solid ${colors.ordinalTextColor}`,\n                    borderRadius: '4px',\n                    fontSize: '14px',\n                }}\n            />\n            {isOpen && sortedOptions.length > 0 && (\n                <div\n                    style={{\n                        position: 'absolute',\n                        top: '100%',\n                        left: 0,\n                        right: 0,\n                        backgroundColor: colors.background,\n                        border: '1px solid #ccc',\n                        borderRadius: '4px',\n                        maxHeight: '200px',\n                        overflowY: 'auto',\n                        zIndex: 1000,\n                        boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\n                    }}\n                    ref={menuRef}\n                >\n                    {sortedOptions.map((option, index) => (\n                        <div\n                            key={index}\n                            onMouseDown={() => {\n                                handleOptionSelect(option)\n                            }}\n                            onMouseUp={() => {\n                                handleOptionSelect(option)\n                                inputRef.current?.blur()\n                            }}\n                            style={{\n                                padding: '8px 12px',\n                                cursor: 'pointer',\n                                borderBottom: index < sortedOptions.length - 1 ? '1px solid #eee' : 'none',\n                                backgroundColor: index === highlightedIndex ? colors.slightlyDifferentBackgroundFocused : colors.slightlyDifferentBackground,\n                                color: option.renderedChoice === '' ? colors.ordinalTextColor : colors.textMain,\n                            }}\n                            onMouseEnter={() => { setHighlightedIndex(index) }}\n                        >\n                            {option.renderedChoice === '' ? 'No Selection' : option.renderedChoice}\n                        </div>\n                    ))}\n                </div>\n            )}\n        </div>\n    )\n}\n","/**\n * Algorithm for fuzzy string matching and associated utilities.\n *\n * This a modified bitap algorithm that's optimized for matching short strings to short strings.\n * It uses a signature that's based on the count of letters in the needle and haystack to quickly skip combinations that can't match.\n */\n\nimport { assert } from './defensive'\n\nexport interface Needle {\n    alphabet: Uint32Array\n    length: number\n    signature: number\n}\n\nexport function bitapAlphabet(token: string): Uint32Array {\n    assert(token.length <= 31, `Max bitap token length is 31`)\n    const alphabet = new Uint32Array(65535).fill(0)\n    for (let i = 0; i < token.length; i++) {\n        const char = token.charCodeAt(i)\n        alphabet[char] = alphabet[char] | (1 << i)\n    }\n    return alphabet\n}\n\nexport function toNeedle(token: string): Needle {\n    return { alphabet: bitapAlphabet(token), length: token.length, signature: toSignature(token) }\n}\n\nexport interface Haystack {\n    haystack: string\n    signature: number\n}\n\nexport function toHaystack(token: string): Haystack {\n    return {\n        haystack: token,\n        signature: toSignature(token),\n    }\n}\n\nexport function toSignature(str: string): number {\n    const alphabetStart = 'a'.charCodeAt(0)\n    const alphabetEnd = 'z'.charCodeAt(0)\n    // 0 < alphabetEnd - alphabetStart < 26   because of javascript integer size\n    let result = 0\n    for (let i = 0; i < str.length; i++) {\n        const charCode = str.charCodeAt(i)\n        if (charCode >= alphabetStart && charCode <= alphabetEnd) {\n            const firstOccurence = (1 << ((charCode - alphabetStart) * 2))\n            if ((result & firstOccurence) !== 0) {\n                result |= (firstOccurence << 1) // second occurence\n            }\n            else {\n                result |= firstOccurence\n            }\n        }\n    }\n    return result\n}\n\nexport const bitapPerformance = {\n    numBitapSignatureChecks: 0,\n    numBitapSignatureSkips: 0,\n}\n\n/**\n * Finds the minimum number of edits between `haystack` and `needle` (assuming they have the same start position)\n *\n * Returns [0, maxErrors + 1], where maxErrors + 1 means a match was not found with lte maxErrors errors\n *\n * Takes scratch buffers, which must be an array of at least length maxErrors + 1 length, filled with Uint32Arrays of at least (needle.length + maxErrors + 1) length\n *\n */\nexport function bitap(haystack: Haystack, needle: Needle, maxErrors: number, scratchBuffers: Uint32Array[]): number {\n    let bestMatch = maxErrors + 1\n\n    if (maxErrors < 0) {\n        return bestMatch\n    }\n\n    bitapPerformance.numBitapSignatureChecks++\n    if (bitCount(needle.signature ^ (haystack.signature & needle.signature)) > maxErrors) {\n        bitapPerformance.numBitapSignatureSkips++\n        return bestMatch // The letters in the haystack and needle are too different to possibly match\n    }\n\n    for (let errors = 0; errors <= maxErrors; errors++) {\n        scratchBuffers[errors].fill(0)\n        scratchBuffers[errors][0] = (1 << errors) - 1\n    }\n\n    const matchMask = 1 << (needle.length - 1)\n\n    for (let j = 1; j <= (needle.length + maxErrors); j++) {\n        let charMatch: number\n        if (j - 1 < haystack.haystack.length) {\n            charMatch = needle.alphabet[haystack.haystack.charCodeAt(j - 1)]\n        }\n        else {\n            charMatch = 0\n        }\n\n        for (let errors = 0; errors <= maxErrors; errors++) {\n            if (errors === 0) {\n                scratchBuffers[0][j] = ((scratchBuffers[0][j - 1] << 1) | 1) & charMatch\n            }\n            else {\n                scratchBuffers[errors][j] = (((scratchBuffers[errors][j - 1] << 1) | 1) & charMatch) | (((scratchBuffers[errors - 1][j - 1] | scratchBuffers[errors - 1][j]) << 1) | 1) | scratchBuffers[errors - 1][j - 1]\n            }\n\n            if ((scratchBuffers[errors][j] & matchMask) !== 0) {\n                bestMatch = Math.min(bestMatch, Math.max(Math.abs(j - needle.length), errors))\n                maxErrors = Math.min(maxErrors, errors)\n                if (bestMatch === 0) {\n                    return bestMatch // We've found the best match we possibly can\n                }\n            }\n        }\n    }\n    return bestMatch\n}\n\nexport function bitCount(x: number): number {\n    return bitCount32(x) + bitCount32(Math.floor(x / 0x1_0000_0000))\n}\n\n// https://stackoverflow.com/a/109025\nfunction bitCount32(i: number): number {\n    i = i - ((i >> 1) & 0x55555555) // add pairs of bits\n    i = (i & 0x33333333) + ((i >> 2) & 0x33333333) // quads\n    i = (i + (i >> 4)) & 0x0F0F0F0F // groups of 8\n    i *= 0x01010101 // horizontal sum of bytes\n    return i >> 24\n}\n","import { createContext } from 'react'\n\nimport { Range } from '../../urban-stats-script/editor-utils'\nimport { Property } from '../../utils/Property'\n\nexport interface Selection {\n    blockIdent: string\n    range: Range\n}\n\n// eslint-disable-next-line no-restricted-syntax -- React contexts typically are capitalized\nexport const SelectionContext = createContext(new Property<Selection | undefined>(undefined))\n","import React, { ReactNode, useContext, useMemo } from 'react'\n\nimport { Editor } from '../../urban-stats-script/Editor'\nimport { UrbanStatsASTExpression } from '../../urban-stats-script/ast'\nimport { EditorError } from '../../urban-stats-script/editor-utils'\nimport { ParseError, parseNoErrorAsCustomNode } from '../../urban-stats-script/parser'\nimport { USSDocumentedType } from '../../urban-stats-script/types-values'\n\nimport { SelectionContext } from './SelectionContext'\n\nexport function CustomEditor({\n    uss,\n    setUss,\n    typeEnvironment,\n    errors,\n    blockIdent,\n    placeholder,\n}: {\n    uss: UrbanStatsASTExpression & { type: 'customNode' }\n    setUss: (u: UrbanStatsASTExpression & { type: 'customNode' }) => void\n    typeEnvironment: Map<string, USSDocumentedType>\n    errors: EditorError[]\n    blockIdent: string\n    placeholder?: string\n}): ReactNode {\n    const ourErrors = useMemo(() => errors.filter((e: ParseError) => e.location.start.block.type === 'single' && e.location.start.block.ident === blockIdent), [errors, blockIdent])\n\n    const selectionContext = useContext(SelectionContext)\n    const selection = selectionContext.use()\n\n    return (\n        <Editor\n            uss={uss.originalCode}\n            setUss={(u: string) => {\n                const parsed = parseNoErrorAsCustomNode(u, blockIdent, uss.expectedType)\n                setUss(parsed)\n            }}\n            typeEnvironment={typeEnvironment}\n            results={ourErrors}\n            placeholder={placeholder}\n            selection={selection?.blockIdent === blockIdent ? selection.range : null}\n            setSelection={(range) => {\n                if (range !== null) {\n                    selectionContext.value = { blockIdent, range }\n                }\n                else if (selectionContext.value?.blockIdent === blockIdent) {\n                    selectionContext.value = undefined\n                }\n            }}\n        />\n    )\n}\n","import React, { ReactNode, useMemo, useCallback } from 'react'\n\nimport { DisplayResults } from '../../urban-stats-script/Editor'\nimport { UrbanStatsASTExpression } from '../../urban-stats-script/ast'\nimport { doRender, hsvColorExpression, hsvToColor, rgbColorExpression, rgbToColor } from '../../urban-stats-script/constants/color'\nimport { Color, hexToColor } from '../../urban-stats-script/constants/color-utils'\nimport { EditorError } from '../../urban-stats-script/editor-utils'\nimport { emptyLocation, parseNumber } from '../../urban-stats-script/lexer'\nimport { parseNoErrorAsCustomNode, parseNoErrorAsExpression } from '../../urban-stats-script/parser'\nimport { renderType, USSDocumentedType, USSType } from '../../urban-stats-script/types-values'\nimport { assert } from '../../utils/defensive'\n\nimport { parseExpr } from './AutoUXEditor'\nimport { BetterSelector } from './BetterSelector'\n\nexport const labelPadding = '4px'\n\nexport type Selection = { type: 'variable' | 'function', name: string } | { type: 'custom' } | { type: 'constant' } | { type: 'vector' } | { type: 'object' }\n\nfunction shouldShowConstant(type: USSType): boolean {\n    return type.type === 'number' || type.type === 'string'\n}\n\nexport function possibilities(target: USSType[], env: Map<string, USSDocumentedType>): Selection[] {\n    const results: Selection[] = []\n    // Add vector option if the type is a vector\n    if (target.some(t => t.type === 'vector')) {\n        results.push({ type: 'vector' })\n    }\n    // Add properties option if the type is an object\n    if (target.some(t => t.type === 'object')) {\n        results.push({ type: 'object' })\n    }\n    // Add custom option for non-opaque or custom-allowed types\n    if (target.some(t => t.type !== 'opaque' || t.allowCustomExpression !== false)) {\n        results.push({ type: 'custom' })\n    }\n    // Add constant option for numbers and strings\n    if (target.some(shouldShowConstant)) {\n        results.push({ type: 'constant' })\n    }\n    else {\n        const renderedTypes = target.map(renderType)\n        // Only add variables and functions if constants are not shown\n        const variables: Selection[] = []\n        const functions: Selection[] = []\n        for (const [name, type] of env) {\n            const t: USSType = type.type\n            // if (renderType(t) === renderType(target)) {\n            if (renderedTypes.includes(renderType(t))) {\n                variables.push({ type: 'variable', name })\n            }\n            else if (t.type === 'function' && t.returnType.type === 'concrete' && renderedTypes.includes(renderType(t.returnType.value))) {\n                functions.push({ type: 'function', name })\n            }\n        }\n        // Sort variables by priority (lower numbers first)\n        variables.sort((a, b) => {\n            const aPriority = a.type === 'variable' ? (env.get(a.name)?.documentation?.priority ?? 1) : 1\n            const bPriority = b.type === 'variable' ? (env.get(b.name)?.documentation?.priority ?? 1) : 1\n            return aPriority - bPriority\n        })\n        // Sort functions by priority (functions get priority 0 by default)\n        functions.sort((a, b) => {\n            const aPriority = a.type === 'function' ? (env.get(a.name)?.documentation?.priority ?? 0) : 0\n            const bPriority = b.type === 'function' ? (env.get(b.name)?.documentation?.priority ?? 0) : 0\n            return aPriority - bPriority\n        })\n        // Functions first, then variables\n        results.push(...functions)\n        results.push(...variables)\n    }\n    return results\n}\n\nexport function Selector(props: {\n    uss: UrbanStatsASTExpression\n    setSelection: (selection: Selection) => void\n    setUss: (u: UrbanStatsASTExpression) => void\n    typeEnvironment: Map<string, USSDocumentedType>\n    type: USSType[]\n    blockIdent: string\n    errors: EditorError[]\n}): ReactNode {\n    const selected = classifyExpr(props.uss)\n\n    const selectionPossibilities = useMemo(() => {\n        // Combine possibilities from all types\n        const allPossibilities = new Set<Selection>()\n        props.type.forEach((type) => {\n            const typePossibilities = possibilities([type], props.typeEnvironment)\n            typePossibilities.forEach(possibility => allPossibilities.add(possibility))\n        })\n\n        return Array.from(allPossibilities)\n    }, [props.type, props.typeEnvironment])\n\n    const renderPossibility = useCallback((selection: Selection) => renderSelection(props.typeEnvironment, selection), [props.typeEnvironment])\n\n    if (selectionPossibilities.length < 2) {\n        return undefined\n    }\n\n    const isNumber = props.type.some(type => type.type === 'number')\n    const isString = props.type.some(type => type.type === 'string')\n    const showConstantInput = selected.type === 'constant' && (isNumber || isString)\n    const currentValue = props.uss.type === 'constant' ? props.uss.value.node.value.toString() : ''\n    const errors = props.errors.filter(e => e.location.start.block.type === 'single' && e.location.start.block.ident === props.blockIdent)\n    const errorComponent = <DisplayResults results={errors} editor={false} />\n\n    const colorValue = props.type.some(type => type.type === 'opaque' && type.name === 'color') ? getColor(props.uss, props.typeEnvironment) : undefined\n\n    const select = (\n        <div style={{ position: 'relative', display: 'flex', alignItems: 'center', gap: '0.5em' }}>\n            <BetterSelector\n                value={selected}\n                possibleValues={selectionPossibilities}\n                renderValue={renderPossibility}\n                onChange={props.setSelection}\n            />\n            {showConstantInput && (\n                <input\n                    type=\"text\"\n                    value={currentValue}\n                    onChange={(e) => {\n                        const value = e.target.value\n                        let node: (UrbanStatsASTExpression & { type: 'constant' })['value']['node']\n                        let numberValue\n                        if (isNumber && (numberValue = parseNumber(value)) !== undefined) {\n                            node = { type: 'number', value: numberValue }\n                        }\n                        else {\n                            node = { type: 'string', value }\n                        }\n                        const newUss: UrbanStatsASTExpression = {\n                            type: 'constant',\n                            value: {\n                                node,\n                                location: emptyLocation(props.blockIdent),\n                            },\n                        }\n                        props.setUss(newUss)\n                    }}\n                    style={{ width: '200px', fontSize: '14px', padding: '4px 8px' }}\n                    placeholder={isNumber ? 'Enter number' : 'Enter string'}\n                />\n            )}\n            {colorValue !== undefined && (\n                <input\n                    type=\"color\"\n                    value={doRender(colorValue.color, true)}\n                    style={{ width: '200px', height: '30.5px' }}\n                    onChange={(e) => {\n                        const newColor = hexToColor(e.target.value)\n                        const newColorUss = colorValue.kind === 'hsv' ? hsvColorExpression(newColor, { forceAlpha: colorValue.color.a }) : rgbColorExpression(newColor, { forceAlpha: colorValue.color.a })\n                        let newUss: UrbanStatsASTExpression | undefined\n                        switch (props.uss.type) {\n                            case 'customNode':\n                                newUss = parseNoErrorAsCustomNode(\n                                    newColorUss,\n                                    props.blockIdent,\n                                    props.type,\n                                )\n                                break\n                            case 'identifier':\n                            case 'call':\n                                newUss = parseNoErrorAsExpression(\n                                    newColorUss,\n                                    props.blockIdent,\n                                )\n                        }\n                        if (newUss !== undefined) {\n                            newUss = parseExpr(\n                                newUss,\n                                props.blockIdent,\n                                props.type,\n                                props.typeEnvironment,\n                                () => { throw new Error('Should not happen') },\n                                true,\n                            )\n                            props.setUss(newUss)\n                        }\n                    }}\n                />\n            )}\n        </div>\n    )\n    return (\n        <div style={{ display: 'flex', flexDirection: 'column', gap: '0.5em' }}>\n            {select}\n            {errorComponent}\n        </div>\n    )\n}\n\nexport function classifyExpr(uss: UrbanStatsASTExpression): Selection {\n    if (uss.type === 'customNode') {\n        return { type: 'custom' }\n    }\n    if (uss.type === 'constant') {\n        return { type: 'constant' }\n    }\n    if (uss.type === 'identifier') {\n        return { type: 'variable', name: uss.name.node }\n    }\n    if (uss.type === 'call') {\n        const classifiedFn = classifyExpr(uss.fn)\n        assert(classifiedFn.type === 'variable', 'Function must be a variable or another function')\n        return { type: 'function', name: classifiedFn.name }\n    }\n    if (uss.type === 'vectorLiteral') {\n        return { type: 'vector' }\n    }\n    if (uss.type === 'objectLiteral') {\n        return { type: 'object' }\n    }\n    throw new Error(`Unsupported USS expression type: ${uss.type}`)\n}\n\nexport function renderSelection(typeEnvironment: Map<string, USSDocumentedType>, selection: Selection): string {\n    if (selection.type === 'custom') {\n        return 'Custom Expression'\n    }\n    if (selection.type === 'constant') {\n        return 'Constant'\n    }\n    if (selection.type === 'vector') {\n        return 'Manual List'\n    }\n    if (selection.type === 'object') {\n        return 'Properties'\n    }\n    const doc = typeEnvironment.get(selection.name)?.documentation?.humanReadableName\n    return doc ?? selection.name\n}\n\nexport function getColor(expr: UrbanStatsASTExpression, typeEnvironment: Map<string, USSDocumentedType>): { color: Color, kind: 'rgb' | 'hsv' } | undefined {\n    switch (expr.type) {\n        case 'customNode':\n            if (expr.expr.type === 'expression') {\n                return getColor(expr.expr.value, typeEnvironment)\n            }\n            return\n        case 'identifier': {\n            const reference = typeEnvironment.get(expr.name.node)\n\n            if (reference === undefined || !('value' in reference)) {\n                return\n            }\n\n            if (reference.type.type === 'opaque' && reference.type.name === 'color') {\n                return { color: (reference.value as { value: Color }).value, kind: 'rgb' }\n            }\n\n            return\n        }\n        case 'call': {\n            const posArgs = expr.args.flatMap((arg) => {\n                if (arg.type === 'unnamed' && arg.value.type === 'constant' && arg.value.value.node.type === 'number') {\n                    return [arg.value.value.node.value]\n                }\n                return []\n            })\n            const kwArg = expr.args.flatMap((arg) => {\n                if (arg.type === 'named' && arg.name.node === 'a' && arg.value.type === 'constant' && arg.value.value.node.type === 'number') {\n                    return [arg.value.value.node.value]\n                }\n                return []\n            })\n            assert(kwArg.length <= 1, 'There should be at most one \"a\" named argument')\n            const alpha = kwArg.length === 1 ? kwArg[0] : 1\n            if (expr.fn.type === 'identifier' && (posArgs.length === 3 || posArgs.length === 4)) {\n                switch (expr.fn.name.node) {\n                    case 'rgb':\n                        const rgbColor = rgbToColor(posArgs[0], posArgs[1], posArgs[2], alpha, true)\n                        if (rgbColor === undefined) {\n                            return\n                        }\n                        return { color: rgbColor, kind: 'rgb' }\n                    case 'hsv':\n                        const hsvColor = hsvToColor(posArgs[0], posArgs[1], posArgs[2], alpha, true)\n                        if (hsvColor === undefined) {\n                            return\n                        }\n                        return { color: hsvColor, kind: 'hsv' }\n                    default:\n                        return\n                }\n            }\n        }\n    }\n    return\n}\n","import stableStringify from 'json-stable-stringify'\nimport React, { ReactNode } from 'react'\n\nimport { CheckboxSettingCustom } from '../../components/sidebar'\nimport { UrbanStatsASTExpression, UrbanStatsASTArg, UrbanStatsASTStatement, locationOf } from '../../urban-stats-script/ast'\nimport { hsvColorExpression, rgbColorExpression } from '../../urban-stats-script/constants/color'\nimport { EditorError } from '../../urban-stats-script/editor-utils'\nimport { emptyLocation } from '../../urban-stats-script/lexer'\nimport { extendBlockIdKwarg, extendBlockIdObjectProperty, extendBlockIdPositionalArg, extendBlockIdVectorElement } from '../../urban-stats-script/location'\nimport { parseNoErrorAsCustomNode, parseNoErrorAsExpression, unparse } from '../../urban-stats-script/parser'\nimport { USSDocumentedType, USSType, USSFunctionArgType, renderType, USSObjectType } from '../../urban-stats-script/types-values'\nimport { DefaultMap } from '../../utils/DefaultMap'\nimport { assert } from '../../utils/defensive'\nimport { useMobileLayout } from '../../utils/responsive'\n\nimport { CustomEditor } from './CustomEditor'\nimport { Selector, Selection, classifyExpr, possibilities, getColor, labelPadding } from './Selector'\n\nfunction createDefaultExpression(type: USSType, blockIdent: string, typeEnvironment: Map<string, USSDocumentedType>): UrbanStatsASTExpression {\n    if (type.type === 'number') {\n        return { type: 'constant', value: { node: { type: 'number', value: 0 }, location: emptyLocation(blockIdent) } }\n    }\n    if (type.type === 'string') {\n        return { type: 'constant', value: { node: { type: 'string', value: '' }, location: emptyLocation(blockIdent) } }\n    }\n    for (const [name, tdoc] of typeEnvironment) {\n        if (!tdoc.documentation?.isDefault) {\n            continue\n        }\n        if (renderType(tdoc.type) === renderType(type)) {\n            return getDefaultVariable({ type: 'variable', name }, typeEnvironment, blockIdent)\n        }\n        if (tdoc.type.type === 'function' && tdoc.type.returnType.type !== 'inferFromPrimitive' && renderType(tdoc.type.returnType.value) === renderType(type)) {\n            return getDefaultFunction({ type: 'function', name }, typeEnvironment, blockIdent)\n        }\n    }\n    if (type.type === 'vector') {\n        return {\n            type: 'vectorLiteral',\n            entireLoc: emptyLocation(blockIdent),\n            elements: [],\n        }\n    }\n    return parseNoErrorAsCustomNode('', blockIdent, [type])\n}\n\nfunction ArgumentEditor(props: {\n    name: string\n    argWDefault: { type: USSFunctionArgType, defaultValue?: UrbanStatsASTExpression }\n    uss: UrbanStatsASTExpression & { type: 'call', fn: UrbanStatsASTExpression & { type: 'identifier' } }\n    setUss: (u: UrbanStatsASTExpression) => void\n    typeEnvironment: Map<string, USSDocumentedType>\n    errors: EditorError[]\n    blockIdent: string\n}): ReactNode {\n    const arg = props.argWDefault.type\n    assert(arg.type === 'concrete', `Named argument ${props.name} must be concrete`)\n\n    const functionUss = props.uss\n    const argValue = functionUss.args.find(a => a.type === 'named' && a.name.node === props.name)\n    const hasDefault = props.argWDefault.defaultValue !== undefined\n    const isEnabled = argValue !== undefined\n    const subident = extendBlockIdKwarg(props.blockIdent, props.name)\n\n    // Get the function's documentation to find human-readable argument names\n    const tdoc = props.typeEnvironment.get(functionUss.fn.name.node)\n    const humanReadableName = tdoc?.documentation?.namedArgs?.[props.name] ?? props.name\n\n    return (\n        <div style={{ display: 'flex', alignItems: 'flex-start', gap: '0.25em', width: '100%', margin: '0.25em 0' }}>\n            <div style={{ flex: 1 }}>\n                <div>\n                    {hasDefault\n                        ? (\n                                <CheckboxSettingCustom\n                                    name={humanReadableName}\n                                    checked={isEnabled}\n                                    onChange={(checked) => {\n                                        if (checked) {\n                                            const defaultExpr = props.argWDefault.defaultValue\n                                            let exprToUse = defaultExpr === undefined || (defaultExpr.type === 'identifier' && defaultExpr.name.node === 'null')\n                                                ? createDefaultExpression(arg.value, subident, props.typeEnvironment)\n                                                : defaultExpr\n                                            exprToUse = parseExpr(exprToUse, subident, [arg.value], props.typeEnvironment, () => {\n                                                throw new Error('Should not happen')\n                                            }, true)\n                                            // Add the argument with default value\n                                            const newArg = {\n                                                type: 'named' as const,\n                                                name: { node: props.name, location: emptyLocation(subident) },\n                                                value: exprToUse,\n                                            }\n                                            const newArgs = [...functionUss.args, newArg]\n                                            props.setUss({ ...functionUss, args: newArgs })\n                                        }\n                                        else {\n                                            // Remove the argument\n                                            const newArgs = functionUss.args.filter(a => !(a.type === 'named' && a.name.node === props.name))\n                                            props.setUss({ ...functionUss, args: newArgs })\n                                        }\n                                    }}\n                                />\n                            )\n                        : <span>{humanReadableName}</span>}\n\n                </div>\n                {isEnabled\n                && (\n                    <AutoUXEditor\n                        uss={argValue.value}\n                        setUss={(newUss) => {\n                            const newArgs = functionUss.args.map(a => a.type === 'named' && a.name.node === props.name ? { ...a, value: newUss } : a)\n                            props.setUss({ ...functionUss, args: newArgs })\n                        }}\n                        typeEnvironment={props.typeEnvironment}\n                        errors={props.errors}\n                        blockIdent={subident}\n                        type={[arg.value]}\n                    />\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport function AutoUXEditor(props: {\n    uss: UrbanStatsASTExpression\n    setUss: (u: UrbanStatsASTExpression) => void\n    typeEnvironment: Map<string, USSDocumentedType>\n    errors: EditorError[]\n    blockIdent: string\n    type: USSType[]\n    label?: string\n    labelWidth?: string\n}): ReactNode {\n    const ussLoc = locationOf(props.uss).start\n    if (ussLoc.block.type !== 'single' || ussLoc.block.ident !== props.blockIdent) {\n        console.warn('USS: ', props.uss)\n        console.warn('USS Location: ', ussLoc)\n        console.warn('Editor blockIdent: ', props.blockIdent)\n        console.error('USS expression location does not match block identifier', props.uss, ussLoc.block.type === 'single' ? ussLoc.block.ident : '(multi)', props.blockIdent)\n    }\n    const labelWidth = props.labelWidth ?? '5%'\n    const subcomponent = (): [ReactNode | undefined, 'consumes-errors' | 'does-not-consume-errors'] => {\n        if (props.uss.type === 'constant') {\n            return [undefined, 'does-not-consume-errors']\n        }\n        const uss = props.uss\n        if (uss.type === 'customNode') {\n            const editor = (\n                <CustomEditor\n                    key=\"custom\"\n                    uss={uss}\n                    setUss={props.setUss}\n                    typeEnvironment={props.typeEnvironment}\n                    errors={props.errors}\n                    blockIdent={props.blockIdent}\n                />\n            )\n            return [editor, 'consumes-errors']\n        }\n        if (uss.type === 'identifier') {\n            return [undefined, 'does-not-consume-errors']\n        }\n        if (uss.type === 'call') {\n            assert(uss.fn.type === 'identifier', 'Function must be an identifier')\n            const tdoc = props.typeEnvironment.get(uss.fn.name.node)\n            assert(tdoc !== undefined, `Function ${uss.fn.name.node} not found in type environment`)\n            const type = tdoc.type\n            assert(type.type === 'function', `Function ${uss.fn.name.node} must be a function type`)\n            const subselectors: ReactNode[] = []\n            type.posArgs.forEach((arg, i) => {\n                assert(arg.type === 'concrete', `Positional argument must be concrete`)\n                subselectors.push(\n                    <AutoUXEditor\n                        key={`pos-${i}`}\n                        uss={uss.args[i].value}\n                        setUss={(newUss) => {\n                            const newArgs = [...uss.args]\n                            newArgs[i] = { ...newArgs[i], value: newUss }\n                            props.setUss({ ...uss, args: newArgs })\n                        }}\n                        typeEnvironment={props.typeEnvironment}\n                        errors={props.errors}\n                        blockIdent={extendBlockIdPositionalArg(props.blockIdent, i)}\n                        type={[arg.value]}\n                    />,\n                )\n            })\n            Object.entries(type.namedArgs).forEach(([name, argWDefault]) => {\n                if (argWDefault.documentation?.hide !== true) {\n                    subselectors.push(\n                        <ArgumentEditor\n                            key={`named-${name}`}\n                            name={name}\n                            argWDefault={argWDefault}\n                            // cast is valid because we checked type above\n                            uss={uss as UrbanStatsASTExpression & { type: 'function', fn: UrbanStatsASTExpression & { type: 'identifier' } }}\n                            setUss={props.setUss}\n                            typeEnvironment={props.typeEnvironment}\n                            errors={props.errors}\n                            blockIdent={props.blockIdent}\n                        />,\n                    )\n                }\n            })\n            const element = <div key=\"subselectors\">{...subselectors}</div>\n            return [element, 'does-not-consume-errors']\n        }\n        if (uss.type === 'vectorLiteral') {\n            // Determine the element type\n            let elementType: USSType = { type: 'number' } // fallback\n            if (props.type[0].type === 'vector') {\n                // something of a hack, but this really shouldn't be an issue because we don't support multiple types for vectors\n                elementType = props.type[0].elementType as USSType\n            }\n            const element = (\n                <div style={{ display: 'flex', flexDirection: 'column', gap: '0.5em', width: '100%' }}>\n                    {uss.elements.map((el, i) => (\n                        <div key={i} style={{ display: 'flex', alignItems: 'center', gap: '0.5em', width: '100%' }}>\n                            <AutoUXEditor\n                                uss={el}\n                                setUss={(newEl) => {\n                                    const newElements = [...uss.elements]\n                                    newElements[i] = newEl\n                                    props.setUss({ ...uss, elements: newElements })\n                                }}\n                                typeEnvironment={props.typeEnvironment}\n                                errors={props.errors}\n                                blockIdent={extendBlockIdVectorElement(props.blockIdent, i)}\n                                type={[elementType]}\n                                label={`${i + 1}`}\n                            />\n                            <button\n                                style={{ marginLeft: 8, flexShrink: 0 }}\n                                onClick={() => {\n                                    const newElements = uss.elements.filter((_, j) => j !== i)\n                                    props.setUss({ ...uss, elements: newElements })\n                                }}\n                                title=\"Remove element\"\n                            >\n                                –\n                            </button>\n                        </div>\n                    ))}\n                    <button\n                        style={{ alignSelf: 'flex-start', marginTop: 4 }}\n                        onClick={() => {\n                            const newElements = [\n                                ...uss.elements,\n                                // Copy the last element if there is one\n                                uss.elements.length > 0\n                                    ? uss.elements[uss.elements.length - 1]\n                                    : createDefaultExpression(elementType, extendBlockIdVectorElement(props.blockIdent, uss.elements.length), props.typeEnvironment),\n                            ]\n                            props.setUss({ ...uss, elements: newElements })\n                        }}\n                    >\n                        + Add element\n                    </button>\n                </div>\n            )\n            return [element, 'does-not-consume-errors']\n        }\n        if (uss.type === 'objectLiteral') {\n            // Determine the element type\n            let propertiesTypes: Map<string, USSType> = new DefaultMap(() => ({ type: 'number' })) // fallback\n            if (props.type[0].type === 'object') {\n                // something of a hack, but this really shouldn't be an issue because we don't support multiple types for objects\n                propertiesTypes = props.type[0].properties\n            }\n            const element = (\n                <div style={{ display: 'flex', flexDirection: 'column', gap: '0.5em', width: '100%' }}>\n                    {Array.from(propertiesTypes.keys()).sort().map((key) => {\n                        const propertyType = propertiesTypes.get(key)!\n                        return (\n                            <AutoUXEditor\n                                key={key}\n                                uss={uss.properties.find(([k]) => k === key)?.[1] ?? createDefaultExpression(propertyType, extendBlockIdObjectProperty(props.blockIdent, key), props.typeEnvironment)}\n                                setUss={(newVal) => {\n                                    props.setUss({ ...uss, properties: uss.properties.map(([k, v]) => [k, k === key ? newVal : v]) })\n                                }}\n                                typeEnvironment={props.typeEnvironment}\n                                errors={props.errors}\n                                blockIdent={extendBlockIdObjectProperty(props.blockIdent, key)}\n                                type={[propertyType]}\n                                label={key}\n                            />\n                        )\n                    })}\n                </div>\n            )\n            return [element, 'does-not-consume-errors']\n        }\n        throw new Error(`Unsupported USS expression type: ${props.uss.type}`) // TODO handle other types\n    }\n\n    const wrappedSubcomponent = (): [ReactNode | undefined, 'consumes-errors' | 'does-not-consume-errors'] => {\n        const [subc, doesConsume] = subcomponent()\n        if (subc === undefined) {\n            return [undefined, doesConsume]\n        }\n        const element = (\n            <div style={{ width: '100%', flex: 1 }}>\n                <div style={{ display: 'flex', gap: '1em', marginLeft: labelWidth }}>\n                    {props.label && <span style={{ minWidth: 'fit-content' }}></span>}\n                    <div style={{ flex: 1 }}>\n                        {subc}\n                    </div>\n                </div>\n            </div>\n        )\n        return [element, doesConsume]\n    }\n\n    const [wrapped, doesConsume] = wrappedSubcomponent()\n\n    const leftSegment = props.label === undefined\n        ? undefined\n        : (\n                <div style={{ padding: `${labelPadding} 0px` }}>\n                    <span style={{ minWidth: 'fit-content' }}>{props.label}</span>\n                </div>\n            )\n    const rightSegment = possibilities(props.type, props.typeEnvironment).length < 2\n        ? undefined\n        : (\n                <div style={{ width: `calc(100% - ${labelWidth})` }}>\n                    <Selector\n                        uss={props.uss}\n                        setSelection={(selection: Selection) => {\n                            props.setUss(defaultForSelection(selection, props.uss, props.typeEnvironment, props.blockIdent, props.type[0]))\n                        }}\n                        setUss={props.setUss}\n                        typeEnvironment={props.typeEnvironment}\n                        type={props.type}\n                        blockIdent={props.blockIdent}\n                        errors={doesConsume === 'consumes-errors' ? [] : props.errors}\n                    />\n                </div>\n\n            )\n\n    const twoLines = useMobileLayout() || (props.label?.length ?? 0) > 5\n\n    const component = (): ReactNode => {\n        if (twoLines) {\n            return (\n                <>\n                    <div style={{ display: 'flex', alignItems: 'top' }}>\n                        {leftSegment}\n                    </div>\n                    <div style={{ display: 'flex', alignItems: 'top' }}>\n                        <div style={{ width: labelWidth }} />\n                        {rightSegment}\n                    </div>\n                </>\n            )\n        }\n        else {\n            return (\n                <div style={{ display: 'flex', alignItems: 'top' }}>\n                    <div style={{ width: labelWidth }}>\n                        {leftSegment}\n                    </div>\n                    {rightSegment}\n                </div>\n            )\n        }\n    }\n\n    return (\n        <div style={{ display: 'flex', flexDirection: 'column', width: '100%', flex: 1, margin: '0.25em 0', gap: '0.25em' }} id={`auto-ux-editor-${props.blockIdent}`}>\n            {leftSegment !== undefined || rightSegment !== undefined ? <div style={{ width: '100%', flex: 1 }}>{component()}</div> : undefined}\n            {wrapped}\n        </div>\n    )\n}\n\nfunction getDefaultVariable(selection: Selection & { type: 'variable' }, typeEnvironment: Map<string, USSDocumentedType>, blockIdent: string): UrbanStatsASTExpression {\n    const varType = typeEnvironment.get(selection.name)?.type\n    assert(varType !== undefined, `Variable ${selection.name} not found in type environment`)\n    return { type: 'identifier', name: { node: selection.name, location: emptyLocation(blockIdent) } }\n}\n\nfunction getDefaultFunction(selection: Selection & { type: 'function' }, typeEnvironment: Map<string, USSDocumentedType>, blockIdent: string): UrbanStatsASTExpression {\n    const fn = typeEnvironment.get(selection.name)\n    assert(fn !== undefined && fn.type.type === 'function', `Function ${selection.name} not found or not a function`)\n    const args: UrbanStatsASTArg[] = []\n    // Only include positional arguments by default, not named arguments with defaults\n    for (let i = 0; i < fn.type.posArgs.length; i++) {\n        const arg = fn.type.posArgs[i]\n        assert(arg.type === 'concrete', `Positional argument must be concrete`)\n        args.push({\n            type: 'unnamed',\n            value: createDefaultExpression(arg.value, extendBlockIdPositionalArg(blockIdent, i), typeEnvironment),\n        })\n    }\n    const needed = Object.entries(fn.type.namedArgs).filter(([, a]) => a.defaultValue === undefined)\n    for (const [name, argWDefault] of needed) {\n        const arg = argWDefault.type\n        assert(arg.type === 'concrete', `Named argument ${name} must be concrete`)\n        args.push({\n            type: 'named',\n            name: { node: name, location: emptyLocation(blockIdent) },\n            value: createDefaultExpression(arg.value, extendBlockIdKwarg(blockIdent, name), typeEnvironment),\n        })\n    }\n    return {\n        type: 'call',\n        fn: { type: 'identifier', name: { node: selection.name, location: emptyLocation(blockIdent) } },\n        args,\n        entireLoc: emptyLocation(blockIdent),\n    }\n}\n\nfunction deconstruct(expr: UrbanStatsASTExpression, typeEnvironment: Map<string, USSDocumentedType>, blockIdent: string, type: USSType, selection: Selection): UrbanStatsASTExpression | undefined {\n    switch (expr.type) {\n        case 'identifier': {\n            const reference = typeEnvironment.get(expr.name.node)\n\n            if (reference === undefined) {\n                return\n            }\n\n            if (reference.documentation?.equivalentExpressions === undefined) {\n                return\n            }\n\n            for (const equiv of reference.documentation.equivalentExpressions) {\n                const valid = maybeParseExpr(equiv, blockIdent, type, typeEnvironment)\n                if (valid !== undefined && stableStringify(classifyExpr(valid)) === stableStringify(selection)) {\n                    return valid\n                }\n            }\n\n            return\n        }\n        case 'customNode':\n            if (expr.expr.type === 'expression') {\n                return deconstruct(expr.expr.value, typeEnvironment, blockIdent, type, selection)\n            }\n            return\n        case 'call': {\n            if (type.type === 'opaque' && type.name === 'color' && selection.type === 'function') {\n                // Conversion between RGB and HSV functions\n                const color = getColor(expr, typeEnvironment)\n                switch (true) {\n                    case color?.kind === 'rgb' && selection.name === 'hsv':\n                        // rgb to hsv\n                        return parseNoErrorAsExpression(hsvColorExpression(color.color), blockIdent)\n                    case color?.kind === 'hsv' && selection.name === 'rgb':\n                        // hsv to rgb\n                        return parseNoErrorAsExpression(rgbColorExpression(color.color), blockIdent)\n                }\n            }\n            return\n        }\n        default:\n            return\n    }\n}\n\nfunction defaultForSelection(\n    selection: Selection,\n    current: UrbanStatsASTExpression,\n    typeEnvironment: Map<string, USSDocumentedType>,\n    blockIdent: string,\n    type: USSType,\n): UrbanStatsASTExpression {\n    const deconstructed = deconstruct(current, typeEnvironment, blockIdent, type, selection)\n    if (deconstructed !== undefined) {\n        return deconstructed\n    }\n\n    const parsed = maybeParseExpr(current, blockIdent, type, typeEnvironment)\n    if (parsed !== undefined && stableStringify(classifyExpr(parsed)) === stableStringify(selection)) {\n        return parsed\n    }\n\n    switch (selection.type) {\n        case 'custom':\n            return parseNoErrorAsCustomNode(unparse(current), blockIdent, [type])\n        case 'constant':\n            return createDefaultExpression(type, blockIdent, typeEnvironment)\n        case 'variable':\n            return getDefaultVariable(selection as Selection & { type: 'variable' }, typeEnvironment, blockIdent)\n        case 'function':\n            return getDefaultFunction(selection as Selection & { type: 'function' }, typeEnvironment, blockIdent)\n        case 'vector': {\n            // Create an empty vectorLiteral of the right type\n            return {\n                type: 'vectorLiteral',\n                entireLoc: emptyLocation(blockIdent),\n                elements: [],\n            }\n        }\n        case 'object':\n            return {\n                type: 'objectLiteral',\n                entireLoc: emptyLocation(blockIdent),\n                properties: [],\n            }\n    }\n}\n\nfunction maybeParseExpr(\n    expr: UrbanStatsASTExpression | UrbanStatsASTStatement,\n    blockIdent: string,\n    type: USSType,\n    typeEnvironment: Map<string, USSDocumentedType>,\n): UrbanStatsASTExpression | undefined {\n    try {\n        return parseExpr(expr, blockIdent, [type], typeEnvironment, () => {\n            throw new Error('parsing failed')\n        }, false)\n    }\n    catch {}\n    return\n}\n\ntype Fallback = (uss: string, i: string, t: USSType[]) => UrbanStatsASTExpression\n\nexport function parseExpr(\n    expr: UrbanStatsASTExpression | UrbanStatsASTStatement,\n    blockIdent: string,\n    types: USSType[],\n    typeEnvironment: Map<string, USSDocumentedType>,\n    fallback: Fallback,\n    preserveCustomNodes: boolean,\n): UrbanStatsASTExpression {\n    const parsed = attemptParseExpr(expr, blockIdent, types, typeEnvironment, fallback, preserveCustomNodes)\n    return parsed ?? fallback(unparse(expr), blockIdent, types)\n}\n\nfunction attemptParseExpr(\n    expr: UrbanStatsASTExpression | UrbanStatsASTStatement,\n    blockIdent: string,\n    types: USSType[],\n    typeEnvironment: Map<string, USSDocumentedType>,\n    fallback: Fallback,\n    preserveCustomNodes: boolean,\n): UrbanStatsASTExpression | undefined {\n    switch (expr.type) {\n        case 'condition':\n        case 'binaryOperator':\n        case 'if':\n        case 'assignment':\n        case 'parseError':\n        case 'attribute':\n            return undefined\n        case 'vectorLiteral':\n            const elementTypes = types\n                .filter(t => t.type === 'vector')\n                .map(t => t.elementType)\n                .filter(t => t.type !== 'elementOfEmptyVector') satisfies USSType[]\n            if (elementTypes.length === 0) {\n                return undefined\n            }\n            return {\n                type: 'vectorLiteral',\n                entireLoc: emptyLocation(blockIdent),\n                elements: expr.elements.map((elem, idx) => parseExpr(elem, extendBlockIdVectorElement(blockIdent, idx), elementTypes, typeEnvironment, fallback, preserveCustomNodes)),\n            }\n        case 'objectLiteral':\n            const exprProps = new Set(expr.properties.map(([key]) => key))\n            const compatibleTypes = types.filter(\n                (t) => {\n                    if (t.type !== 'object') {\n                        return false\n                    }\n                    if (t.properties.size !== expr.properties.length) {\n                        return false\n                    }\n                    if (Array.from(t.properties.keys()).some(key => !exprProps.has(key))) {\n                        return false\n                    }\n                    return true\n                },\n            ) as USSObjectType[]\n            if (compatibleTypes.length === 0) {\n                return undefined\n            }\n            return {\n                type: 'objectLiteral',\n                entireLoc: emptyLocation(blockIdent),\n                properties: expr.properties.map(([key, value]) => [\n                    key,\n                    parseExpr(value, extendBlockIdObjectProperty(blockIdent, key), compatibleTypes.map(t => t.properties.get(key)!) satisfies USSType[], typeEnvironment, fallback, preserveCustomNodes),\n                ]),\n            }\n        case 'do':\n            const stmts = { type: 'statements', result: expr.statements, entireLoc: expr.entireLoc } satisfies UrbanStatsASTStatement\n            return attemptParseExpr(stmts, blockIdent, types, typeEnvironment, fallback, preserveCustomNodes) ?? fallback(unparse(stmts), blockIdent, types)\n        case 'customNode':\n            if (preserveCustomNodes) {\n                return parseNoErrorAsCustomNode(unparse(expr, { simplify: true }), blockIdent, types)\n            }\n            else {\n                return parseExpr(expr.expr, blockIdent, types, typeEnvironment, fallback, preserveCustomNodes)\n            }\n        case 'statements':\n            if (expr.result.length === 1) {\n                return parseExpr(expr.result[0], blockIdent, types, typeEnvironment, fallback, preserveCustomNodes)\n            }\n            return undefined\n        case 'expression':\n            return parseExpr(expr.value, blockIdent, types, typeEnvironment, fallback, preserveCustomNodes)\n        case 'identifier':\n            const validVariableSelections = possibilities(types, typeEnvironment).filter(s => s.type === 'variable') as { type: 'variable', name: string }[]\n            if (validVariableSelections.some(s => s.name === expr.name.node)) {\n                return { type: 'identifier', name: { node: expr.name.node, location: emptyLocation(blockIdent) } }\n            }\n            return undefined\n        case 'constant':\n            if (types.some(type => type.type === expr.value.node.type)) {\n                return { type: 'constant', value: { node: expr.value.node, location: emptyLocation(blockIdent) } }\n            }\n            return undefined\n        case 'unaryOperator':\n            if (expr.operator.node === '-' && expr.expr.type === 'constant' && expr.expr.value.node.type === 'number' && types.some(type => type.type === 'number')) {\n                return {\n                    type: 'constant',\n                    value: { location: emptyLocation(blockIdent), node: { type: 'number', value: -(expr.expr.value.node.value) } },\n                }\n            }\n            return undefined\n        case 'call':\n            const fn = expr.fn\n            if (fn.type !== 'identifier') {\n                return undefined\n            }\n            const validFunctionSelections = possibilities(types, typeEnvironment).filter(s => s.type === 'function') as { type: 'function', name: string }[]\n            if (!validFunctionSelections.some(s => s.name === fn.name.node)) {\n                return undefined\n            }\n            const tdoc = typeEnvironment.get(fn.name.node)\n            if (!tdoc || tdoc.type.type !== 'function') {\n                return undefined\n            }\n            const fnType = tdoc.type\n            let positionals = expr.args.filter(a => a.type === 'unnamed') satisfies (UrbanStatsASTArg & { type: 'unnamed' })[]\n            if (positionals.length !== fnType.posArgs.length) {\n                return undefined\n            }\n            let nameds = expr.args.filter(a => a.type === 'named') satisfies (UrbanStatsASTArg & { type: 'named' })[]\n            const names = new Set(nameds.map(a => a.name.node))\n            const needed = Object.entries(fnType.namedArgs).filter(([, a]) => a.defaultValue === undefined)\n            if (needed.some(([name]) => !names.has(name))) {\n                return undefined\n            }\n            if (fnType.posArgs.some(a => a.type !== 'concrete')) {\n                return undefined\n            }\n            positionals = positionals.map((a, i) => ({\n                type: 'unnamed',\n                value: parseExpr(a.value, extendBlockIdPositionalArg(blockIdent, i), [(fnType.posArgs[i] as { type: 'concrete', value: USSType }).value], typeEnvironment, fallback, preserveCustomNodes),\n            }))\n            if (Object.values(fnType.namedArgs).some(a => a.type.type !== 'concrete')) {\n                return undefined\n            }\n            nameds = nameds.map(a => ({\n                type: 'named',\n                name: a.name,\n                value: parseExpr(a.value, extendBlockIdKwarg(blockIdent, a.name.node), [(fnType.namedArgs[a.name.node].type as { type: 'concrete', value: USSType }).value], typeEnvironment, fallback, preserveCustomNodes),\n            }))\n            return {\n                type: 'call',\n                fn: { type: 'identifier', name: { node: fn.name.node, location: emptyLocation(blockIdent) } },\n                args: [...positionals, ...nameds],\n                entireLoc: emptyLocation(blockIdent),\n            }\n    }\n}\n","import React, { ReactNode } from 'react'\n\nimport { CheckboxSettingCustom } from '../../components/sidebar'\nimport { UrbanStatsASTExpression } from '../../urban-stats-script/ast'\nimport { EditorError } from '../../urban-stats-script/editor-utils'\nimport { emptyLocation } from '../../urban-stats-script/lexer'\nimport { unparse, parseNoErrorAsCustomNode } from '../../urban-stats-script/parser'\nimport { USSDocumentedType } from '../../urban-stats-script/types-values'\n\nimport { CustomEditor } from './CustomEditor'\n\nexport function ConditionEditor({\n    condition,\n    setCondition,\n    typeEnvironment,\n    errors,\n    blockIdent,\n}: {\n    condition: UrbanStatsASTExpression\n    setCondition: (conditionExpr: UrbanStatsASTExpression) => void\n    typeEnvironment: Map<string, USSDocumentedType>\n    errors: EditorError[]\n    blockIdent: string\n}): ReactNode {\n    const conditionIsCustom = condition.type === 'customNode'\n\n    return (\n        <div style={{ margin: '0.5em 0' }}>\n            <CheckboxSettingCustom\n                name=\"Filter?\"\n                checked={conditionIsCustom}\n                onChange={(checked) => {\n                    if (checked) {\n                        // Enable condition - keep current condition or set to 'true'\n                        const currentCondition = unparse(condition) || 'true'\n                        const conditionExpr = parseNoErrorAsCustomNode(currentCondition, blockIdent, [{ type: 'vector', elementType: { type: 'boolean' } }])\n                        setCondition(conditionExpr)\n                    }\n                    else {\n                        // Disable condition - set to constant true\n                        const conditionExpr = { type: 'identifier', name: { node: 'true', location: emptyLocation(blockIdent) } } satisfies UrbanStatsASTExpression\n                        setCondition(conditionExpr)\n                    }\n                }}\n            />\n            {conditionIsCustom && (\n                <CustomEditor\n                    uss={condition as UrbanStatsASTExpression & { type: 'customNode' }}\n                    setUss={setCondition}\n                    typeEnvironment={typeEnvironment}\n                    errors={errors}\n                    blockIdent={blockIdent}\n                />\n            )}\n        </div>\n    )\n}\n","import React, { ReactNode, useState } from 'react'\n\nimport { CheckboxSettingCustom } from '../../components/sidebar'\nimport { UrbanStatsASTExpression } from '../../urban-stats-script/ast'\nimport { EditorError } from '../../urban-stats-script/editor-utils'\nimport { parseNoErrorAsCustomNode } from '../../urban-stats-script/parser'\nimport { USSDocumentedType } from '../../urban-stats-script/types-values'\n\nimport { CustomEditor } from './CustomEditor'\n\nexport function PreambleEditor({\n    preamble,\n    setPreamble,\n    typeEnvironment,\n    errors,\n    blockIdent,\n}: {\n    preamble: UrbanStatsASTExpression & { type: 'customNode' }\n    setPreamble: (conditionExpr: UrbanStatsASTExpression & { type: 'customNode' }) => void\n    typeEnvironment: Map<string, USSDocumentedType>\n    errors: EditorError[]\n    blockIdent: string\n}): ReactNode {\n    const [showPreamble, setShowPreamble] = useState(preamble.originalCode.trim() !== '')\n\n    return (\n        <div style={{ margin: '0.5em 0' }}>\n            <CheckboxSettingCustom\n                name=\"Preamble\"\n                checked={showPreamble}\n                onChange={(checked) => {\n                    // Enable/disable preamble\n                    const preambleExpr = parseNoErrorAsCustomNode('', blockIdent)\n                    setPreamble(preambleExpr)\n                    setShowPreamble(checked)\n                }}\n            />\n            {showPreamble && (\n                <CustomEditor\n                    uss={preamble as UrbanStatsASTExpression & { type: 'customNode' }}\n                    setUss={setPreamble}\n                    typeEnvironment={typeEnvironment}\n                    errors={errors}\n                    blockIdent={blockIdent}\n                    placeholder=\"Variables here can be used by all custom expressions.\"\n                />\n            )}\n        </div>\n    )\n}\n","import type valid_geographies from '../../data/mapper/used_geographies'\nimport { Universe } from '../../universe'\nimport { locationOf, toStatement, unify, UrbanStatsASTStatement } from '../../urban-stats-script/ast'\nimport { emptyLocation } from '../../urban-stats-script/lexer'\nimport { defaultTypeEnvironment } from '../context'\n\nimport { attemptParseAsTopLevel, defaultTopLevelEditor, MapUSS } from './TopLevelEditor'\n\nexport type StatisticsForGeography = { stats: number[] }[]\n\n/* eslint-disable no-restricted-syntax -- This represents persitent links */\nexport interface RegressionDescriptor {\n    var_coefficients: string[]\n    var_intercept: string\n    independent: ColorStatDescriptor | undefined | null\n    residual_name?: string\n    var_residue: string\n    weight_by_population: boolean\n    dependents: (ColorStatDescriptor | undefined | null)[]\n}\n/* eslint-enable no-restricted-syntax */\n\nexport type ColorStatDescriptor = (\n    { type: 'single', value: string, name?: string, uss: string }\n    |\n    { type: 'function', value: 'Function', name?: string, uss?: string }\n)\n\nexport interface LineStyle {\n    color: string\n    weight: number\n}\n\nexport type Basemap = {\n    type: 'osm'\n    noLabels?: boolean\n    subnationalOutlines?: LineStyle\n} | { type: 'none' }\n\nexport interface FilterSettings {\n    enabled: boolean\n    function: ColorStatDescriptor\n}\n\nexport interface MapperScriptSettings {\n    uss: MapUSS\n}\n\nexport interface MapSettings {\n    geographyKind: typeof valid_geographies[number] | undefined\n    universe: Universe | undefined\n    script: MapperScriptSettings\n}\n\nexport function computeUSS(mapSettings: MapperScriptSettings): UrbanStatsASTStatement {\n    return toStatement(mapSettings.uss)\n}\n\nexport function defaultSettings(addTo: Partial<MapSettings>): MapSettings {\n    const uss = attemptParseAsTopLevel(addTo.script?.uss ?? defaultTopLevelEditor(), defaultTypeEnvironment(addTo.universe ?? 'USA'), true)\n    return {\n        geographyKind: addTo.geographyKind ?? 'Subnational Region',\n        universe: addTo.universe ?? 'USA',\n        script: {\n            uss,\n        },\n    }\n}\n\nexport function makeStatements<const T extends UrbanStatsASTStatement[]>(elements: T, identFallback?: string): UrbanStatsASTStatement & { type: 'statements', result: T } {\n    const locations = [...elements.map(locationOf)]\n    if (identFallback !== undefined) {\n        locations.push(emptyLocation(identFallback))\n    }\n    return {\n        type: 'statements',\n        result: elements,\n        entireLoc: unify(...locations),\n    }\n}\n","import assert from 'assert'\n\nimport React, { ReactNode } from 'react'\n\nimport { CheckboxSettingCustom } from '../../components/sidebar'\nimport { DisplayResults } from '../../urban-stats-script/Editor'\nimport { locationOf, UrbanStatsASTExpression, UrbanStatsASTStatement } from '../../urban-stats-script/ast'\nimport { EditorError } from '../../urban-stats-script/editor-utils'\nimport { emptyLocation } from '../../urban-stats-script/lexer'\nimport { unparse, parseNoErrorAsCustomNode } from '../../urban-stats-script/parser'\nimport { USSDocumentedType, USSType } from '../../urban-stats-script/types-values'\n\nimport { AutoUXEditor, parseExpr } from './AutoUXEditor'\nimport { ConditionEditor } from './ConditionEditor'\nimport { CustomEditor } from './CustomEditor'\nimport { PreambleEditor } from './PreambleEditor'\nimport { makeStatements } from './utils'\n\nconst cMap = { type: 'opaque', name: 'cMap', allowCustomExpression: false } satisfies USSType\nconst pMap = { type: 'opaque', name: 'pMap', allowCustomExpression: false } satisfies USSType\n\nconst validMapperOutputs = [cMap, pMap] satisfies USSType[]\n\nexport const rootBlockIdent = 'r'\nconst idPreamble = `${rootBlockIdent}p`\nconst idCondition = `${rootBlockIdent}c`\nconst idOutput = `${rootBlockIdent}o`\n\nexport type MapUSS = UrbanStatsASTExpression & { type: 'customNode' } |\n    (UrbanStatsASTStatement &\n    {\n        type: 'statements'\n        result: [\n                UrbanStatsASTStatement & { type: 'expression', value: UrbanStatsASTExpression & { type: 'customNode' } },\n                UrbanStatsASTStatement & { type: 'condition', rest: [UrbanStatsASTStatement & { type: 'expression' }] },\n        ]\n    })\n\nexport function TopLevelEditor({\n    uss,\n    setUss,\n    typeEnvironment,\n    errors,\n}: {\n    uss: MapUSS\n    setUss: (u: MapUSS) => void\n    typeEnvironment: Map<string, USSDocumentedType>\n    errors: EditorError[]\n}): ReactNode {\n    const subcomponent = (): ReactNode => {\n        if (uss.type === 'customNode') {\n            return (\n                <CustomEditor\n                    uss={uss}\n                    setUss={setUss}\n                    typeEnvironment={typeEnvironment}\n                    errors={errors}\n                    blockIdent={rootBlockIdent}\n                />\n            )\n        }\n\n        return (\n            <div>\n                {/* Preamble */}\n                <PreambleEditor\n                    preamble={uss.result[0].value}\n                    setPreamble={(u: UrbanStatsASTExpression & { type: 'customNode' }) => {\n                        const preamble = {\n                            type: 'expression',\n                            value: u,\n                        } satisfies UrbanStatsASTStatement\n                        setUss(makeStatements([preamble, uss.result[1]]))\n                    }}\n                    typeEnvironment={typeEnvironment}\n                    errors={errors}\n                    blockIdent={idPreamble}\n                />\n                {/* Condition */}\n                <ConditionEditor\n                    condition={uss.result[1].condition}\n                    setCondition={(newConditionExpr) => {\n                        const conditionStatement = {\n                            type: 'condition',\n                            entireLoc: locationOf(newConditionExpr),\n                            condition: newConditionExpr,\n                            rest: uss.result[1].rest,\n                        } satisfies UrbanStatsASTStatement\n                        setUss(makeStatements([uss.result[0], conditionStatement]))\n                    }}\n                    typeEnvironment={typeEnvironment}\n                    errors={errors}\n                    blockIdent={idCondition}\n                />\n                {/* Output */}\n                <AutoUXEditor\n                    uss={uss.result[1].rest[0].value}\n                    setUss={(u: UrbanStatsASTExpression) => {\n                        const condition = {\n                            type: 'condition',\n                            entireLoc: uss.result[1].entireLoc,\n                            condition: uss.result[1].condition,\n                            rest: [{ type: 'expression', value: u }] as const,\n                        } satisfies UrbanStatsASTStatement\n                        setUss(makeStatements([uss.result[0], condition]))\n                    }}\n                    typeEnvironment={typeEnvironment}\n                    errors={errors}\n                    blockIdent={idOutput}\n                    type={validMapperOutputs}\n                    labelWidth=\"0px\"\n                />\n            </div>\n        )\n    }\n    return (\n        <div>\n            <CheckboxSettingCustom\n                name=\"Enable custom script\"\n                checked={uss.type === 'customNode'}\n                onChange={(checked) => {\n                    if (checked) {\n                        assert(uss.type === 'statements', 'USS should be statements when enabling custom script')\n                        setUss(parseNoErrorAsCustomNode(unparse(uss, { simplify: true }), rootBlockIdent))\n                    }\n                    else {\n                        assert(uss.type === 'customNode', 'USS should not be a custom node when disabled')\n                        setUss(attemptParseAsTopLevel(uss.expr, typeEnvironment, false))\n                    }\n                }}\n                style={{ margin: '0.5em 0' }}\n            />\n            { subcomponent() }\n            <DisplayResults\n                editor={false}\n                results={errors.filter(e => e.location.start.block.type === 'multi')}\n            />\n        </div>\n    )\n}\n\nexport function attemptParseAsTopLevel(stmt: MapUSS | UrbanStatsASTStatement, typeEnvironment: Map<string, USSDocumentedType>, preserveCustomNodes: boolean): MapUSS {\n    /**\n     * Splits up the statements into a preamble and a condition statement. Make the body of the condition a custom node.\n     */\n    if (stmt.type === 'customNode') {\n        return stmt\n    }\n    const stmts = stmt.type === 'statements' ? stmt.result : [stmt]\n    const preamble = {\n        type: 'statements',\n        result: stmts.slice(0, -1),\n        entireLoc: locationOf(stmt),\n    } satisfies UrbanStatsASTStatement\n    const conditionStmt = stmts.length > 0 ? stmts[stmts.length - 1] : undefined\n    const { conditionRest, conditionExpr } = attemptParseCondition(conditionStmt)\n    const body = parseExpr(makeStatements(conditionRest, idOutput), idOutput, validMapperOutputs, typeEnvironment, parseNoErrorAsCustomNode, preserveCustomNodes)\n    const condition = {\n        type: 'condition',\n        entireLoc: locationOf(conditionExpr),\n        condition: conditionExpr,\n        rest: [{ type: 'expression', value: body }] as const,\n    } satisfies UrbanStatsASTStatement\n    return {\n        type: 'statements',\n        result: [\n            { type: 'expression', value: parseNoErrorAsCustomNode(unparse(preamble, { simplify: true }), idPreamble) },\n            condition,\n        ] as const,\n        entireLoc: locationOf(stmt),\n    } satisfies UrbanStatsASTStatement\n}\n\nfunction attemptParseCondition(conditionStmt: UrbanStatsASTStatement | undefined): { conditionRest: UrbanStatsASTStatement[], conditionExpr: UrbanStatsASTExpression } {\n    let stmts = conditionStmt !== undefined ? [conditionStmt] : []\n    if (conditionStmt?.type === 'condition') {\n        const conditionText = unparse(conditionStmt.condition, { simplify: true })\n        if (conditionText.trim() !== 'true') {\n            return {\n                conditionExpr: parseNoErrorAsCustomNode(conditionText, idCondition, [{ type: 'vector', elementType: { type: 'boolean' } }]),\n                conditionRest: conditionStmt.rest,\n            }\n        }\n        stmts = conditionStmt.rest\n    }\n    return {\n        conditionExpr: { type: 'identifier', name: { node: 'true', location: emptyLocation(idCondition) } } satisfies UrbanStatsASTExpression,\n        conditionRest: stmts,\n    }\n}\n\nexport function defaultTopLevelEditor(): UrbanStatsASTStatement {\n    const expr = parseNoErrorAsCustomNode('cMap(data=density_pw_1km, scale=linearScale(), ramp=rampUridis)', rootBlockIdent, validMapperOutputs)\n    return expr.expr\n}\n","import React, { ReactNode, useCallback, useEffect, useMemo } from 'react'\n\nimport { articleTypes, CountsByUT } from '../../components/countsByArticleType'\nimport universes_ordered from '../../data/universes_ordered'\nimport { EditorError, useUndoRedo } from '../../urban-stats-script/editor-utils'\nimport { Property } from '../../utils/Property'\nimport { TestUtils } from '../../utils/TestUtils'\nimport { defaultTypeEnvironment } from '../context'\nimport { settingNameStyle } from '../style'\n\nimport { BetterSelector } from './BetterSelector'\nimport { Selection, SelectionContext } from './SelectionContext'\nimport { TopLevelEditor } from './TopLevelEditor'\nimport { MapSettings } from './utils'\n\nexport function MapperSettings({ mapSettings, setMapSettings, errors, counts }: {\n    mapSettings: MapSettings\n    setMapSettings: (s: MapSettings) => void\n    errors: EditorError[]\n    counts: CountsByUT\n}): ReactNode {\n    const uss = mapSettings.script.uss\n\n    const selectionContext = useMemo(() => new Property<Selection | undefined>(undefined), [])\n\n    const { addState, updateCurrentSelection } = useUndoRedo(\n        mapSettings,\n        selectionContext.value,\n        setMapSettings,\n        (selection) => {\n            selectionContext.value = selection\n        },\n        {\n            undoChunking: TestUtils.shared.isTesting ? 2000 : 1000,\n        },\n    )\n\n    // Update current selection when it changes\n    useEffect(() => {\n        const observer = (): void => {\n            updateCurrentSelection(selectionContext.value)\n        }\n\n        selectionContext.observers.add(observer)\n        return () => { selectionContext.observers.delete(observer) }\n    }, [selectionContext, updateCurrentSelection])\n\n    const typeEnvironment = useMemo(() => defaultTypeEnvironment(mapSettings.universe), [mapSettings.universe])\n\n    const renderString = useCallback((universe: string | undefined) => universe ?? '', [])\n\n    const universes = useMemo(() => [undefined, ...universes_ordered], [])\n\n    const geographyKinds = useMemo(() =>\n        mapSettings.universe === undefined ? undefined : [undefined, ...articleTypes(counts, mapSettings.universe)] as Exclude<MapSettings['geographyKind'], undefined>[],\n    [mapSettings.universe, counts])\n\n    const changeSettingsWithUndo = (newSettings: MapSettings): void => {\n        setMapSettings(newSettings)\n        addState(newSettings, selectionContext.value)\n    }\n\n    return (\n        <SelectionContext.Provider value={selectionContext}>\n            <div style={settingNameStyle}>\n                Universe\n            </div>\n            <BetterSelector\n                possibleValues={universes}\n                value={mapSettings.universe}\n                renderValue={renderString}\n                onChange={\n                    (newUniverse) => {\n                        changeSettingsWithUndo({\n                            ...mapSettings,\n                            universe: newUniverse,\n                            geographyKind: newUniverse === undefined || mapSettings.geographyKind === undefined\n                                ? mapSettings.geographyKind\n                                : articleTypes(counts, newUniverse).includes(mapSettings.geographyKind)\n                                    ? mapSettings.geographyKind\n                                    : undefined,\n                        })\n                    }\n                }\n            />\n            {geographyKinds && (\n                <>\n                    <div style={settingNameStyle}>\n                        Geography Kind\n                    </div>\n                    <BetterSelector\n                        possibleValues={geographyKinds}\n                        value={mapSettings.geographyKind}\n                        renderValue={renderString}\n                        onChange={\n                            (newGeographyKind) => {\n                                changeSettingsWithUndo({\n                                    ...mapSettings,\n                                    geographyKind: newGeographyKind,\n                                })\n                            }\n                        }\n                    />\n                </>\n            )}\n            <TopLevelEditor\n                uss={uss}\n                setUss={(newUss) => {\n                    changeSettingsWithUndo({\n                        ...mapSettings,\n                        script: { uss: newUss },\n                    })\n                }}\n                typeEnvironment={typeEnvironment}\n                errors={errors}\n            />\n        </SelectionContext.Provider>\n    )\n}\n","import '../common.css'\nimport './article.css'\n\nimport { gunzipSync, gzipSync } from 'zlib'\n\nimport React, { ReactNode, useContext, useEffect, useRef, useState } from 'react'\nimport { z } from 'zod'\n\nimport valid_geographies from '../data/mapper/used_geographies'\nimport universes_ordered from '../data/universes_ordered'\nimport { loadProtobuf } from '../load_json'\nimport { Keypoints } from '../mapper/ramps'\nimport { MapperSettings } from '../mapper/settings/MapperSettings'\nimport { MapUSS, rootBlockIdent } from '../mapper/settings/TopLevelEditor'\nimport { MapSettings, computeUSS, Basemap, defaultSettings } from '../mapper/settings/utils'\nimport { Navigator } from '../navigation/Navigator'\nimport { consolidatedShapeLink, indexLink } from '../navigation/links'\nimport { Colors } from '../page_template/color-themes'\nimport { useColors } from '../page_template/colors'\nimport { PageTemplate } from '../page_template/template'\nimport { loadCentroids } from '../syau/load'\nimport { Universe } from '../universe'\nimport { DisplayResults } from '../urban-stats-script/Editor'\nimport { getAllParseErrors, UrbanStatsASTStatement } from '../urban-stats-script/ast'\nimport { doRender } from '../urban-stats-script/constants/color'\nimport { instantiate, ScaleInstance } from '../urban-stats-script/constants/scale'\nimport { EditorError, longMessage } from '../urban-stats-script/editor-utils'\nimport { noLocation } from '../urban-stats-script/location'\nimport { parse, parseNoErrorAsCustomNode, unparse } from '../urban-stats-script/parser'\nimport { loadInset } from '../urban-stats-script/worker'\nimport { executeAsync } from '../urban-stats-script/workerManager'\nimport { interpolateColor } from '../utils/color'\nimport { computeAspectRatioForInsets } from '../utils/coordinates'\nimport { assert } from '../utils/defensive'\nimport { ConsolidatedShapes, Feature, IFeature } from '../utils/protos'\nimport { useHeaderTextClass } from '../utils/responsive'\nimport { NormalizeProto } from '../utils/types'\nimport { UnitType } from '../utils/unit'\n\nimport { CountsByUT } from './countsByArticleType'\nimport { Insets, ShapeRenderingSpec, MapGeneric, MapGenericProps, MapHeight, ShapeType, ShapeSpec } from './map'\nimport { Statistic } from './table'\n\ninterface DisplayedMapProps extends MapGenericProps {\n    geographyKind: typeof valid_geographies[number]\n    universe: Universe\n    rampCallback: (newRamp: EmpiricalRamp) => void\n    basemapCallback: (basemap: Basemap) => void\n    insetsCallback: (insetsToUse: Insets) => void\n    height: MapHeight | undefined\n    uss: UrbanStatsASTStatement | undefined\n    setErrors: (errors: EditorError[]) => void\n    colors: Colors\n}\n\ninterface ShapesForUniverse {\n    shapes: { type: 'polygon', value: NormalizeProto<IFeature>[] } | { type: 'point', value: { lon: number, lat: number }[] }\n    nameToIndex: Map<string, number>\n}\n\ntype ActualShapeType = { type: 'polygon', value: NormalizeProto<Feature> } | { type: 'point', value: { lon: number, lat: number } }\n\nasync function loadPolygons(geographyKind: typeof valid_geographies[number], universe: string): Promise<ShapesForUniverse> {\n    const universeIdx = universes_ordered.indexOf(universe as (typeof universes_ordered)[number])\n    const shapes = (await loadProtobuf(\n        consolidatedShapeLink(geographyKind),\n        'ConsolidatedShapes',\n    )) as NormalizeProto<ConsolidatedShapes>\n    const longnames: string[] = []\n    const features: NormalizeProto<IFeature>[] = []\n    for (let i = 0; i < shapes.longnames.length; i++) {\n        if (shapes.universes[i].universeIdxs.includes(universeIdx)) {\n            longnames.push(shapes.longnames[i])\n            features.push(shapes.shapes[i])\n        }\n    }\n    return { shapes: { type: 'polygon', value: features }, nameToIndex: new Map(longnames.map((r, i) => [r, i])) }\n}\n\nasync function loadShapes(geographyKind: typeof valid_geographies[number], universe: string, shapeType: ShapeType): Promise<ShapesForUniverse> {\n    switch (shapeType) {\n        case 'polygon':\n            return loadPolygons(geographyKind, universe)\n        case 'point':\n            const idxLink = indexLink(universe, geographyKind)\n            const articles = await loadProtobuf(idxLink, 'ArticleOrderingList')\n            const centroids = await loadCentroids(universe, geographyKind, articles.longnames)\n\n            return {\n                shapes: { type: 'point', value: centroids.map(c => ({ lon: c.lon!, lat: c.lat! })) },\n                nameToIndex: new Map(articles.longnames.map((r, i) => [r, i])),\n            }\n        default:\n            throw new Error(`Unknown shape type ${shapeType}`)\n    }\n}\n\ninterface Shapes { geographyKind: string, universe: string, shapeType: string, data: Promise<ShapesForUniverse> }\n\nclass DisplayedMap extends MapGeneric<DisplayedMapProps> {\n    private shapes: undefined | Shapes\n    private shapeType: undefined | ShapeType\n\n    override shouldHaveLoadingSpinner(): boolean {\n        return true\n    }\n\n    private getShapes(): Shapes {\n        if (this.shapes && this.shapes.geographyKind === this.props.geographyKind && this.shapes.universe === this.props.universe && this.shapes.shapeType === this.shapeType) {\n            return this.shapes\n        }\n\n        const st = this.shapeType\n        assert(st !== undefined, 'Shape type must be set before loading shapes')\n\n        this.shapes = {\n            geographyKind: this.props.geographyKind, universe: this.props.universe, shapeType: st, data: (async () => {\n                return loadShapes(this.props.geographyKind, this.props.universe, st)\n            })() }\n\n        return this.shapes\n    }\n\n    async loadShapes(name: string): Promise<ActualShapeType> {\n        const mapShapes = this.getShapes()\n        const { nameToIndex, shapes } = await mapShapes.data\n        const index = nameToIndex.get(name)\n        assert(index !== undefined && index >= 0 && index < shapes.value.length, `Shape ${name} not found in ${mapShapes.geographyKind} for ${mapShapes.universe}`)\n        switch (shapes.type) {\n            case 'polygon':\n                return { type: 'polygon', value: shapes.value[index] as NormalizeProto<Feature> }\n            case 'point':\n                return { type: 'point', value: shapes.value[index] }\n        }\n    }\n\n    override async loadPolygon(name: string): Promise<NormalizeProto<Feature>> {\n        const res = await this.loadShapes(name)\n        assert(res.type === 'polygon', `Shape ${name} is not a polygon`)\n        return res.value\n    }\n\n    override async loadPoint(name: string): Promise<{ lon: number, lat: number }> {\n        const res = await this.loadShapes(name)\n        assert(res.type === 'point', `Shape ${name} is not a point`)\n        return res.value\n    }\n\n    override async computeShapesToRender(version: number): Promise<ShapeRenderingSpec> {\n        const stmts = this.props.uss\n        if (stmts === undefined) {\n            return { shapes: [], zoomIndex: -1 }\n        }\n        const result = await executeAsync({ descriptor: { kind: 'mapper', geographyKind: this.props.geographyKind, universe: this.props.universe }, stmts })\n        if (version === this.version) {\n            this.props.setErrors(result.error)\n        }\n        if (result.resultingValue === undefined) {\n            return { shapes: [], zoomIndex: -1 }\n        }\n        const mapResultMain = result.resultingValue.value\n        const mapResult = mapResultMain.value\n        const st: ShapeType = mapResultMain.opaqueType === 'pMap' ? 'point' : 'polygon'\n        this.shapeType = st\n\n        // Handle different map types\n        let lineStyle: { color: { r: number, g: number, b: number, a: number }, weight: number } | undefined\n        let pointSizes: number[] | undefined\n\n        if (mapResultMain.opaqueType === 'cMap') {\n            // For choropleth maps, use the outline\n            lineStyle = mapResultMain.value.outline\n        }\n        else {\n            const maxRadius = mapResultMain.value.maxRadius\n            const relativeArea = mapResultMain.value.relativeArea\n            pointSizes = relativeArea.map(area => Math.sqrt(area) * maxRadius)\n        }\n\n        const names = mapResult.geo\n        const ramp = mapResult.ramp\n        const scale = instantiate(mapResult.scale)\n        const interpolations = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1].map(scale.inverse)\n        this.props.rampCallback({ ramp, interpolations, scale, label: mapResult.label, unit: mapResult.unit })\n        this.props.basemapCallback(mapResult.basemap)\n        this.props.insetsCallback(mapResult.insets)\n        const colors = mapResult.data.map(\n            val => interpolateColor(ramp, scale.forward(val), this.props.colors.mapInvalidFillColor),\n        )\n        const specs = colors.map(\n            // no outline, set color fill, alpha=1\n            (color, i): ShapeSpec => {\n                switch (st) {\n                    case 'polygon':\n                        return {\n                            type: 'polygon',\n                            style: {\n                                fillColor: color,\n                                fillOpacity: 1,\n                                color: doRender(lineStyle!.color),\n                                weight: lineStyle!.weight,\n                            },\n                        }\n                    case 'point':\n                        return {\n                            type: 'point',\n                            style: {\n                                fillColor: color,\n                                fillOpacity: 1,\n                                radius: pointSizes![i],\n                            },\n                        }\n                }\n            },\n        )\n        const metas = mapResult.data.map((x) => { return { statistic: x } })\n        return {\n            shapes: names.map((name, i) => ({\n                name,\n                spec: specs[i],\n                meta: metas[i],\n            })),\n            zoomIndex: -1,\n        }\n    }\n\n    override progressivelyLoadShapes(): boolean {\n        return false\n    }\n}\n\nfunction Colorbar(props: { ramp: EmpiricalRamp | undefined }): ReactNode {\n    // do this as a table with 10 columns, each 10% wide and\n    // 2 rows. Top one is the colorbar, bottom one is the\n    // labels.\n    const colors = useColors()\n    if (props.ramp === undefined) {\n        return <div></div>\n    }\n    const label = props.ramp.label\n    const values = props.ramp.interpolations\n    const unit = props.ramp.unit\n\n    const createValue = (stat: number): ReactNode => {\n        return (\n            <div className=\"centered_text\">\n                <Statistic\n                    statname={label}\n                    value={stat}\n                    isUnit={false}\n                    unit={unit}\n                />\n                <Statistic\n                    statname={label}\n                    value={stat}\n                    isUnit={true}\n                    unit={unit}\n                />\n            </div>\n        )\n    }\n\n    const width = `${100 / values.length}%`\n\n    return (\n        <div>\n            <table style={{ width: '100%', height: '100%' }}>\n                <tbody>\n                    <tr>\n                        {\n                            values.map((x, i) => (\n                                <td\n                                    key={i}\n                                    style={\n                                        {\n                                            width, height: '1em',\n                                            backgroundColor: interpolateColor(props.ramp!.ramp, props.ramp!.scale.forward(x), colors.mapInvalidFillColor),\n                                        }\n                                    }\n                                >\n                                </td>\n                            ))\n                        }\n                    </tr>\n                    <tr>\n                        {\n                            values.map((x, i) => (\n                                <td key={i} style={{ width, height: '1em' }}>\n                                    {createValue(x)}\n                                </td>\n                            ))\n                        }\n                    </tr>\n                </tbody>\n            </table>\n            <div className=\"centered_text\">\n                {label}\n            </div>\n        </div>\n    )\n}\n\ninterface MapComponentProps {\n    geographyKind: typeof valid_geographies[number]\n    universe: Universe\n    mapRef: React.RefObject<DisplayedMap>\n    uss: UrbanStatsASTStatement | undefined\n    setErrors: (errors: EditorError[]) => void\n    colorbarRef: React.RefObject<HTMLDivElement>\n}\n\ninterface EmpiricalRamp {\n    ramp: Keypoints\n    scale: ScaleInstance\n    interpolations: number[]\n    label: string\n    unit?: UnitType\n}\n\nfunction MapComponent(props: MapComponentProps): ReactNode {\n    const [empiricalRamp, setEmpiricalRamp] = useState<EmpiricalRamp | undefined>(undefined)\n    const [basemap, setBasemap] = useState<Basemap>({ type: 'osm' })\n\n    const [currentInsets, setCurrentInsets] = useState<Insets>(loadInset(props.universe))\n\n    const aspectRatio = computeAspectRatioForInsets(currentInsets)\n\n    return (\n        <div style={{\n            display: 'flex',\n            flexDirection: 'column',\n        }}\n        >\n            <div style={{ height: '90%', width: '100%' }}>\n                <DisplayedMap\n                    geographyKind={props.geographyKind}\n                    universe={props.universe}\n                    rampCallback={(newRamp) => { setEmpiricalRamp(newRamp) }}\n                    basemapCallback={(newBasemap) => { setBasemap(newBasemap) }}\n                    insetsCallback={(newInsets) => { setCurrentInsets(newInsets) }}\n                    ref={props.mapRef}\n                    uss={props.uss}\n                    height={{ type: 'aspect-ratio', value: aspectRatio }}\n                    attribution=\"startVisible\"\n                    basemap={basemap}\n                    setErrors={props.setErrors}\n                    colors={useColors()}\n                    insets={currentInsets}\n                    key={JSON.stringify(currentInsets)}\n                />\n            </div>\n            <div style={{ height: '8%', width: '100%' }} ref={props.colorbarRef}>\n                <Colorbar\n                    ramp={empiricalRamp}\n                />\n            </div>\n        </div>\n    )\n}\n\nfunction saveAsFile(filename: string, data: string | Blob, type: string): void {\n    const blob = typeof data === 'string' ? new Blob([data], { type }) : data\n    const url = URL.createObjectURL(blob)\n    const link = document.createElement('a')\n    link.href = url\n    link.download = filename\n    document.body.appendChild(link)\n    link.click()\n    document.body.removeChild(link)\n}\n\nfunction Export(props: { mapRef: React.RefObject<DisplayedMap>, colorbarRef: React.RefObject<HTMLDivElement> }): ReactNode {\n    const colors = useColors()\n\n    const exportAsPng = async (): Promise<void> => {\n        if (props.mapRef.current === null) {\n            return\n        }\n        const colorbarElement = props.colorbarRef.current ?? undefined\n        const pngDataUrl = await props.mapRef.current.exportAsPng(colorbarElement, colors.background, colors.mapInsetBorderColor)\n        const data = await fetch(pngDataUrl)\n        const pngData = await data.blob()\n        saveAsFile('map.png', pngData, 'image/png')\n    }\n\n    const exportAsGeoJSON = async (): Promise<void> => {\n        if (props.mapRef.current === null) {\n            return\n        }\n        const geojson = await props.mapRef.current.exportAsGeoJSON()\n        saveAsFile('map.geojson', geojson, 'application/geo+json')\n    }\n\n    return (\n        <div style={{\n            display: 'flex',\n            gap: '0.5em',\n            margin: '0.5em 0',\n        }}\n        >\n            <button onClick={() => {\n                void exportAsPng()\n            }}\n            >\n                Export as PNG\n            </button>\n            <button onClick={() => {\n                void exportAsGeoJSON()\n            }}\n            >\n                Export as GeoJSON\n            </button>\n            <button onClick={() => {\n                // eslint-disable-next-line no-restricted-syntax -- We're opening a new window here\n                const params = new URLSearchParams(window.location.search)\n                params.set('view', 'true')\n                // navigate to the page in a new tab\n                window.open(`?${params.toString()}`, '_blank')\n            }}\n            >\n                View as Zoomable Page\n            </button>\n        </div>\n    )\n}\n\nexport function MapperPanel(props: { mapSettings: MapSettings, view: boolean, counts: CountsByUT }): ReactNode {\n    const [mapSettings, setMapSettings] = useState(props.mapSettings)\n    const [uss, setUSS] = useState<UrbanStatsASTStatement | undefined>(undefined)\n\n    const setMapSettingsWrapper = (newSettings: MapSettings): void => {\n        setMapSettings(newSettings)\n        const result = computeUSS(newSettings.script)\n        const errors = getAllParseErrors(result)\n        if (errors.length > 0) {\n            setErrors(errors.map(e => ({ ...e, kind: 'error' })))\n        }\n        setUSS(errors.length > 0 ? undefined : result)\n    }\n\n    useEffect(() => {\n        // So that map settings are updated when the prop changes\n        setMapSettingsWrapper(props.mapSettings)\n    }, [props.mapSettings])\n\n    const mapRef = useRef<DisplayedMap>(null)\n    const colorbarRef = useRef<HTMLDivElement>(null)\n\n    const jsonedSettings = JSON.stringify({\n        ...mapSettings,\n        script: {\n            uss: unparse(mapSettings.script.uss),\n        },\n    })\n\n    const navContext = useContext(Navigator.Context)\n\n    useEffect(() => {\n        if (props.mapSettings !== mapSettings) {\n            // gzip then base64 encode\n            const encodedSettings = gzipSync(jsonedSettings).toString('base64')\n            navContext.setMapperSettings(encodedSettings)\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- props.view won't be set except from the navigator\n    }, [jsonedSettings, navContext])\n\n    const [errors, setErrors] = useState<EditorError[]>([])\n\n    const mapperPanel = (): ReactNode => {\n        return (mapSettings.geographyKind === undefined || mapSettings.universe === undefined)\n            ? <DisplayResults results={[{ kind: 'error', type: 'error', value: 'Select a Universe and Geography Kind', location: noLocation }]} editor={false} />\n            : (\n                    <MapComponent\n                        geographyKind={mapSettings.geographyKind}\n                        universe={mapSettings.universe}\n                        uss={uss}\n                        mapRef={mapRef}\n                        setErrors={setErrors}\n                        colorbarRef={colorbarRef}\n                    />\n                )\n    }\n\n    const headerTextClass = useHeaderTextClass()\n\n    if (props.view) {\n        return mapperPanel()\n    }\n\n    return (\n        <PageTemplate>\n            <div>\n                <div className={headerTextClass}>Urban Stats Mapper (beta)</div>\n                <MapperSettings\n                    mapSettings={mapSettings}\n                    setMapSettings={setMapSettingsWrapper}\n                    errors={errors}\n                    counts={props.counts}\n                />\n                <Export\n                    mapRef={mapRef}\n                    colorbarRef={colorbarRef}\n                />\n                {\n                    mapperPanel()\n                }\n            </div>\n        </PageTemplate>\n    )\n}\n\nexport function mapSettingsFromURLParam(encodedSettings: string | undefined): MapSettings {\n    let settings: Partial<MapSettings> = {}\n    if (encodedSettings !== undefined) {\n        const jsonedSettings = gunzipSync(Buffer.from(encodedSettings, 'base64')).toString()\n        const rawSettings = z.object({\n            // Catch statements so we can remove universes/geos in the future and maps will still partially load\n            geographyKind: z.optional(z.enum(valid_geographies)).catch(undefined),\n            universe: z.optional(z.enum(universes_ordered)).catch(undefined),\n            script: z.object({\n                uss: z.string(),\n            }) }).parse(JSON.parse(jsonedSettings))\n        const uss = parse(rawSettings.script.uss)\n        if (uss.type === 'error') {\n            throw new Error(uss.errors.map(error => longMessage({ kind: 'error', ...error }, true)).join(', '))\n        }\n        settings = {\n            ...rawSettings,\n            script: { uss: convertToMapUss(uss) },\n        }\n    }\n    return defaultSettings(settings)\n}\n\nfunction convertToMapUss(uss: UrbanStatsASTStatement): MapUSS {\n    if (uss.type === 'expression' && uss.value.type === 'customNode') {\n        return uss.value\n    }\n    if (\n        uss.type === 'statements'\n        && uss.result.length === 2\n        && uss.result[0].type === 'expression'\n        && uss.result[0].value.type === 'customNode'\n        && uss.result[1].type === 'condition'\n        && uss.result[1].rest.length === 1\n        && uss.result[1].rest[0].type === 'expression'\n    ) {\n        return {\n            ...uss,\n            result: [\n                {\n                    ...uss.result[0],\n                    value: uss.result[0].value,\n                },\n                {\n                    ...uss.result[1],\n                    rest: [uss.result[1].rest[0]],\n                },\n            ],\n        }\n    }\n    // Support arbitrary scripts\n    return parseNoErrorAsCustomNode(unparse(uss), rootBlockIdent)\n}\n","export default [\n    \"world\",\n    \"Africa\",\n    \"Asia\",\n    \"Europe\",\n    \"North America\",\n    \"Oceania\",\n    \"South America\",\n    \"Andorra\",\n    \"United Arab Emirates\",\n    \"Afghanistan\",\n    \"Antigua and Barbuda\",\n    \"Anguilla\",\n    \"Albania\",\n    \"Armenia\",\n    \"Angola\",\n    \"Argentina\",\n    \"Austria\",\n    \"Australia\",\n    \"Aruba\",\n    \"Azerbaijan\",\n    \"Bosnia and Herzegovina\",\n    \"Barbados\",\n    \"Bangladesh\",\n    \"Belgium\",\n    \"Burkina Faso\",\n    \"Bulgaria\",\n    \"Bahrain\",\n    \"Burundi\",\n    \"Benin\",\n    \"Bermuda\",\n    \"Brunei\",\n    \"Bolivia\",\n    \"Brazil\",\n    \"The Bahamas\",\n    \"Bhutan\",\n    \"Botswana\",\n    \"Belarus\",\n    \"Belize\",\n    \"Canada\",\n    \"Cocos (Keeling) Islands\",\n    \"Democratic Republic of the Congo\",\n    \"Central African Republic\",\n    \"Congo\",\n    \"Switzerland\",\n    \"Ivory Coast\",\n    \"Cook Islands\",\n    \"Chile\",\n    \"Cameroon\",\n    \"China\",\n    \"Colombia\",\n    \"Costa Rica\",\n    \"Cuba\",\n    \"Cape Verde\",\n    \"Christmas Island\",\n    \"Cyprus\",\n    \"Czech Republic\",\n    \"Germany\",\n    \"Djibouti\",\n    \"Denmark\",\n    \"Dominica\",\n    \"Dominican Republic\",\n    \"Algeria\",\n    \"Ecuador\",\n    \"Estonia\",\n    \"Egypt\",\n    \"Eritrea\",\n    \"Spain\",\n    \"Ethiopia\",\n    \"Finland\",\n    \"Fiji\",\n    \"Falkland Islands\",\n    \"Micronesia\",\n    \"Faroe Islands\",\n    \"France\",\n    \"Gabon\",\n    \"United Kingdom\",\n    \"Grenada\",\n    \"Georgia\",\n    \"Guernsey\",\n    \"Ghana\",\n    \"Gibraltar\",\n    \"Greenland\",\n    \"The Gambia\",\n    \"Guinea\",\n    \"Equatorial Guinea\",\n    \"Greece\",\n    \"Guatemala\",\n    \"Guinea-Bissau\",\n    \"Guyana\",\n    \"Honduras\",\n    \"Croatia\",\n    \"Haiti\",\n    \"Hungary\",\n    \"Indonesia\",\n    \"Ireland\",\n    \"Israel\",\n    \"Isle of Man\",\n    \"India\",\n    \"Iraq\",\n    \"Iran\",\n    \"Iceland\",\n    \"Italy\",\n    \"Jersey\",\n    \"Jamaica\",\n    \"Jordan\",\n    \"Japan\",\n    \"Kenya\",\n    \"Kyrgyzstan\",\n    \"Cambodia\",\n    \"Kiribati\",\n    \"Comoros\",\n    \"Saint Kitts and Nevis\",\n    \"North Korea\",\n    \"South Korea\",\n    \"Kuwait\",\n    \"Cayman Islands\",\n    \"Kazakhstan\",\n    \"Laos\",\n    \"Lebanon\",\n    \"Saint Lucia\",\n    \"Liechtenstein\",\n    \"Sri Lanka\",\n    \"Liberia\",\n    \"Lesotho\",\n    \"Lithuania\",\n    \"Luxembourg\",\n    \"Latvia\",\n    \"Libya\",\n    \"Morocco\",\n    \"Monaco\",\n    \"Moldova\",\n    \"Montenegro\",\n    \"Madagascar\",\n    \"Marshall Islands\",\n    \"North Macedonia\",\n    \"Mali\",\n    \"Myanmar\",\n    \"Mongolia\",\n    \"Mauritania\",\n    \"Montserrat\",\n    \"Malta\",\n    \"Mauritius\",\n    \"Maldives\",\n    \"Malawi\",\n    \"Mexico\",\n    \"Malaysia\",\n    \"Mozambique\",\n    \"Namibia\",\n    \"Niger\",\n    \"Norfolk Island\",\n    \"Nigeria\",\n    \"Nicaragua\",\n    \"Netherlands\",\n    \"Norway\",\n    \"Nepal\",\n    \"Nauru\",\n    \"Niue\",\n    \"New Zealand\",\n    \"Oman\",\n    \"Panama\",\n    \"Peru\",\n    \"Papua New Guinea\",\n    \"Philippines\",\n    \"Pakistan\",\n    \"Poland\",\n    \"Pitcairn Islands\",\n    \"State of Palestine\",\n    \"Portugal\",\n    \"Palau\",\n    \"Paraguay\",\n    \"Qatar\",\n    \"Romania\",\n    \"Serbia\",\n    \"Russia\",\n    \"Rwanda\",\n    \"Saudi Arabia\",\n    \"Solomon Islands\",\n    \"Seychelles\",\n    \"Sudan\",\n    \"Sweden\",\n    \"Singapore\",\n    \"Saint Helena, Ascension and Tristan da Cunha\",\n    \"Slovenia\",\n    \"Slovakia\",\n    \"Sierra Leone\",\n    \"San Marino\",\n    \"Senegal\",\n    \"Somalia\",\n    \"Suriname\",\n    \"South Sudan\",\n    \"S\\u00e3o Tom\\u00e9 and Pr\\u00edncipe\",\n    \"El Salvador\",\n    \"Syria\",\n    \"Eswatini\",\n    \"Turks and Caicos Islands\",\n    \"Chad\",\n    \"Togo\",\n    \"Thailand\",\n    \"Tajikistan\",\n    \"Tokelau\",\n    \"East Timor\",\n    \"Turkmenistan\",\n    \"Tunisia\",\n    \"Tonga\",\n    \"Turkey\",\n    \"Trinidad and Tobago\",\n    \"Tuvalu\",\n    \"Tanzania\",\n    \"Ukraine\",\n    \"Uganda\",\n    \"USA\",\n    \"Uruguay\",\n    \"Uzbekistan\",\n    \"Vatican City\",\n    \"Saint Vincent and the Grenadines\",\n    \"Venezuela\",\n    \"British Virgin Islands\",\n    \"Vietnam\",\n    \"Vanuatu\",\n    \"Samoa\",\n    \"Yemen\",\n    \"South Africa\",\n    \"Zambia\",\n    \"Zimbabwe\",\n    \"Alabama, USA\",\n    \"Alaska, USA\",\n    \"Arizona, USA\",\n    \"Arkansas, USA\",\n    \"California, USA\",\n    \"Colorado, USA\",\n    \"Connecticut, USA\",\n    \"Delaware, USA\",\n    \"Florida, USA\",\n    \"Georgia, USA\",\n    \"Hawaii, USA\",\n    \"Idaho, USA\",\n    \"Illinois, USA\",\n    \"Indiana, USA\",\n    \"Iowa, USA\",\n    \"Kansas, USA\",\n    \"Kentucky, USA\",\n    \"Louisiana, USA\",\n    \"Maine, USA\",\n    \"Maryland, USA\",\n    \"Massachusetts, USA\",\n    \"Michigan, USA\",\n    \"Minnesota, USA\",\n    \"Mississippi, USA\",\n    \"Missouri, USA\",\n    \"Montana, USA\",\n    \"Nebraska, USA\",\n    \"Nevada, USA\",\n    \"New Hampshire, USA\",\n    \"New Jersey, USA\",\n    \"New Mexico, USA\",\n    \"New York, USA\",\n    \"North Carolina, USA\",\n    \"North Dakota, USA\",\n    \"Ohio, USA\",\n    \"Oklahoma, USA\",\n    \"Oregon, USA\",\n    \"Pennsylvania, USA\",\n    \"Rhode Island, USA\",\n    \"South Carolina, USA\",\n    \"South Dakota, USA\",\n    \"Tennessee, USA\",\n    \"Texas, USA\",\n    \"Utah, USA\",\n    \"Vermont, USA\",\n    \"Virginia, USA\",\n    \"Washington, USA\",\n    \"West Virginia, USA\",\n    \"Wisconsin, USA\",\n    \"Wyoming, USA\",\n    \"American Samoa, USA\",\n    \"Guam, USA\",\n    \"Northern Mariana Islands, USA\",\n    \"Puerto Rico, USA\",\n    \"US Virgin Islands, USA\",\n    \"District of Columbia, USA\",\n    \"Alberta, Canada\",\n    \"British Columbia, Canada\",\n    \"Manitoba, Canada\",\n    \"New Brunswick, Canada\",\n    \"Newfoundland and Labrador, Canada\",\n    \"Northwest Territories, Canada\",\n    \"Nova Scotia, Canada\",\n    \"Nunavut, Canada\",\n    \"Ontario, Canada\",\n    \"Prince Edward Island, Canada\",\n    \"Quebec, Canada\",\n    \"Saskatchewan, Canada\",\n    \"Yukon, Canada\"\n] as const","import { useEffect, useState } from 'react'\n\nexport class Property<T> {\n    private _value: T\n    readonly observers = new Set<() => void>()\n\n    constructor(value: T) {\n        this._value = value\n    }\n\n    get value(): T {\n        return this._value\n    }\n\n    set value(newValue: T) {\n        this._value = newValue\n        this.observers.forEach((observer) => { observer() })\n    }\n\n    /* eslint-disable react-hooks/rules-of-hooks -- Custom hook method */\n    use(): T {\n        const [, setCounter] = useState(0)\n        useEffect(() => {\n            const observer = (): void => {\n                setCounter(counter => counter + 1)\n            }\n            this.observers.add(observer)\n            return () => {\n                this.observers.delete(observer)\n            }\n        }, [])\n        return this.value\n    }\n    /* eslint-enable react-hooks/rules-of-hooks */\n}\n"],"names":["settingNameStyle","bitap","haystack","needle","maxErrors","sb","errors","matchMask","search","j","charMatch","errors1","BetterSelector","param","value","onChange","possibleValues","renderValue","colors","useColors","selectedRendered","_useState","searchValue","setSearchValue","_useState1","isOpen","setIsOpen","_useState2","highlightedIndex","setHighlightedIndex","inputRef","useRef","menuRef","useEffect","_useMemo","optionsResult","choice","index","longestSelectionPossibility","acc","poss","Math","Array","Uint32Array","bitapBuffers","options","sortedOptions","useMemo","token","bitapAlphabet","assert","alphabet","i","char","toSignature","str","result","charCode","firstOccurence","a","b","aScore","bScore","handleOptionSelect","option","newValue","stableStringify","e","prev","setTimeout","_inputRef_current","SelectionContext","createContext","Property","undefined","CustomEditor","uss","setUss","typeEnvironment","blockIdent","placeholder","ourErrors","selectionContext","useContext","selection","Editor","u","parseNoErrorAsCustomNode","range","_selectionContext_value","shouldShowConstant","type","possibilities","target","env","results","t","renderedTypes","renderType","variables","functions","_iteratorError","name","_env_get_documentation_priority","_env_get_documentation_priority1","aPriority","_results","_results1","Selector","props","selected","classifyExpr","selectionPossibilities","allPossibilities","Set","typePossibilities","possibility","renderPossibility","useCallback","renderSelection","_typeEnvironment_get_documentation","doc","isNumber","isString","showConstantInput","currentValue","errorComponent","DisplayResults","colorValue","getColor","select","node","numberValue","newUss","parseNumber","emptyLocation","doRender","newColor","hexToColor","newColorUss","hsvColorExpression","rgbColorExpression","parseNoErrorAsExpression","parseExpr","Error","classifiedFn","expr","reference","posArgs","arg","kwArg","alpha","rgbColor","rgbToColor","hsvColor","hsvToColor","createDefaultExpression","_tdoc_documentation","tdoc","getDefaultVariable","getDefaultFunction","ArgumentEditor","_tdoc_documentation_namedArgs_props_name","functionUss","argValue","hasDefault","isEnabled","subident","extendBlockIdKwarg","humanReadableName","CheckboxSettingCustom","checked","defaultExpr","exprToUse","newArg","newArgs","newArgs1","AutoUXEditor","_subcomponent","subc","doesConsume","_props_label_length","_props_labelWidth","ussLoc","locationOf","console","labelWidth","_wrappedSubcomponent","subselectors","extendBlockIdPositionalArg","Object","_argWDefault_documentation","argWDefault","elementType","el","newEl","newElements","extendBlockIdVectorElement","_","propertiesTypes","DefaultMap","key","_uss_properties_find_","propertyType","k","extendBlockIdObjectProperty","newVal","v","wrapped","leftSegment","rightSegment","defaultForSelection","current","deconstructed","deconstruct","_reference_documentation","equiv","valid","maybeParseExpr","color","parsed","unparse","twoLines","useMobileLayout","_typeEnvironment_get","varType","fn","args","needed","arg1","types","fallback","preserveCustomNodes","attemptParseExpr","elementTypes","elem","idx","exprProps","compatibleTypes","_attemptParseExpr","stmts","validVariableSelections","s","validFunctionSelections","fnType","positionals","nameds","names","ConditionEditor","condition","setCondition","conditionIsCustom","currentCondition","PreambleEditor","preamble","setPreamble","showPreamble","setShowPreamble","makeStatements","elements","identFallback","locations","unify","validMapperOutputs","idPreamble","idCondition","idOutput","TopLevelEditor","attemptParseAsTopLevel","newConditionExpr","conditionStatement","stmt","_attemptParseCondition","conditionStmt","conditionText","conditionRest","conditionExpr","body","MapperSettings","mapSettings","setMapSettings","counts","_useUndoRedo","TestUtils","addState","updateCurrentSelection","observer","defaultTypeEnvironment","renderString","universe","universes","universes_ordered","geographyKinds","articleTypes","changeSettingsWithUndo","newSettings","newUniverse","newGeographyKind","DisplayedMap","shouldHaveLoadingSpinner","getShapes","st","geographyKind","idxLink","articles","universeIdx","shapes","longnames","features","loadProtobuf","consolidatedShapeLink","Map","r","indexLink","loadCentroids","centroids","c","loadShapes","mapShapes","_ref","nameToIndex","loadPolygon","res","loadPoint","computeShapesToRender","version","mapResultMain","mapResult","lineStyle","pointSizes","maxRadius","ramp","scale","interpolations","specs","metas","executeAsync","relativeArea","area","instantiate","val","interpolateColor","x","progressivelyLoadShapes","MapGeneric","Colorbar","label","values","unit","width","Statistic","MapComponent","empiricalRamp","setEmpiricalRamp","basemap","setBasemap","loadInset","currentInsets","setCurrentInsets","aspectRatio","computeAspectRatioForInsets","newRamp","newBasemap","newInsets","JSON","saveAsFile","filename","data","blob","Blob","url","URL","link","document","Export","_props_colorbarRef_current","colorbarElement","fetch","params","URLSearchParams","window","MapperPanel","setUSS","setMapSettingsWrapper","toStatement","getAllParseErrors","setErrors","mapRef","colorbarRef","jsonedSettings","navContext","Navigator","encodedSettings","gzipSync","mapperPanel","noLocation","headerTextClass","useHeaderTextClass","PageTemplate","mapSettingsFromURLParam","addTo","_addTo_script_uss","_addTo_universe","_addTo_geographyKind","_addTo_universe1","settings","gunzipSync","Buffer","rawSettings","z","valid_geographies","parse","error","longMessage","use","setCounter","counter"],"mappings":"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ACA,SACA,0BACA,mCACA,2BACA,QACA,cACA,cACA,eACA,QACA,WACA,QACA,WACA,aACA,OACA,aACA,mBACA,SACA,iBACA,UACA,WACA,UACA,WACA,qBACA,UACA,UACA,UACA,QACA,UACA,QACA,WACA,UACA,OACA,mBACA,aACA,gBACA,SACA,QACA,iBACA,UACA,UACA,WACA,QACA,YACA,YACA,aACA,SACA,oBACA,SACA,YACA,gBACA,SACA,WACA,UACA,QACA,UACA,YACA,UACA,SACA,cACA,QACA,OACA,OACA,UACA,QACA,SACA,UACA,SACA,QACA,QACA,aACA,WACA,WACA,UACA,wBACA,cACA,cACA,SACA,iBACA,aACA,OACA,UACA,cACA,gBACA,YACA,UACA,UACA,YACA,aACA,SACA,QACA,UACA,SACA,UACA,aACA,aACA,mBACA,kBACA,OACA,UACA,WACA,aACA,aACA,QACA,YACA,WACA,SACA,SACA,WACA,aACA,UACA,QACA,iBACA,UACA,YACA,cACA,SACA,QACA,QACA,OACA,cACA,OACA,SACA,OACA,mBACA,cACA,WACA,SACA,mBACA,qBACA,WACA,QACA,WACA,QACA,UACA,SACA,SACA,SACA,eACA,kBACA,aACA,QACA,SACA,YACA,+CACA,WACA,WACA,eACA,aACA,UACA,UACA,WACA,cACA,iCACA,cACA,QACA,WACA,2BACA,OACA,OACA,WACA,aACA,UACA,aACA,eACA,UACA,QACA,SACA,sBACA,SACA,WACA,UACA,SACA,MACA,UACA,aACA,eACA,mCACA,YACA,yBACA,UACA,UACA,QACA,QACA,eACA,SACA,WACA,eACA,cACA,eACA,gBACA,kBACA,gBACA,mBACA,gBACA,eACA,eACA,cACA,aACA,gBACA,eACA,YACA,cACA,gBACA,iBACA,aACA,gBACA,qBACA,gBACA,iBACA,mBACA,gBACA,eACA,gBACA,cACA,qBACA,kBACA,kBACA,gBACA,sBACA,oBACA,YACA,gBACA,cACA,oBACA,oBACA,sBACA,oBACA,iBACA,aACA,YACA,eACA,gBACA,kBACA,qBACA,iBACA,eACA,sBACA,YACA,gCACA,mBACA,yBACA,4BACA,kBACA,2BACA,mBACA,wBACA,oCACA,gCACA,sBACA,kBACA,kBACA,+BACA,iBACA,uBACA,gBACH,A,sRCpSM,IAAMH,EAAN,e,WAAMA,EAIG3D,CAAQ,E,qBAJX2D,C,uDACT,OAAQ,SAAR,QACA,OAAS,YAAY,IAAIyC,KAGrB,IAAI,CAAC,MAAM,CAAGpG,C,UALT2D,C,CAQL,Y,IAAJ,WACI,OAAO,IAAI,CAAC,MAAM,AACtB,E,IAEA,SAAUR,CAAW,EACjB,IAAI,CAAC,MAAM,CAAGA,EACd,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,SAAC6N,CAAQ,EAAOA,GAAW,EACtD,C,GAGAgI,IAAAA,M,MAAAA,W,aACaC,EAAc1Y,C,EAAAA,AAAAA,GAAAA,EAAAA,QAAAA,AAAAA,EAAS,G,mWAAA,I,qDAAA,G,8OAAA,I,4KAATA,CAAAA,EAAAA,CAUvB,MATAY,AAAAA,GAAAA,EAAAA,SAAAA,AAAAA,EAAU,WACN,IAAM6P,EAAW,WACbiI,EAAWC,SAAAA,CAAO,E,OAAIA,EAAU,C,EACpC,EAEA,OADAhU,EAAK,SAAS,CAAC,GAAG,CAAC8L,GACZ,WACH9L,EAAK,SAAS,CAAC,MAAM,CAAC8L,EAC1B,CACJ,EAAG,EAAE,EACE,IAAI,CAAC,KAAK,AACrB,C,wKA9BSrN,E,aAAAA,C"}