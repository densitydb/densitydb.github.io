{"version":3,"file":"805.js","sources":["webpack://assets/./src/components/map.css","webpack://assets/./src/components/map.css?b72c","webpack://assets/./src/components/map.tsx","webpack://assets/./src/components/screenshot-map.tsx","webpack://assets/./src/utils/coordinates.ts","webpack://assets/./src/data/localized_type_names.ts","webpack://assets/./src/utils/text.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_GET_URL_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/getUrl.js\";\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 width=%2729%27 height=%2729%27 fill=%27%23333%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M24 16v5.5c0 1.75-.75 2.5-2.5 2.5H16v-1l3-1.5-4-5.5 1-1 5.5 4 1.5-3zM6 16l1.5 3 5.5-4 1 1-4 5.5 3 1.5v1H7.5C5.75 24 5 23.25 5 21.5V16zm7-11v1l-3 1.5 4 5.5-1 1-5.5-4L6 13H5V7.5C5 5.75 5.75 5 7.5 5zm11 2.5c0-1.75-.75-2.5-2.5-2.5H16v1l3 1.5-4 5.5 1 1 5.5-4 1.5 3h1z%27/%3E%3C/svg%3E\", import.meta.url);\nvar ___CSS_LOADER_URL_IMPORT_1___ = new URL(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 width=%2729%27 height=%2729%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M18.5 16c-1.75 0-2.5.75-2.5 2.5V24h1l1.5-3 5.5 4 1-1-4-5.5 3-1.5v-1zM13 18.5c0-1.75-.75-2.5-2.5-2.5H5v1l3 1.5L4 24l1 1 5.5-4 1.5 3h1zm3-8c0 1.75.75 2.5 2.5 2.5H24v-1l-3-1.5L25 5l-1-1-5.5 4L17 5h-1zM10.5 13c1.75 0 2.5-.75 2.5-2.5V5h-1l-1.5 3L5 4 4 5l4 5.5L5 12v1z%27/%3E%3C/svg%3E\", import.meta.url);\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_1___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/* Style fullscreen/shrink controls to match \"Zoom to\" controls */\n.maplibregl-ctrl-top-left .maplibregl-ctrl.maplibregl-ctrl-group:has(.maplibregl-ctrl-fullscreen, .maplibregl-ctrl-shrink) {\n    margin: 1em;\n    padding: calc((3em - 29px) / 2); /* (height of zoom button + 2*padding of flex container - height of icon)/2 */\n    background-color: var(--background);\n    box-shadow: none;\n\n    > button:hover:not(:disabled) {\n        background-color: var(--slightly-different-background-focused);\n    }\n\n    > button.maplibregl-ctrl-fullscreen .maplibregl-ctrl-icon {\n        mask-image: url(${___CSS_LOADER_URL_REPLACEMENT_0___});\n        background-color: var(--text-main);\n        background-image: none;\n    }\n\n    > button.maplibregl-ctrl-shrink .maplibregl-ctrl-icon {\n        mask-image: url(${___CSS_LOADER_URL_REPLACEMENT_1___});\n        background-color: var(--text-main);\n        background-image: none;\n    }\n}\n\n.maplibregl-ctrl-attrib {\n    transform: scale(0.85);\n    transform-origin: bottom right;\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/map.css\"],\"names\":[],\"mappings\":\"AAAA,iEAAiE;AACjE;IACI,WAAW;IACX,+BAA+B,EAAE,6EAA6E;IAC9G,mCAAmC;IACnC,gBAAgB;;IAEhB;QACI,8DAA8D;IAClE;;IAEA;QACI,mDAAyb;QACzb,kCAAkC;QAClC,sBAAsB;IAC1B;;IAEA;QACI,mDAA2a;QAC3a,kCAAkC;QAClC,sBAAsB;IAC1B;AACJ;;AAEA;IACI,sBAAsB;IACtB,8BAA8B;AAClC\",\"sourcesContent\":[\"/* Style fullscreen/shrink controls to match \\\"Zoom to\\\" controls */\\n.maplibregl-ctrl-top-left .maplibregl-ctrl.maplibregl-ctrl-group:has(.maplibregl-ctrl-fullscreen, .maplibregl-ctrl-shrink) {\\n    margin: 1em;\\n    padding: calc((3em - 29px) / 2); /* (height of zoom button + 2*padding of flex container - height of icon)/2 */\\n    background-color: var(--background);\\n    box-shadow: none;\\n\\n    > button:hover:not(:disabled) {\\n        background-color: var(--slightly-different-background-focused);\\n    }\\n\\n    > button.maplibregl-ctrl-fullscreen .maplibregl-ctrl-icon {\\n        mask-image: url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='29' height='29' fill='%23333' viewBox='0 0 29 29'%3E%3Cpath d='M24 16v5.5c0 1.75-.75 2.5-2.5 2.5H16v-1l3-1.5-4-5.5 1-1 5.5 4 1.5-3zM6 16l1.5 3 5.5-4 1 1-4 5.5 3 1.5v1H7.5C5.75 24 5 23.25 5 21.5V16zm7-11v1l-3 1.5 4 5.5-1 1-5.5-4L6 13H5V7.5C5 5.75 5.75 5 7.5 5zm11 2.5c0-1.75-.75-2.5-2.5-2.5H16v1l3 1.5-4 5.5 1 1 5.5-4 1.5 3h1z'/%3E%3C/svg%3E\\\");\\n        background-color: var(--text-main);\\n        background-image: none;\\n    }\\n\\n    > button.maplibregl-ctrl-shrink .maplibregl-ctrl-icon {\\n        mask-image: url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='29' height='29' viewBox='0 0 29 29'%3E%3Cpath d='M18.5 16c-1.75 0-2.5.75-2.5 2.5V24h1l1.5-3 5.5 4 1-1-4-5.5 3-1.5v-1zM13 18.5c0-1.75-.75-2.5-2.5-2.5H5v1l3 1.5L4 24l1 1 5.5-4 1.5 3h1zm3-8c0 1.75.75 2.5 2.5 2.5H24v-1l-3-1.5L25 5l-1-1-5.5 4L17 5h-1zM10.5 13c1.75 0 2.5-.75 2.5-2.5V5h-1l-1.5 3L5 4 4 5l4 5.5L5 12v1z'/%3E%3C/svg%3E\\\");\\n        background-color: var(--text-main);\\n        background-image: none;\\n    }\\n}\\n\\n.maplibregl-ctrl-attrib {\\n    transform: scale(0.85);\\n    transform-origin: bottom right;\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../node_modules/css-loader/dist/cjs.js!./map.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../node_modules/css-loader/dist/cjs.js!./map.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import stableStringify from 'json-stable-stringify'\nimport maplibregl, { setRTLTextPlugin } from 'maplibre-gl'\nimport 'maplibre-gl/dist/maplibre-gl.css'\nimport React, { CSSProperties, ReactNode, RefObject, useEffect, useRef, useState } from 'react'\n\nimport './map.css'\n\nimport { boundingBox, extendBoxes, geometry } from '../map-partition'\nimport { Basemap } from '../mapper/settings/utils'\nimport { Navigator } from '../navigation/Navigator'\nimport { LongLoad } from '../navigation/loading'\nimport { useColors } from '../page_template/colors'\nimport { relatedSettingsKeys, relationshipKey, useSetting, useSettings } from '../page_template/settings'\nimport { debugPerformance } from '../search'\nimport { Property } from '../utils/Property'\nimport { TestUtils } from '../utils/TestUtils'\nimport { randomColor } from '../utils/color'\nimport { computeAspectRatioForInsets } from '../utils/coordinates'\nimport { assert } from '../utils/defensive'\nimport { isHistoricalCD } from '../utils/is_historical'\nimport { Feature, IRelatedButton, IRelatedButtons } from '../utils/protos'\nimport { loadShapeFromPossibleSymlink } from '../utils/symlinks'\nimport { NormalizeProto } from '../utils/types'\n\nimport { mapBorderRadius, mapBorderWidth, useScreenshotMode, screencapElement } from './screenshot'\nimport { renderMap } from './screenshot-map'\n\nexport const defaultMapPadding = 20\n\nexport interface Inset { bottomLeft: [number, number], topRight: [number, number], coordBox: [number, number, number, number], mainMap: boolean, name?: string }\nexport type Insets = Inset[]\nexport type MapHeight =\n    | { type: 'fixed-height', value: number | string }\n    | { type: 'aspect-ratio', value: number }\n\nexport type EditSingleInset = (newInset: Partial<Inset>) => void\nexport type EditMultipleInsets = (index: number, newInset: Partial<Inset>) => void\nexport interface EditInsets { doEdit: EditMultipleInsets, subscribeChanges: Property<Inset>[] }\n\nexport interface MapGenericProps {\n    height?: MapHeight\n    basemap: Basemap\n    attribution: 'none' | 'startHidden' | 'startVisible'\n    insets?: Insets\n    editInsets?: EditInsets\n    dropEmptyInsets?: boolean\n}\n\nexport interface Shape {\n    name: string\n    spec: ShapeSpec\n    meta: Record<string, unknown>\n    notClickable?: boolean\n}\nexport interface ShapeRenderingSpec {\n    shapes: Shape[]\n    zoomIndex: number\n}\n\nexport interface MapState {\n    loading: boolean\n    mapIsVisible: boolean[]\n    shapeByName: Map<string, [ShapeType, GeoJSON.Feature]>\n}\n\nexport type ShapeSpec = {\n    type: 'polygon'\n    style: {\n        fillColor: string\n        fillOpacity: number\n        color: string\n        weight?: number\n    }\n} | {\n    type: 'point'\n    style: {\n        fillColor: string\n        fillOpacity: number\n        radius: number\n    }\n}\n\nexport type ShapeType = ShapeSpec['type']\n\nconst activeMaps: MapGeneric<MapGenericProps>[] = []\n\nclass CustomAttributionControl extends maplibregl.AttributionControl {\n    constructor(startShowingAttribution: boolean) {\n        super()\n\n        // Copied from implementation https://github.com/maplibre/maplibre-gl-js/blob/34b95c06259014661cf72a418fd81917313088bf/src/ui/control/attribution_control.ts#L190\n        // But reduced since always compact\n        this._updateCompact = () => {\n            if (!this._container.classList.contains('maplibregl-compact') && !this._container.classList.contains('maplibregl-attrib-empty')) {\n                this._container.classList.add('maplibregl-compact')\n                if (startShowingAttribution) {\n                    this._container.setAttribute('open', '')\n                    this._container.classList.add('maplibregl-compact-show')\n                }\n            }\n        }\n    }\n}\n\nclass MapHandler {\n    public ids: string[]\n    public mainMaps: boolean[] = []\n    public maps: maplibregl.Map[] | undefined = undefined\n    private ensureStyleLoaded: Promise<void> | undefined = undefined\n\n    constructor(mainMaps: boolean[]) {\n        this.ids = Array.from({ length: mainMaps.length }, (_, i) => `map-${i}-${Math.random().toString(36).substring(2)}`)\n        this.mainMaps = mainMaps\n    }\n\n    initialize(onClick: (name: string) => void, editInsets?: EditMultipleInsets): void {\n        [this.maps, this.ensureStyleLoaded] = createMaps(this.ids, this.mainMaps, onClick, editInsets)\n    }\n\n    container(): HTMLElement {\n        assert(this.maps !== undefined, 'Map must be initialized before accessing container')\n        return this.maps[0].getContainer()\n    }\n\n    async getMaps(): Promise<maplibregl.Map[]> {\n        while (this.maps === undefined) {\n            await new Promise(resolve => setTimeout(resolve, 10))\n        }\n        return this.maps\n    }\n\n    async ensureStyleLoadedFn(): Promise<maplibregl.Map[]> {\n        while (this.ensureStyleLoaded === undefined) {\n            await new Promise(resolve => setTimeout(resolve, 10))\n        }\n        await this.ensureStyleLoaded\n        return await this.getMaps()\n    }\n\n    async stylesheetPresent(): Promise<maplibregl.Map[]> {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- it can in fact be undefined, this is undocumented\n        if (this.maps?.every(map => map.style.stylesheet !== undefined)) {\n            return this.maps\n        }\n        await new Promise(resolve => setTimeout(resolve, 10))\n        return await this.stylesheetPresent()\n    }\n}\n\nlet rtlConfigured = false\n\nfunction configRTL(): void {\n    if (rtlConfigured) {\n        return\n    }\n    void setRTLTextPlugin('https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.3.0/dist/mapbox-gl-rtl-text.js', true)\n    rtlConfigured = true\n}\n\nfunction createMap(\n    id: string,\n    onClick: (name: string) => void,\n    fullMap: boolean,\n    editInset?: EditSingleInset,\n): [maplibregl.Map, Promise<void>] {\n    configRTL()\n    const map = new maplibregl.Map({\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        container: id,\n        scrollZoom: fullMap || !!editInset,\n        dragPan: fullMap || !!editInset,\n        dragRotate: false,\n        canvasContextAttributes: {\n            preserveDrawingBuffer: true,\n        },\n        pixelRatio: TestUtils.shared.isTesting ? 0.1 : undefined, // e2e tests often run with a software renderer, this saves time\n        attributionControl: false,\n    })\n\n    TestUtils.shared.maps.set(id, new WeakRef(map))\n\n    if (fullMap) {\n        map.addControl(new maplibregl.FullscreenControl(), 'top-left')\n        map.on('mouseover', 'polygon', () => {\n            map.getCanvas().style.cursor = 'pointer'\n        })\n        map.on('mouseleave', 'polygon', () => {\n            map.getCanvas().style.cursor = ''\n        })\n        map.on('click', 'polygon', (e) => {\n            const features = e.features!\n            const names = features.filter(feature => !feature.properties.notClickable).map(feature => feature.properties.name as string)\n            if (names.length === 0) {\n                return\n            }\n            onClick(names[0])\n        })\n    }\n\n    const ensureStyleLoaded = new Promise(resolve => map.on('style.load', resolve)) satisfies Promise<void>\n    return [map, ensureStyleLoaded]\n}\n\nfunction createMaps(\n    ids: string[],\n    mainMaps: boolean[],\n    onClick: (name: string) => void,\n    editInsets?: EditMultipleInsets,\n): [maplibregl.Map[], Promise<void>] {\n    const maps = []\n    const ensureStyleLoadeds = []\n    for (const [i, id] of ids.entries()) {\n        const [map, ensureStyleLoaded] = createMap(id, onClick, mainMaps[i], editInsets !== undefined ? (newInset) => { editInsets(i, newInset) } : undefined)\n        maps.push(map)\n        ensureStyleLoadeds.push(ensureStyleLoaded)\n    }\n    const ensureStyleLoaded = Promise.all(ensureStyleLoadeds).then(() => undefined) satisfies Promise<void>\n    return [maps, ensureStyleLoaded]\n}\n\nconst potentialOutlineLayerIds = [\n    'boundary_subn_overlayed',\n] as const\n\n// eslint-disable-next-line prefer-function-component/prefer-function-component  -- TODO: Maps don't support function components yet.\nexport abstract class MapGeneric<P extends MapGenericProps> extends React.Component<P, MapState> {\n    protected version = 0\n    protected versionProps: P // Used to avoid race conditions\n    private lastUpdate: Promise<void> | undefined\n    private basemap_props: null | Basemap = null\n    private exist_this_time: string[] = []\n    private attributionControl: CustomAttributionControl | undefined\n    protected handler: MapHandler\n    private hasZoomed = false\n    private containerRef = React.createRef<HTMLDivElement>()\n\n    constructor(props: P) {\n        super(props)\n        this.versionProps = props\n        this.state = { loading: true, shapeByName: new Map(), mapIsVisible: this.insets().map(() => true) }\n        activeMaps.push(this)\n        this.handler = new MapHandler(this.insets().map(inset => inset.mainMap))\n    }\n\n    insets(): Insets {\n        return this.props.insets ?? [{ bottomLeft: [0, 0], topRight: [1, 1], mainMap: true, coordBox: [-90, -90, 90, 90] }]\n    }\n\n    /* Override if you want the loading spinner */\n    shouldHaveLoadingSpinner(): boolean {\n        return false\n    }\n\n    override render(): ReactNode {\n        return (\n            <>\n                <input type=\"hidden\" data-test-loading={this.state.loading} />\n                <div style={{ position: 'relative', ...this.mapStyle() }} ref={this.containerRef}>\n                    {this.insets().map((bbox, i) => (\n                        <MapBody\n                            key={this.handler.ids[i]}\n                            id={this.handler.ids[i]}\n                            height=\"100%\"\n                            buttons={this.buttons()}\n                            bboxProp={this.props.editInsets?.subscribeChanges[i] ?? new Property(bbox)}\n                            insetBoundary={i > 0}\n                            visible={this.state.mapIsVisible[i]}\n                            editInset={this.props.editInsets !== undefined ? (newInset: Partial<Inset>) => { this.props.editInsets?.doEdit(i, newInset) } : undefined}\n                            container={this.containerRef}\n                            getMap={() => this.handler.maps?.[i]}\n                        />\n                    ))}\n                    <LongLoad containerStyleOverride={{\n                        position: 'absolute',\n                        transition: 'opacity 0.25s',\n                        opacity: this.state.loading && this.shouldHaveLoadingSpinner() ? 1 : 0,\n                        pointerEvents: 'none',\n                    }}\n                    />\n                </div>\n                <div style={{ display: 'none' }}>\n                    {Array.from(this.state.shapeByName.keys()).map(name =>\n                        // eslint-disable-next-line react/no-unknown-property -- this is a custom property\n                        <div key={name} clickable-polygon={name} onClick={() => { this.onClick(name) }} />,\n                    )}\n                </div>\n            </>\n        )\n    }\n\n    mapHeight(): number | string {\n        const height = this.props.height ?? { type: 'fixed-height', value: 400 }\n        if (height.type === 'aspect-ratio') {\n            return '100%'\n        }\n        return height.value\n    }\n\n    mapStyle(): React.CSSProperties {\n        const height = this.props.height ?? { type: 'fixed-height', value: 400 }\n        if (height.type === 'aspect-ratio') {\n            return {\n                aspectRatio: height.value.toString(),\n                width: '100%',\n                minHeight: '300px',\n            }\n        }\n        return {\n            height: height.value,\n            width: '100%',\n        }\n    }\n\n    buttons(): ReactNode {\n        return <></>\n    }\n\n    /**\n     * Should return [names, styles, metas, zoom_index]\n     * names: list of names of polygons to draw\n     * styles: list of styles for each polygon\n     * metas: list of metadata dictionaries for each polygon\n     * zoom_index: index of polygon to zoom to, or -1 if none\n     */\n    abstract computeShapesToRender(version: number): Promise<ShapeRenderingSpec>\n\n    async mapDidRender(): Promise<void> {\n        /**\n             * Called after the map is rendered\n             */\n    }\n\n    async loadPolygon(name: string): Promise<NormalizeProto<Feature>> {\n        return await loadShapeFromPossibleSymlink(name) as NormalizeProto<Feature>\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- unimplemented\n    loadPoint(name: string): Promise<{ lon: number, lat: number }> {\n        throw new Error('loadPoint not implemented by default')\n    }\n\n    subnationalOutlines(): (maplibregl.LayerSpecification & ({ id: typeof potentialOutlineLayerIds[number] }))[] {\n        const basemap = this.props.basemap\n        if (basemap.type !== 'osm' || !basemap.subnationalOutlines) {\n            return []\n        }\n        return [\n            {\n                'id': 'boundary_subn_overlayed',\n                'type': 'line',\n                'source': 'openmaptiles',\n                'source-layer': 'boundary',\n                'filter': [\n                    'all',\n                    [\n                        '<=',\n                        [\n                            'get',\n                            'admin_level',\n                        ],\n                        4,\n                    ],\n                    [\n                        '!=',\n                        [\n                            'get',\n                            'maritime',\n                        ],\n                        1,\n                    ],\n                    [\n                        '!=',\n                        [\n                            'get',\n                            'disputed',\n                        ],\n                        1,\n                    ],\n                    [\n                        '!',\n                        [\n                            'has',\n                            'claimed_by',\n                        ],\n                    ],\n                ],\n                'paint': {\n                    'line-color': basemap.subnationalOutlines.color,\n                    'line-width': basemap.subnationalOutlines.weight,\n                },\n            },\n        ]\n    }\n\n    private cleanup: (() => void)[] = []\n\n    override async componentDidMount(): Promise<void> {\n        this.handler.initialize((name) => { this.onClick(name) }, this.props.editInsets?.doEdit)\n        const maps = await this.handler.getMaps()\n        const insets = this.insets()\n        assert(maps.length === insets.length, `Expected ${insets.length} maps, got ${maps.length}`)\n        for (const i of insets.keys()) {\n            const map = maps[i]\n            map.fitBounds(mapBoundsFromInset(insets[i]), { animate: false })\n\n            if (this.props.editInsets) {\n                const editInsets = this.props.editInsets.doEdit\n                const insetProps = this.props.editInsets.subscribeChanges\n\n                const getCoordBox = (): [number, number, number, number] => {\n                    const mapBounds = map.getBounds()\n                    const sw = mapBounds.getSouthWest()\n                    const ne = mapBounds.getNorthEast()\n                    return [sw.lng, sw.lat, ne.lng, ne.lat]\n                }\n\n                void map.once('load', () => {\n                    let lastCoordBox = getCoordBox()\n\n                    let nonUserPanZoomOcurring = false\n\n                    const panZoomHandler = (): void => {\n                        if (nonUserPanZoomOcurring) {\n                            return\n                        }\n                        const newCoordBox = getCoordBox()\n                        if (stableStringify(newCoordBox) !== stableStringify(lastCoordBox)) {\n                            editInsets(i, { coordBox: newCoordBox })\n                            lastCoordBox = newCoordBox\n                        }\n                    }\n\n                    map.on('zoomend', panZoomHandler)\n                    map.on('moveend', panZoomHandler)\n\n                    const observer = (): void => {\n                        nonUserPanZoomOcurring = true\n                        let fit = false\n                        if (stableStringify(getCoordBox()) !== stableStringify(insetProps[i].value.coordBox)) {\n                            fit = true\n                        }\n                        // This is a hack that should be fixed with Map2\n                        setTimeout(() => {\n                            if (fit) {\n                                map.fitBounds(mapBoundsFromInset(insetProps[i].value), { animate: false })\n                            }\n                            setTimeout(() => {\n                                nonUserPanZoomOcurring = false\n                            }, 100)\n                        }, 100)\n                    }\n\n                    insetProps[i].observers.add(observer)\n\n                    this.cleanup.push(() => {\n                        map.off('zoomend', panZoomHandler)\n                        map.off('moveend', panZoomHandler)\n                        insetProps[i].observers.delete(observer)\n                    })\n                })\n            }\n        }\n        this.hasZoomed = true\n        await this.componentDidUpdate(this.props, this.state)\n    }\n\n    override componentWillUnmount(): void {\n        this.cleanup.forEach((cb) => { cb() })\n        this.cleanup = []\n    }\n\n    onClick(name: string): void {\n        void this.context.navigate({\n            kind: 'article',\n            universe: this.context.universe,\n            longname: name,\n        }, { history: 'push', scroll: { kind: 'element', element: this.handler.container() } })\n    }\n\n    colorbarDimensions(colorbarElement: HTMLElement | undefined, maxWidth: number, maxHeight: number): { width: number, height: number } {\n        if (colorbarElement === undefined) {\n            return { width: 0, height: 0 }\n        }\n        let width = colorbarElement.offsetWidth\n        let height = colorbarElement.offsetHeight\n        {\n            // do this no matter what, to fill the space\n            const scale = maxHeight / height\n            height = maxHeight\n            width = width * scale\n        }\n        if (width > maxWidth) {\n            // rescale if it is now too wide\n            const scale = maxWidth / width\n            width = maxWidth\n            height = height * scale\n        }\n        return { width, height }\n    }\n\n    async exportAsPng(colorbarElement: HTMLElement | undefined, backgroundColor: string, insetBorderColor: string): Promise<string> {\n        const pixelRatio = 4\n        const width = 4096\n        const cBarPad = 40\n        const { height: colorbarHeight, width: colorbarWidth } = this.colorbarDimensions(colorbarElement, width * 0.8, 300 - cBarPad)\n\n        const maps = await this.handler.getMaps()\n        const insets = this.insets()\n\n        const aspectRatio = computeAspectRatioForInsets(insets)\n\n        const height = Math.round(width / aspectRatio)\n\n        const totalHeight = height + colorbarHeight + cBarPad\n\n        const params = { width, height, pixelRatio, insetBorderColor }\n\n        const canvas = document.createElement('canvas')\n        const ctx = canvas.getContext('2d')!\n        canvas.width = width\n        canvas.height = totalHeight\n\n        await Promise.all(maps.map(async (map, i) => {\n            if (!this.state.mapIsVisible[i]) {\n                return\n            }\n            const inset = insets[i]\n            await renderMap(ctx, map, inset, params)\n        }))\n\n        ctx.fillStyle = this.props.basemap.type === 'none' ? this.props.basemap.backgroundColor : backgroundColor\n        ctx.fillRect(0, height, width, colorbarHeight + cBarPad) // Fill the entire colorbar area\n\n        if (colorbarElement) {\n            const colorbarCanvas = await screencapElement(colorbarElement, colorbarWidth, 1)\n\n            ctx.drawImage(colorbarCanvas, (width - colorbarWidth) / 2, height + cBarPad / 2)\n        }\n\n        return canvas.toDataURL('image/png', 1.0)\n    }\n\n    async exportAsGeoJSON(): Promise<string> {\n        const { shapes } = await this.computeShapesToRender(this.version)\n        const geojson: GeoJSON.FeatureCollection = {\n            type: 'FeatureCollection',\n            features: [],\n        }\n        for (const shape of shapes) {\n            let feature = await this.shapeGeojson(shape.name, shape.notClickable, shape.spec)\n            feature = JSON.parse(JSON.stringify(feature)) as typeof feature\n            for (const [key, value] of Object.entries(shape.meta)) {\n                feature.properties![key] = value\n            }\n            geojson.features.push(feature)\n        }\n        return JSON.stringify(geojson)\n    }\n\n    override async componentDidUpdate(prevProps: P, prevState: MapState): Promise<void> {\n        let shouldWeUpdate = false\n        // make sure we update the first time\n        shouldWeUpdate ||= this.version < 1\n        shouldWeUpdate ||= JSON.stringify(prevProps) !== JSON.stringify(this.props)\n        shouldWeUpdate ||= JSON.stringify({ ...prevState, loading: undefined }) !== JSON.stringify({ ...this.state, loading: undefined })\n        if (shouldWeUpdate) {\n            // Only update if something that's not the loading has changed, or it's the first load\n            await this.bumpVersion()\n        }\n    }\n\n    async bumpVersion(): Promise<void> {\n        return this.updateToVersion(this.version + 1)\n    }\n\n    async updateToVersion(version: number): Promise<void> {\n        this.version = version\n        await this.handler.getMaps()\n        await this.lastUpdate\n        if (this.version !== version) {\n            // There's a newer update behind us\n            return\n        }\n        this.lastUpdate = (async () => {\n            const updateStart = Date.now()\n            this.versionProps = this.props\n            await this.updateFn(version)\n            const updateDuration = Date.now() - updateStart\n            // Can only update once per second\n            await new Promise(resolve => setTimeout(resolve, Math.max(0, 1000 - updateDuration)))\n        })()\n        return this.lastUpdate\n    }\n\n    // In order to prevent race conditions, only one updateFn should be run at a time for a given map\n    async updateFn(version: number): Promise<void> {\n        const time = Date.now()\n        debugPerformance('Loading map...')\n        this.setState({ loading: true })\n        const maps = await this.handler.getMaps()\n\n        if (this.attributionControl !== undefined) {\n            maps[0].removeControl(this.attributionControl)\n            this.attributionControl = undefined\n        }\n\n        if (this.props.attribution !== 'none') {\n            this.attributionControl = new CustomAttributionControl(this.props.attribution === 'startVisible')\n            maps[0].addControl(this.attributionControl)\n        }\n\n        this.exist_this_time = []\n\n        this.attachBasemap()\n\n        await this.populateMap(maps, time, version)\n        this.setState({ loading: false })\n        debugPerformance(`Updated sources to delete stuff; at ${Date.now() - time}ms`)\n        debugPerformance(`No longer loading map; took ${Date.now() - time}ms`)\n    }\n\n    async populateMap(maps: maplibregl.Map[], timeBasis: number, version: number): Promise<void> {\n        const { shapes, zoomIndex } = await this.computeShapesToRender(version)\n\n        debugPerformance(`Computed polygons; at ${Date.now() - timeBasis}ms`)\n\n        await this.addShapes(shapes, zoomIndex)\n\n        debugPerformance(`Added polygons; at ${Date.now() - timeBasis}ms`)\n\n        // Remove polygons that no longer exist\n        // Must do this before map render or zooms are incorrect (they try to zoom to previous regions)\n        for (const [name] of this.state.shapeByName.entries()) {\n            if (!this.exist_this_time.includes(name)) {\n                this.state.shapeByName.delete(name)\n            }\n        }\n\n        debugPerformance(`Removed polygons; at ${Date.now() - timeBasis}ms`)\n\n        await this.mapDidRender()\n\n        debugPerformance(`Finished waiting for mapDidRender; at ${Date.now() - timeBasis}ms`)\n\n        await this.updateSources(true)\n    }\n\n    attachBasemap(): void {\n        if (JSON.stringify(this.props.basemap) === JSON.stringify(this.basemap_props)) {\n            return\n        }\n        this.basemap_props = this.props.basemap\n        void this.loadBasemap()\n    }\n\n    async loadBasemap(): Promise<void> {\n        const maps = await this.handler.stylesheetPresent()\n        // await this.ensureStyleLoaded()\n        maps.forEach((map) => { setBasemap(map, this.props.basemap) })\n    }\n\n    progressivelyLoadShapes(): boolean {\n        // Whether to attempt to refresh the map as polygons are added\n        return true\n    }\n\n    async addShapes(shapes: Shape[], zoom_to: number): Promise<void> {\n        const time = Date.now()\n        debugPerformance('Adding polygons...')\n        await Promise.all(shapes.map(async (polygon, i) => {\n            await this.addShape(polygon, i === zoom_to)\n            if (this.progressivelyLoadShapes()) {\n                await this.updateSources()\n            }\n        }))\n        debugPerformance(`Added polygons [addPolygons]; at ${Date.now() - time}ms`)\n        await this.updateSources(true)\n        debugPerformance(`Updated sources [addPolygons]; at ${Date.now() - time}ms`)\n    }\n\n    async shapeGeojson(name: string, notClickable: boolean | undefined, style: ShapeSpec): Promise<GeoJSON.Feature> {\n        switch (style.type) {\n            case 'polygon':\n                const poly = await this.loadPolygon(name)\n                return {\n                    type: 'Feature' as const,\n                    properties: { name, notClickable, ...style.style },\n                    geometry: geometry(poly),\n                }\n            case 'point':\n                const { lon, lat } = await this.loadPoint(name)\n                return {\n                    type: 'Feature' as const,\n                    properties: { name, notClickable, ...style.style },\n                    geometry: {\n                        type: 'Point',\n                        coordinates: [lon, lat],\n                    },\n                }\n        }\n    }\n\n    sources_last_updated = 0\n\n    firstLabelId(map: maplibregl.Map): string | undefined {\n        for (const layer of map.style.stylesheet.layers) {\n            if (layer.type === 'symbol' && layer.id.startsWith('label')) {\n                return layer.id\n            }\n        }\n        return undefined\n    }\n\n    async updateSources(force = false): Promise<void> {\n        if (this.sources_last_updated > Date.now() - 1000 && !force) {\n            return\n        }\n        const maps = await this.handler.getMaps()\n        if (maps.some(map => !map.isStyleLoaded()) && !force) {\n            return\n        }\n        this.sources_last_updated = Date.now()\n        await this.handler.ensureStyleLoadedFn()\n        const shapes = Array.from(this.state.shapeByName.values())\n        const mapIsVisible = maps.map((map, i) => this.setUpMap(map, shapes, this.insets()[i]))\n        this.setState({ mapIsVisible })\n    }\n\n    setUpMap(map: maplibregl.Map, shapes: [ShapeType, GeoJSON.Feature][], inset: Inset): boolean {\n        function filterOverlaps(features: GeoJSON.Feature[]): GeoJSON.Feature[] {\n            const bbox = inset.coordBox\n            if (!inset.mainMap) {\n                features = features.filter((poly) => {\n                    const bounds = boundingBox(poly.geometry)\n                    // Check if the polygon overlaps the inset bounds\n                    return bounds.getWest() < bbox[2] && bounds.getEast() > bbox[0]\n                        && bounds.getNorth() > bbox[1] && bounds.getSouth() < bbox[3]\n                })\n            }\n            return features\n        }\n        const labelId = this.firstLabelId(map)\n\n        const setUpPolygonSource = (polys: GeoJSON.Feature[]): number => {\n            const polygonData = {\n                type: 'FeatureCollection',\n                features: filterOverlaps(polys),\n            } satisfies GeoJSON.FeatureCollection\n            let polygonSource: maplibregl.GeoJSONSource | undefined = map.getSource('polygon')\n            if (polygonSource === undefined) {\n                map.addSource('polygon', {\n                    type: 'geojson',\n                    data: polygonData,\n                })\n                map.addLayer({\n                    id: 'polygon',\n                    type: 'fill',\n                    source: 'polygon',\n                    paint: {\n                        'fill-color': ['get', 'fillColor'],\n                        'fill-opacity': ['get', 'fillOpacity'],\n                    },\n                }, labelId)\n                map.addLayer({\n                    id: 'polygon-outline',\n                    type: 'line',\n                    source: 'polygon',\n                    paint: {\n                        'line-color': ['get', 'color'],\n                        'line-width': ['get', 'weight'],\n                    },\n                }, labelId)\n                polygonSource = map.getSource('polygon')!\n            }\n            polygonSource.setData(polygonData)\n            return polygonData.features.length\n        }\n\n        const setUpPointSource = (points: GeoJSON.Feature[]): number => {\n            const pointData = {\n                type: 'FeatureCollection',\n                features: filterOverlaps(points),\n            } satisfies GeoJSON.FeatureCollection\n            let pointSource: maplibregl.GeoJSONSource | undefined = map.getSource('point')\n            if (pointSource === undefined) {\n                map.addSource('point', {\n                    type: 'geojson',\n                    data: pointData,\n                })\n                map.addLayer({\n                    id: 'point',\n                    type: 'circle',\n                    source: 'point',\n                    paint: {\n                        'circle-color': ['get', 'fillColor'],\n                        'circle-opacity': ['get', 'fillOpacity'],\n                        'circle-radius': ['get', 'radius'],\n                    },\n                }, labelId)\n                pointSource = map.getSource('point')!\n            }\n            pointSource.setData(pointData)\n            return pointData.features.length\n        }\n\n        let count = 0\n\n        count += setUpPolygonSource(shapes.filter(([type]) => type === 'polygon').map(([, feature]) => feature))\n        count += setUpPointSource(shapes.filter(([type]) => type === 'point').map(([, feature]) => feature))\n\n        for (const layerId of potentialOutlineLayerIds) {\n            if (map.getLayer(layerId) !== undefined) {\n                map.removeLayer(layerId)\n            }\n        }\n\n        for (const layer of this.subnationalOutlines()) {\n            map.addLayer(layer, labelId)\n        }\n\n        const dropEmptyInsets = this.props.dropEmptyInsets ?? true\n        return count > 0 || inset.mainMap || !dropEmptyInsets\n    }\n\n    /*\n     * Returns whether or not we actually need to update the sources\n     */\n    async addShape(shape: Shape, fit_bounds: boolean): Promise<void> {\n        this.exist_this_time.push(shape.name)\n        const current = this.state.shapeByName.get(shape.name)\n        if (current && current[0] === shape.spec.type) {\n            current[1].properties = { ...shape.spec.style, name: shape.name, notClickable: shape.notClickable }\n        }\n        const geojson = await this.shapeGeojson(shape.name, shape.notClickable, shape.spec)\n        if (fit_bounds) {\n            this.zoomToItems([geojson], { animate: false })\n        }\n\n        this.state.shapeByName.set(shape.name, [shape.spec.type, geojson])\n    }\n\n    zoomToItems(items: Iterable<GeoJSON.Feature>, options: maplibregl.FitBoundsOptions): void {\n        this.handler.maps?.forEach((map) => {\n            map.fitBounds(\n                extendBoxes(Array.from(items).map(feature => boundingBox(feature.geometry))),\n                { padding: defaultMapPadding, ...options },\n            )\n        })\n    }\n\n    zoomToAll(options: maplibregl.FitBoundsOptions = {}): void {\n        this.zoomToItems(Array.from(this.state.shapeByName.values()).map(([, feature]) => feature), options)\n    }\n\n    zoomTo(name: string): void {\n        this.zoomToItems([this.state.shapeByName.get(name)![1]], {})\n    }\n\n    static override contextType = Navigator.Context\n\n    declare context: React.ContextType<typeof Navigator.Context>\n}\n\nconst insetBorderWidth = 2\n\ntype Frame = [number, number, number, number]\n\nfunction MapBody(props: {\n    id: string\n    height: number | string\n    buttons: ReactNode\n    bboxProp: Property<Inset>\n    insetBoundary: boolean\n    visible: boolean\n    editInset?: EditSingleInset\n    container: RefObject<HTMLDivElement>\n    getMap: () => maplibregl.Map | undefined\n}): ReactNode {\n    const colors = useColors()\n    const isScreenshot = useScreenshotMode()\n\n    const bbox = props.bboxProp.use()\n\n    // Optionally use props.bbox.bottomLeft and props.bbox.topRight for custom placement\n    // Frame is separate so we can interactively edit it\n    const [frame, setFrame] = useState<Frame>(() => [...bbox.bottomLeft, ...bbox.topRight])\n    const [x0, y0, x1, y1] = frame\n\n    useEffect(() => {\n        setFrame([...bbox.bottomLeft, ...bbox.topRight])\n    }, [bbox])\n\n    return (\n        <div\n            id={props.id}\n            style={{\n                left: `${x0 * 100}%`,\n                bottom: `${y0 * 100}%`,\n                width: `${(x1 - x0) * 100}%`,\n                height: `${(y1 - y0) * 100}%`,\n                position: 'absolute',\n                border: props.insetBoundary ? `${insetBorderWidth}px solid ${colors.mapInsetBorderColor}` : `${mapBorderWidth}px solid ${colors.borderNonShadow}`,\n                borderRadius: props.insetBoundary ? '0px' : `${mapBorderRadius}px`,\n                // In screenshot mode, the background is transparent so we can render this component atop the already-rendered map canvases\n                // In normal mode, the map is drawn over this normally, but is hidden during e2e testing, where we use the background color to mark map position\n                backgroundColor: isScreenshot ? 'transparent' : colors.slightlyDifferentBackground,\n                ...(props.visible ? {} : { display: 'none' }),\n                ...(props.editInset ? { overflow: 'visible' } : {}),\n            }}\n        >\n            {/* place this on the right of the map */}\n            <div style={\n                { zIndex: 1000, position: 'absolute', right: 0, top: 0, padding: '1em' }\n            }\n            >\n                {props.buttons}\n            </div>\n            { props.editInset && props.insetBoundary && (\n                <EditInsetsHandles\n                    frame={frame}\n                    setFrame={(newFrame) => {\n                        setFrame(newFrame)\n                        props.editInset!({ bottomLeft: [newFrame[0], newFrame[1]], topRight: [newFrame[2], newFrame[3]] })\n                    }}\n                    container={props.container}\n                />\n            ) }\n        </div>\n    )\n}\n\ntype DragKind = 'move' | `${'top' | 'bottom'}${'Right' | 'Left'}`\n\nfunction EditInsetsHandles(props: {\n    frame: Frame\n    setFrame: (newFrame: Frame) => void\n    container: RefObject<HTMLDivElement>\n}): ReactNode {\n    const colors = useColors()\n\n    const handleStyle: (handleSize: number) => CSSProperties = handleSize => ({\n        backgroundColor: colors.slightlyDifferentBackground,\n        border: `1px solid ${colors.textMain}`,\n        position: 'absolute',\n        width: `${handleSize}px`,\n        height: `${handleSize}px`,\n        borderRadius: '2px',\n        zIndex: 1000,\n    })\n\n    const activeDrag = useRef<{ kind: DragKind, startX: number, startY: number, startFrame: Frame, pointerId: number } | undefined>(undefined)\n\n    const pointerHandlers = (kind: DragKind): {\n        'onPointerDown': (e: React.PointerEvent) => void\n        'onPointerMove': (e: React.PointerEvent) => void\n        'onPointerUp': (e: React.PointerEvent) => void\n        'onPointerCancel': (e: React.PointerEvent) => void\n        'data-test': string\n    } => ({\n        'data-test': kind,\n        'onPointerDown': (e: React.PointerEvent) => {\n            if (activeDrag.current !== undefined) {\n                return\n            }\n            const thisElem = e.target as HTMLDivElement\n            activeDrag.current = {\n                kind,\n                startX: e.clientX,\n                startY: e.clientY,\n                startFrame: props.frame,\n                pointerId: e.pointerId,\n            }\n            thisElem.setPointerCapture(e.pointerId)\n        },\n        'onPointerMove': (e: React.PointerEvent) => {\n            if (activeDrag.current?.pointerId !== e.pointerId) {\n                return\n            }\n            const drag = activeDrag.current\n            const rawMovementX = (e.clientX - drag.startX) / props.container.current!.clientWidth\n            const rawMovementY = -(e.clientY - drag.startY) / props.container.current!.clientHeight\n            const resizedFrame: Frame = [\n                Math.max(0, Math.min(drag.startFrame[0] + rawMovementX, drag.startFrame[2] - 0.05)),\n                Math.max(0, Math.min(drag.startFrame[1] + rawMovementY, drag.startFrame[3] - 0.1)),\n                Math.max(drag.startFrame[0] + 0.05, Math.min(drag.startFrame[2] + rawMovementX, 1)),\n                Math.max(drag.startFrame[1] + 0.1, Math.min(drag.startFrame[3] + rawMovementY, 1)),\n            ]\n            let newFrame: Frame\n            switch (drag.kind) {\n                case 'move':\n                    const movementX = Math.max(0 - drag.startFrame[0], Math.min(rawMovementX, 1 - drag.startFrame[2]))\n                    const movementY = Math.max(0 - drag.startFrame[1], Math.min(rawMovementY, 1 - drag.startFrame[3]))\n                    newFrame = [drag.startFrame[0] + movementX, drag.startFrame[1] + movementY, drag.startFrame[2] + movementX, drag.startFrame[3] + movementY]\n                    break\n                case 'topRight':\n                    newFrame = [drag.startFrame[0], drag.startFrame[1], resizedFrame[2], resizedFrame[3]]\n                    break\n                case 'bottomRight':\n                    newFrame = [drag.startFrame[0], resizedFrame[1], resizedFrame[2], drag.startFrame[3]]\n                    break\n                case 'bottomLeft':\n                    newFrame = [resizedFrame[0], resizedFrame[1], drag.startFrame[2], drag.startFrame[3]]\n                    break\n                case 'topLeft':\n                    newFrame = [resizedFrame[0], drag.startFrame[1], drag.startFrame[2], resizedFrame[3]]\n                    break\n            }\n            props.setFrame(newFrame)\n        },\n        'onPointerUp': (e: React.PointerEvent) => {\n            if (activeDrag.current?.pointerId !== e.pointerId) {\n                return\n            }\n            activeDrag.current = undefined\n        },\n        'onPointerCancel': (e: React.PointerEvent) => {\n            if (activeDrag.current?.pointerId !== e.pointerId) {\n                return\n            }\n            activeDrag.current = undefined\n        },\n    })\n\n    return (\n        <>\n            <div style={{ ...handleStyle(15), right: `-${insetBorderWidth}px`, top: `-${insetBorderWidth}px`, cursor: 'nesw-resize' }} {...pointerHandlers('topRight')} />\n            <div style={{ ...handleStyle(15), right: `-${insetBorderWidth}px`, bottom: `-${insetBorderWidth}px`, cursor: 'nwse-resize' }} {...pointerHandlers('bottomRight')} />\n            <div style={{ ...handleStyle(15), left: `-${insetBorderWidth}px`, bottom: `-${insetBorderWidth}px`, cursor: 'nesw-resize' }} {...pointerHandlers('bottomLeft')} />\n            <div style={{ ...handleStyle(15), left: `-${insetBorderWidth}px`, top: `-${insetBorderWidth}px`, cursor: 'nwse-resize' }} {...pointerHandlers('topLeft')} />\n            <div style={{ ...handleStyle(20), margin: 'auto', left: `calc(50% - 10px)`, top: `calc(50% - 10px)`, cursor: 'move' }} {...pointerHandlers('move')} />\n        </>\n    )\n}\n\nfunction isVisible(basemap: Basemap, layer: maplibregl.LayerSpecification): boolean {\n    switch (basemap.type) {\n        case 'none':\n            return false\n        case 'osm':\n            if (basemap.noLabels && layer.type === 'symbol') {\n                return false\n            }\n            return true\n    }\n}\n\n// eslint-disable-next-line no-restricted-syntax -- This is the default maplibre background color\nconst defaultBackgroundColor = '#f8f4f0'\n\nfunction setBasemap(map: maplibregl.Map, basemap: Basemap): void {\n    map.style.stylesheet.layers.forEach((layerspec: maplibregl.LayerSpecification) => {\n        if (layerspec.id === 'background') {\n            return\n        }\n        const layer = map.getLayer(layerspec.id)!\n        layer.setLayoutProperty('visibility', isVisible(basemap, layerspec) ? 'visible' : 'none')\n    })\n    map.setPaintProperty('background', 'background-color', basemap.type === 'none' ? basemap.backgroundColor : defaultBackgroundColor)\n}\n\nfunction clickMapElement(longname: string): void {\n    for (const map of activeMaps) {\n        if (map.state.shapeByName.has(longname)) {\n            map.onClick(longname)\n            return\n        }\n    }\n    throw new Error(`Polygon ${longname} not found in any map`)\n}\n\n// for testing\n(window as unknown as {\n    clickMapElement: (longname: string) => void\n}).clickMapElement = clickMapElement\n\ninterface MapProps extends MapGenericProps {\n    longname: string\n    related: NormalizeProto<IRelatedButtons>[]\n    articleType: string\n}\n\ninterface ArticleMapProps extends MapProps {\n    showHistoricalCDs: boolean\n    settings: Record<string, unknown>\n    color: string\n}\n\n// eslint-disable-next-line no-restricted-syntax -- Don't want to overwrite the JS Map\nexport { MapComponent as Map }\nfunction MapComponent(props: MapProps): ReactNode {\n    const colors = useColors()\n    const [showHistoricalCDs] = useSetting('show_historical_cds')\n    const relatedCheckboxSettings = useSettings(relatedSettingsKeys(props.articleType))\n    return (\n        <ArticleMap\n            {...props}\n            showHistoricalCDs={showHistoricalCDs}\n            settings={relatedCheckboxSettings}\n            color={colors.hueColors.blue}\n        />\n    )\n}\n\nclass ArticleMap extends MapGeneric<ArticleMapProps> {\n    private already_fit_bounds: string | undefined = undefined\n\n    override computeShapesToRender(): Promise<ShapeRenderingSpec> {\n        const relateds = [\n            ...this.getRelated('contained_by'),\n            ...this.getRelated('intersects'),\n            ...this.getRelated('borders'),\n            ...this.getRelated('contains'),\n            ...this.getRelated('same_geography'),\n        ]\n\n        const relatedPolygons = this.relatedPolygons(relateds)\n\n        return Promise.resolve({\n            shapes: [\n                {\n                    name: this.props.longname,\n                    spec: { type: 'polygon', style: { fillOpacity: 0.5, weight: 1, color: this.props.color, fillColor: this.props.color } },\n                    meta: {},\n                    notClickable: true,\n                },\n                ...relatedPolygons,\n            ],\n            zoomIndex: this.already_fit_bounds !== this.props.longname ? 0 : -1,\n        })\n    }\n\n    override mapDidRender(): Promise<void> {\n        this.already_fit_bounds = this.props.longname\n        return Promise.resolve()\n    }\n\n    getRelated(key: string): NormalizeProto<IRelatedButton>[] {\n        const element = this.props.related.filter(\n            x => x.relationshipType === key)\n            .map(x => x.buttons)[0]\n        return element\n    }\n\n    relatedPolygons(related: NormalizeProto<IRelatedButton>[]): Shape[] {\n        const result: Shape[] = []\n        for (let i = related.length - 1; i >= 0; i--) {\n            if (!this.props.showHistoricalCDs && isHistoricalCD(related[i].rowType)) {\n                continue\n            }\n            const key = relationshipKey(this.props.articleType, related[i].rowType)\n            if (!this.props.settings[key]) {\n                continue\n            }\n\n            const color = randomColor(related[i].longname)\n            const style = { color, weight: 1, fillColor: color, fillOpacity: 0.1 }\n            result.push({\n                name: related[i].longname,\n                spec: { type: 'polygon', style },\n                meta: {},\n            })\n        }\n        return result\n    }\n}\n\nfunction mapBoundsFromInset(inset: Inset): maplibregl.LngLatBounds {\n    const { coordBox } = inset\n    return new maplibregl.LngLatBounds(\n        new maplibregl.LngLat(coordBox[0], coordBox[1]),\n        new maplibregl.LngLat(coordBox[2], coordBox[3]),\n    )\n}\n","import maplibregl from 'maplibre-gl'\n\nimport { Inset } from './map'\n\ninterface MapScreenshotParams {\n    width: number\n    height: number\n    pixelRatio: number\n    insetBorderColor: string\n    backgroundColor?: string\n}\n\nfunction computeRelativeLocs(inset: Inset, params: MapScreenshotParams): { insetWidth: number, insetHeight: number, insetX: number, insetY: number } {\n    const [x0, y0] = inset.bottomLeft\n    const [x1, y1] = inset.topRight\n    const insetWidth = (x1 - x0) * params.width\n    const insetHeight = (y1 - y0) * params.height\n    const insetX = x0 * params.width\n    const insetY = (1 - y1) * params.height // Flip Y coordinate for canvas\n    return { insetWidth, insetHeight, insetX, insetY }\n}\n\nexport async function renderMap(\n    ctx: CanvasRenderingContext2D,\n    map: maplibregl.Map, inset: Inset,\n    params: MapScreenshotParams,\n): Promise<void> {\n    const container = map.getContainer()\n    const originalSize = {\n        width: container.style.width || '',\n        height: container.style.height || '',\n    }\n    const originalBounds = map.getBounds()\n    const originalPixelRatio = map.getPixelRatio()\n\n    const { insetWidth, insetHeight, insetX, insetY } = computeRelativeLocs(inset, params)\n\n    // resize the container to the inset size / pixel ratio, so the map renders at high resolution\n    // but text and other elements are not scaled\n    container.style.width = `${insetWidth / params.pixelRatio}px`\n    container.style.height = `${insetHeight / params.pixelRatio}px`\n\n    map.setPixelRatio(params.pixelRatio)\n\n    // Trigger map resize\n    map.resize()\n\n    const [west, south, east, north] = inset.coordBox\n    const bounds = new maplibregl.LngLatBounds(\n        new maplibregl.LngLat(west, south),\n        new maplibregl.LngLat(east, north),\n    )\n    map.fitBounds(bounds, { animate: false, padding: 0 })\n\n    // Wait for maps to re-render at high resolution\n    await new Promise(resolve => setTimeout(resolve, 1000))\n\n    const mapCanvas = map.getCanvas()\n\n    // Draw the map content onto the main canvas\n    ctx.drawImage(mapCanvas, insetX, insetY, insetWidth, insetHeight)\n\n    if (!inset.mainMap) {\n        ctx.strokeStyle = params.insetBorderColor\n        ctx.lineWidth = 4\n        ctx.strokeRect(insetX, insetY, insetWidth, insetHeight)\n    }\n    container.style.width = originalSize.width\n    container.style.height = originalSize.height\n    map.setPixelRatio(originalPixelRatio)\n    map.resize()\n    map.fitBounds(originalBounds, { animate: false })\n}\n","import { Insets } from '../components/map'\n\nimport { assert } from './defensive'\n\n// Web Mercator projection functions\nfunction lngToWebMercatorX(lng: number): number {\n    return lng * Math.PI / 180 * 6378137\n}\n\nfunction latToWebMercatorY(lat: number): number {\n    return 6378137 * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360))\n}\n\nexport function computeAspectRatio(coordBox: [number, number, number, number]): number {\n    // coordBox is [west, south, east, north]\n    const x1 = lngToWebMercatorX(coordBox[0])\n    const x2 = lngToWebMercatorX(coordBox[2])\n    const y1 = latToWebMercatorY(coordBox[1])\n    const y2 = latToWebMercatorY(coordBox[3])\n\n    const width = Math.abs(x2 - x1)\n    const height = Math.abs(y2 - y1)\n\n    return width / height\n}\n\nfunction area(coordBox: [number, number, number, number]): number {\n    // coordBox is [west, south, east, north]\n    const x1 = lngToWebMercatorX(coordBox[0])\n    const x2 = lngToWebMercatorX(coordBox[2])\n    const y1 = latToWebMercatorY(coordBox[1])\n    const y2 = latToWebMercatorY(coordBox[3])\n\n    return Math.abs((x2 - x1) * (y2 - y1))\n}\n\nexport function computeAspectRatioForInsets(mapsWithCoordBox: Insets): number {\n    assert(mapsWithCoordBox.length > 0, 'No insets with coordBox')\n\n    const biggestMap = mapsWithCoordBox.reduce((prev, curr) => {\n        return area(curr.coordBox) > area(prev.coordBox) ? curr : prev\n    })\n    const coordBox = biggestMap.coordBox\n    const onScreenWidth = biggestMap.topRight[0] - biggestMap.bottomLeft[0]\n    const onScreenHeight = biggestMap.topRight[1] - biggestMap.bottomLeft[1]\n    const onScreenAspectRatio = onScreenWidth / onScreenHeight\n    return computeAspectRatio(coordBox) / onScreenAspectRatio\n}\n","const value: [string, Record<string, string>][] = [\n    [\n        \"USA\",\n        {\n            \"Country\": \"USA\",\n            \"Subnational Region\": \"State\",\n            \"Urban Center\": \"US Urban Center\",\n            \"Metropolitan Cluster\": \"US Metropolitan Cluster\",\n            \"5M Person Circle\": \"US 5M Person Circle\",\n            \"10M Person Circle\": \"US 10M Person Circle\",\n            \"20M Person Circle\": \"US 20M Person Circle\",\n            \"50M Person Circle\": \"US 50M Person Circle\",\n            \"100M Person Circle\": \"US 100M Person Circle\",\n            \"200M Person Circle\": \"US 200M Person Circle\",\n            \"500M Person Circle\": \"US 500M Person Circle\",\n            \"1B Person Circle\": \"US 1B Person Circle\"\n        }\n    ],\n    [\n        \"Canada\",\n        {\n            \"Country\": \"Canada\",\n            \"Subnational Region\": \"Province\",\n            \"Urban Center\": \"CA Urban Center\",\n            \"Metropolitan Cluster\": \"CA Metropolitan Cluster\",\n            \"5M Person Circle\": \"CA 5M Person Circle\",\n            \"10M Person Circle\": \"CA 10M Person Circle\",\n            \"20M Person Circle\": \"CA 20M Person Circle\",\n            \"50M Person Circle\": \"CA 50M Person Circle\",\n            \"100M Person Circle\": \"CA 100M Person Circle\",\n            \"200M Person Circle\": \"CA 200M Person Circle\",\n            \"500M Person Circle\": \"CA 500M Person Circle\",\n            \"1B Person Circle\": \"CA 1B Person Circle\"\n        }\n    ]\n]\nexport default value","import localized_type_names from '../data/localized_type_names'\n\nexport function displayType(universe: string, type: string): string {\n    return pluralize(localize(universe, type))\n}\n\nexport function pluralize(type: string): string {\n    if (type.endsWith('y')) {\n        return `${type.slice(0, -1)}ies`\n    }\n    return `${type}s`\n}\n\nfunction localize(universe: string, type: string): string {\n    for (const [universeSuffix, types] of localized_type_names) {\n        if (universe.endsWith(universeSuffix)) {\n            if (type in types) {\n                return types[type]\n            }\n        }\n    }\n    return type\n}\n\nexport function separateNumber(number: string): string {\n    return number.replaceAll(/(?<!^)([0-9]{3})(?=([0-9]{3})*($|\\.))/g, '\\u202f$1')\n}\n"],"names":["URL","activeMaps","CustomAttributionControl","startShowingAttribution","maplibregl","MapHandler","mainMaps","undefined","Array","_","i","Math","initialize","onClick","editInsets","createMaps","ids","maps","ensureStyleLoadeds","_iteratorError","fullMap","editInset","map","ensureStyleLoaded","id","_createMap","newInset","rtlConfigured","setRTLTextPlugin","TestUtils","WeakRef","e","names","features","feature","Promise","resolve","container","assert","getMaps","setTimeout","ensureStyleLoadedFn","stylesheetPresent","_this_maps","potentialOutlineLayerIds","MapGeneric","props","React","Map","inset","insets","_this_props_insets","shouldHaveLoadingSpinner","render","bbox","_this_props_editInsets_subscribeChanges_i","MapBody","t","Property","_this_props_editInsets","_this_handler_maps","LongLoad","name","mapHeight","_this_props_height","height","mapStyle","buttons","mapDidRender","loadPolygon","loadShapeFromPossibleSymlink","loadPoint","Error","subnationalOutlines","basemap","componentDidMount","mapBoundsFromInset","insetProps","getCoordBox","mapBounds","sw","ne","lastCoordBox","nonUserPanZoomOcurring","panZoomHandler","newCoordBox","stableStringify","observer","fit","componentWillUnmount","cb","colorbarDimensions","colorbarElement","maxWidth","maxHeight","width","scale","scale1","exportAsPng","backgroundColor","insetBorderColor","pixelRatio","cBarPad","_this_colorbarDimensions","colorbarHeight","colorbarWidth","aspectRatio","totalHeight","params","canvas","ctx","colorbarCanvas","computeAspectRatioForInsets","document","originalSize","originalBounds","originalPixelRatio","_computeRelativeLocs","insetWidth","insetHeight","insetX","insetY","_inset_coordBox","west","south","east","north","bounds","mapCanvas","_inset_bottomLeft","x0","y0","_inset_topRight","x1","y1","screencapElement","exportAsGeoJSON","shapes","geojson","shape","_iteratorError1","key","value","JSON","Object","componentDidUpdate","prevProps","prevState","shouldWeUpdate","bumpVersion","updateToVersion","version","updateStart","updateDuration","Date","updateFn","time","debugPerformance","populateMap","timeBasis","_ref","zoomIndex","attachBasemap","loadBasemap","layerspec","layer","isVisible","progressivelyLoadShapes","addShapes","zoom_to","polygon","a","shapeGeojson","notClickable","style","poly","lon","lat","geometry","firstLabelId","updateSources","force","mapIsVisible","setUpMap","filterOverlaps","boundingBox","_this_props_dropEmptyInsets","labelId","count","polygonData","type","polygonSource","pointData","pointSource","layerId","dropEmptyInsets","addShape","fit_bounds","current","zoomToItems","items","options","extendBoxes","zoomToAll","zoomTo","colors","useColors","isScreenshot","useScreenshotMode","_useState","frame","setFrame","_frame","useEffect","mapBorderWidth","mapBorderRadius","EditInsetsHandles","newFrame","handleStyle","handleSize","activeDrag","useRef","pointerHandlers","kind","thisElem","_activeDrag_current","drag","rawMovementX","rawMovementY","resizedFrame","movementX","movementY","MapComponent","showHistoricalCDs","_useSetting","relatedCheckboxSettings","useSettings","relatedSettingsKeys","ArticleMap","Navigator","window","longname","computeShapesToRender","relateds","relatedPolygons","getRelated","x","related","result","isHistoricalCD","relationshipKey","color","randomColor","coordBox","lngToWebMercatorX","lng","latToWebMercatorY","area","x2","y2","mapsWithCoordBox","biggestMap","prev","curr","onScreenWidth","onScreenHeight","computeAspectRatio","displayType","universe","pluralize","localize","localized_type_names","universeSuffix","types","separateNumber","number"],"mappings":"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"}