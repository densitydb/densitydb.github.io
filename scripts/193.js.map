{"version":3,"file":"193.js","sources":["webpack://assets/./src/components/plots.css","webpack://assets/./src/components/ArticleWarnings.tsx","webpack://assets/./src/components/plots.css?871a","webpack://assets/./src/components/plots-general.tsx","webpack://assets/./src/components/plots-histogram.tsx","webpack://assets/./src/components/plots-timeseries.tsx","webpack://assets/./src/components/plots.tsx","webpack://assets/./src/utils/transpose.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.histogram-svg-panel svg {\n    max-height: 100%;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/plots.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,gBAAgB;AACpB\",\"sourcesContent\":[\".histogram-svg-panel svg {\\n    max-height: 100%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import React, { ReactNode } from 'react'\n\nimport { useColors } from '../page_template/colors'\nimport { checkboxCategoryName, sourceEnabledKey, useSettings } from '../page_template/settings'\nimport { groupYearKeys, useAvailableYears, useDataSourceCheckboxes, useGroupsMissingYearSelection, useSelectedGroups } from '../page_template/statistic-settings'\nimport { Category, Group } from '../page_template/statistic-tree'\n\nimport { useScreenshotMode } from './screenshot'\n\nexport function ArticleWarnings(): ReactNode {\n    const screenshotMode = useScreenshotMode()\n    const selectedGroups = useSelectedGroups()\n    const groupsMissingYearSelection = useGroupsMissingYearSelection()\n    const availableYears = useAvailableYears()\n    const dataSourceCheckboxes = useDataSourceCheckboxes()\n    const settings = useSettings(groupYearKeys())\n\n    const allUncheckedSourceGroups = dataSourceCheckboxes\n        .filter(({ category, checkboxSpecs }) => checkboxSpecs\n            .every(({ name, forcedOn }) => !forcedOn && !settings[sourceEnabledKey({ category, name })]))\n\n    if (screenshotMode) {\n        return null\n    }\n    const warnings = selectedGroups.length === 0\n        ? [\n                <b key=\"noneSelected\">\n                    No Statistic Categories are selected\n                </b>,\n            ]\n        : [\n                ...groupsMissingYearSelection.map(groupOrCategory => (\n                    <>\n                        To see\n                        {' '}\n                        <b><HierarchicalName groupOrCategory={groupOrCategory} /></b>\n                        {' statistics, select '}\n                        <YearList years={availableYears.filter(year => groupOrCategory.years.has(year))} />\n                        .\n                    </>\n                )),\n                ...allUncheckedSourceGroups.map(({ category }) => (\n                    <>\n                        All statistics from the\n                        {' '}\n                        <b>{checkboxCategoryName(category)}</b>\n                        {' '}\n                        are disabled.\n                    </>\n                )),\n            ]\n\n    if (warnings.length === 0) {\n        return null\n    }\n\n    return <WarningBox warnings={warnings} />\n}\n\nfunction WarningBox({ warnings }: { warnings: ReactNode[] }): ReactNode {\n    const colors = useColors()\n\n    return (\n        <div\n            style={{\n                backgroundColor: colors.slightlyDifferentBackgroundFocused,\n                borderRadius: '5px',\n            }}\n            data-test-id=\"article-warnings\"\n        >\n            <ul style={{\n                paddingTop: '1em',\n                paddingBottom: '1em',\n            }}\n            >\n                {\n                    warnings.map(\n                        (warning, key) => (\n                            <li key={key}>\n                                {warning}\n                            </li>\n                        ),\n                    )\n                }\n            </ul>\n        </div>\n    )\n}\n\nfunction HierarchicalName({ groupOrCategory }: { groupOrCategory: Group | Category }): ReactNode {\n    switch (groupOrCategory.kind) {\n        case 'Group':\n            return `${groupOrCategory.parent.name} > ${groupOrCategory.name}`\n        case 'Category':\n            return groupOrCategory.name\n    }\n}\n\nfunction YearList({ years }: { years: number[] }): ReactNode {\n    switch (years.length) {\n        case 0:\n            return null\n        case 1:\n            return <b>{years[0]}</b>\n        case 2:\n            return (\n                <>\n                    <b>{years[0]}</b>\n                    {' or '}\n                    <b>{years[1]}</b>\n                </>\n            )\n        case 3:\n            return (\n                <>\n                    <b>{years[0]}</b>\n                    {', '}\n                    <b>{years[1]}</b>\n                    {', or '}\n                    <b>{years[2]}</b>\n                </>\n            )\n        default:\n            return (\n                <>\n                    <b>{years[0]}</b>\n                    {', '}\n                    <YearList years={years.slice(1)} />\n                </>\n            )\n    }\n}\n","\n      import API from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../node_modules/css-loader/dist/cjs.js!./plots.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../node_modules/css-loader/dist/cjs.js!./plots.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import * as Plot from '@observablehq/plot'\nimport React, { ReactElement, useCallback, useEffect, useRef } from 'react'\n\nimport { useTranspose } from '../utils/transpose'\n\nimport { useScreenshotMode } from './screenshot'\n\nimport './plots.css'\n\ninterface DetailedPlotSpec {\n    marks: Plot.Markish[]\n    xlabel: string\n    ylabel: string\n    ydomain?: [number, number]\n    legend?: { legend: boolean, range: string[], domain: string[] }\n}\n\nexport function PlotComponent(props: {\n    plotSpec: (transpose: boolean) => DetailedPlotSpec\n    settingsElement: (makePlot: () => HTMLElement) => ReactElement\n}): ReactElement {\n    const transpose = useTranspose()\n\n    const plotRef = useRef<HTMLDivElement>(null)\n\n    const plotSpec = props.plotSpec\n\n    const plotConfig = useCallback((transposeConfig: boolean): Plot.PlotOptions => {\n        const { marks, xlabel, ylabel, ydomain, legend } = plotSpec(transposeConfig)\n        const result: Plot.PlotOptions = {\n            marks,\n            x: {\n                label: xlabel,\n            },\n            y: {\n                label: ylabel,\n                domain: ydomain,\n            },\n            grid: false,\n            width: transposeConfig ? undefined : 1000,\n            height: transposeConfig ? 1000 : undefined,\n            style: {\n                fontSize: transposeConfig ? '2em' : '1em',\n                fontFamily: 'Jost, Arial, sans-serif',\n            },\n            marginTop: 80,\n            marginBottom: transposeConfig ? 80 : 40,\n            marginLeft: 80,\n            color: legend,\n        }\n        if (transposeConfig) {\n            result.x = {\n                label: ylabel,\n                domain: ydomain,\n            }\n            result.y = {\n                label: xlabel,\n                reverse: true,\n            }\n        }\n        return result\n    }, [plotSpec])\n\n    useEffect(() => {\n        if (plotRef.current) {\n            const plot = Plot.plot(plotConfig(transpose))\n            plotRef.current.innerHTML = ''\n            plotRef.current.appendChild(plot)\n        }\n    }, [props.plotSpec, transpose, plotConfig])\n\n    const screenshotMode = useScreenshotMode()\n\n    const transposeTopMargin = '35px'\n\n    // put a button panel in the top right corner\n    return (\n        <>\n            <div\n                className=\"histogram-svg-panel\" // tied to CSS\n                ref={plotRef}\n                style={\n                    {\n                        width: '100%',\n                        height: transpose ? `calc(100% - ${transposeTopMargin})` : undefined,\n                        position: transpose ? 'relative' : undefined,\n                        top: transpose ? transposeTopMargin : undefined,\n                    }\n                }\n            >\n            </div>\n            {screenshotMode\n                ? undefined\n                : (\n                        <div style={{ zIndex: 1000, position: 'absolute', top: 0, right: 0, left: transpose ? 0 : undefined }}>\n                            {props.settingsElement(() => {\n                                const plot = Plot.plot(plotConfig(false))\n                                const div = document.createElement('div')\n                                div.style.width = '1000px'\n                                div.style.height = '500px'\n                                div.appendChild(plot)\n                                return div\n                            })}\n                        </div>\n                    )}\n        </>\n    )\n}\n","import * as Plot from '@observablehq/plot'\nimport React, { ReactElement, ReactNode, useCallback } from 'react'\n\n// imort Observable plot\nimport { Colors } from '../page_template/color-themes'\nimport { useColors } from '../page_template/colors'\nimport { HistogramType, useSetting } from '../page_template/settings'\nimport { useUniverse } from '../universe'\nimport { IHistogram } from '../utils/protos'\nimport { useTranspose } from '../utils/transpose'\n\nimport { PlotComponent } from './plots-general'\nimport { createScreenshot } from './screenshot'\nimport { CheckboxSetting } from './sidebar'\n\nconst yPad = 0.025\n\ninterface HistogramProps {\n    shortname: string\n    histogram: IHistogram\n    color: string\n    universeTotal: number\n}\n\nexport function Histogram(props: { histograms: HistogramProps[], statDescription: string }): ReactNode {\n    const [histogramType] = useSetting('histogram_type')\n    const [useImperial] = useSetting('use_imperial')\n    const [relative] = useSetting('histogram_relative')\n    const binMin = props.histograms[0].histogram.binMin!\n    const binSize = props.histograms[0].histogram.binSize!\n    for (const histogram of props.histograms) {\n        if (histogram.histogram.binMin !== binMin || histogram.histogram.binSize !== binSize) {\n            throw new Error('histograms have different binMin or binSize')\n        }\n    }\n    const settingsElement = (makePlot: () => HTMLElement): ReactElement => (\n        <HistogramSettings makePlot={makePlot} shortnames={props.histograms.map(h => h.shortname)} />\n    )\n\n    const systemColors = useColors()\n\n    const plotSpec = useCallback(\n        (transpose: boolean) => {\n            const title = props.histograms.length === 1 ? props.histograms[0].shortname : ''\n            const colors = props.histograms.map(h => h.color)\n            const shortnames = props.histograms.map(h => h.shortname)\n            const renderY = relative ? (y: number) => `${y.toFixed(2)}%` : (y: number) => renderNumberHighlyRounded(y, 2)\n\n            const [xIdxStart, xIdxEnd] = histogramBounds(props.histograms)\n            const xidxs = Array.from({ length: xIdxEnd - xIdxStart }, (_, i) => i + xIdxStart)\n            const [xAxisMarks, renderX] = xAxis(xidxs, binSize, binMin, useImperial, transpose)\n            const [marks, maxValue] = createHistogramMarks(props.histograms, xidxs, histogramType, relative, renderX, renderY, transpose, systemColors)\n            marks.push(\n                ...xAxisMarks,\n                ...yAxis(maxValue, transpose),\n            )\n            marks.push(Plot.text([title], { frameAnchor: 'top', dy: -40 }))\n            const xlabel = `${props.statDescription} (/${useImperial ? 'mi' : 'km'}²)`\n            const ylabel = relative ? '% of total' : 'Population'\n            const ydomain: [number, number] = [maxValue * (-yPad), maxValue * (1 + yPad)]\n            const legend = props.histograms.length === 1\n                ? undefined\n                : { legend: !transpose, range: colors, domain: shortnames }\n            return { marks, xlabel, ylabel, ydomain, legend }\n        },\n        [props.histograms, binMin, binSize, relative, histogramType, useImperial, systemColors, props.statDescription],\n    )\n\n    return (\n        <PlotComponent\n            plotSpec={plotSpec}\n            settingsElement={settingsElement}\n        />\n    )\n}\n\nexport const transposeSettingsHeight = '30.5px'\n\nfunction HistogramSettings(props: {\n    shortnames: string[]\n    makePlot: () => HTMLElement\n}): ReactNode {\n    const universe = useUniverse()\n    const [histogramType, setHistogramType] = useSetting('histogram_type')\n    const colors = useColors()\n    const transpose = useTranspose()\n\n    // dropdown for histogram type\n    return (\n        <div\n            className=\"serif\"\n            style={{\n                backgroundColor: transpose ? undefined : colors.background,\n                padding: transpose ? undefined : '0.5em',\n                border: transpose ? undefined : `1px solid ${colors.textMain}`,\n                display: 'flex',\n                gap: '0.5em',\n                height: transpose ? transposeSettingsHeight : undefined,\n                alignItems: transpose ? 'center' : undefined,\n                justifyContent: transpose ? 'center' : undefined,\n            }}\n        >\n            <img\n                src=\"/download.png\"\n                onClick={async () => {\n                    const plot = props.makePlot()\n                    document.body.appendChild(plot)\n                    await createScreenshot(\n                        {\n                            path: `${props.shortnames.join('_')}_histogram`,\n                            overallWidth: plot.offsetWidth * 2,\n                            elementsToRender: [plot],\n                            heightMultiplier: 1.2,\n                        },\n                        universe,\n                        colors,\n                    )\n                    plot.remove()\n                }}\n                width=\"20\"\n                height=\"20\"\n            />\n            <select\n                value={histogramType}\n                style={{ backgroundColor: colors.background, color: colors.textMain }}\n                onChange={(e) => { setHistogramType(e.target.value as HistogramType) }}\n                className=\"serif\"\n                data-test-id=\"histogram_type\"\n            >\n                <option value=\"Line\">Line</option>\n                <option value=\"Line (cumulative)\">Line (cumulative)</option>\n                <option value=\"Bar\">Bar</option>\n            </select>\n            <CheckboxSetting name={transpose ? 'Relative' : 'Relative Histograms'} settingKey=\"histogram_relative\" testId=\"histogram_relative\" />\n        </div>\n    )\n}\n\nfunction histogramBounds(histograms: HistogramProps[]): [number, number] {\n    let xIdxEnd = Math.max(...histograms.map(histogram => histogram.histogram.counts!.length))\n    xIdxEnd += 1\n    const zerosAtFront = (arr: number[]): number => {\n        let i = 0\n        while (i < arr.length && arr[i] === 0) {\n            i++\n        }\n        return i\n    }\n    let xIdxStart = Math.min(...histograms.map(histogram => zerosAtFront(histogram.histogram.counts!)))\n\n    if (xIdxStart > 0) {\n        xIdxStart--\n    }\n\n    // round x_idx_start down to the nearest number which, when divided by 10, has a remainder of 0, 3, or 7\n\n    while (xIdxStart % 10 !== 0 && xIdxStart % 10 !== 3 && xIdxStart % 10 !== 7) {\n        xIdxStart--\n    }\n\n    // same for x_idx_end\n    while (xIdxEnd % 10 !== 0 && xIdxEnd % 10 !== 3 && xIdxEnd % 10 !== 7) {\n        xIdxEnd++\n    }\n\n    return [xIdxStart, xIdxEnd]\n}\n\ninterface Series {\n    values: { name: string, xidx: number, y: number }[]\n    color: string\n}\n\nfunction mulitipleSeriesConsistentLength(histograms: HistogramProps[], xidxs: number[], relative: boolean, isCumulative: boolean): Series[] {\n    // Create a list of series, each with the same length\n    const sum = (arr: number[]): number => arr.reduce((a, b) => a + b, 0)\n    const sumEach = histograms.map(histogram => sum(histogram.histogram.counts!))\n    const series = histograms.map((histogram, histogramIdx) => {\n        const counts = [...histogram.histogram.counts!]\n        const afterVal = 0\n        if (isCumulative) {\n            for (let i = counts.length - 2; i >= 0; i--) {\n                counts[i] += counts[i + 1]\n            }\n        }\n        return {\n            values: xidxs.map(xidx => ({\n                name: histogram.shortname,\n                xidx,\n                y: (\n                    xidx >= counts.length\n                        ? afterVal\n                        : counts[xidx] / sumEach[histogramIdx]\n                ) * (relative ? 100 : histogram.universeTotal),\n            })),\n            color: histogram.color,\n        }\n    })\n    return series\n}\n\nfunction dovetailSequences(series: { values: { xidx: number, y: number, name: string }[], color: string }[]): { xidxLeft: number, xidxRight: number, y: number, color: string }[] {\n    const seriesSingle: { xidxLeft: number, xidxRight: number, y: number, color: string }[] = []\n    for (let i = 0; i < series.length; i++) {\n        const s = series[i]\n        const width = 1 / (series.length) * 0.8\n        const off = (i - (series.length - 1) / 2) * width\n        seriesSingle.push(...s.values\n            .map(v => ({\n                xidxLeft: v.xidx + off, xidxRight: v.xidx + off + width,\n                y: v.y, color: s.color, name: v.name,\n            })),\n        )\n    }\n    return seriesSingle\n}\n\nfunction maxSequences(series: { values: { xidx: number, y: number, name: string }[] }[]): { xidx: number, y: number, names: string[], ys: number[] }[] {\n    const seriesMax: { xidx: number, y: number, names: string[], ys: number[] }[] = []\n    for (let i = 0; i < series[0].values.length; i++) {\n        seriesMax.push({\n            xidx: series[0].values[i].xidx,\n            y: Math.max(...series.map(s => s.values[i].y)),\n            names: series.map(s => s.values[i].name),\n            ys: series.map(s => s.values[i].y),\n        })\n    }\n    return seriesMax\n}\n\nfunction xAxis(xidxs: number[], binSize: number, binMin: number, useImperial: boolean, transpose: boolean): [Plot.Markish[], (x: number) => string] {\n    const xKeypoints: number[] = []\n    for (const xidx of xidxs) {\n        let lastDigit = xidx % 10\n        if (useImperial) {\n            lastDigit = (lastDigit + 4) % 10\n        }\n        if (lastDigit === 0 || lastDigit === 3 || lastDigit === 7) {\n            xKeypoints.push(xidx)\n        }\n    }\n    const adjustment = useImperial ? Math.log10(1.60934) * 2 : 0\n\n    let axis = Plot.axisX\n    let grid = Plot.gridX\n    if (transpose) {\n        axis = Plot.axisY\n        grid = Plot.gridY\n    }\n    return [\n        [\n            axis(xKeypoints, { tickFormat: d => renderPow10(d * binSize + binMin + adjustment) }),\n            grid(xKeypoints),\n        ],\n        x => `${renderNumberHighlyRounded(Math.pow(10, x * binSize + binMin + adjustment), 2)}/${useImperial ? 'mi' : 'km'}²`,\n    ]\n}\n\nfunction yAxis(maxValue: number, transpose: boolean): (Plot.CompoundMark | Plot.RuleY)[] {\n    const minNYTicks = 5\n    const idealTickGap = maxValue / minNYTicks\n    const log10TickGapTimes3 = Math.floor(Math.log10(idealTickGap) * 3)\n    const tickGapOom = Math.pow(10, Math.floor(log10TickGapTimes3 / 3))\n    const tickGapMantissa = log10TickGapTimes3 % 3 === 0 ? 1 : log10TickGapTimes3 % 3 === 1 ? 2 : 5\n    const tickGap = tickGapMantissa * tickGapOom\n    const maxValueRounded = Math.ceil(maxValue / tickGap) * tickGap\n    const yKeypoints = Array.from({ length: Math.floor(maxValueRounded / tickGap) + 1 }, (_, i) => i * tickGap)\n        .filter((_, i) => !transpose || i % 2 === 0) // If transpose, remove every other keypoint\n\n    let axis = Plot.axisY\n    let grid = Plot.gridY\n    if (transpose) {\n        axis = Plot.axisX\n        grid = Plot.gridX\n    }\n\n    return [\n        axis(yKeypoints, { tickFormat: (d: number) => renderNumberHighlyRounded(d, 1) }),\n        grid(yKeypoints),\n    ]\n}\n\nfunction pow10Moral(x: number): number {\n    // 10 ** x, but \"morally\" so, i.e., 10 ** 0.3 = 2\n    if (x < 0) {\n        return 1 / pow10Moral(-x)\n    }\n    if (x >= 1) {\n        return 10 ** Math.floor(x) * pow10Moral(x - Math.floor(x))\n    }\n    const x10 = x * 10\n    const errorRound = Math.abs(x10 - Math.round(x10))\n    if (errorRound > 0.2) {\n        return 10 ** x\n    }\n    if (Math.round(x10) === 0) {\n        return 1\n    }\n    if (Math.round(x10) === 3) {\n        return 2\n    }\n    if (Math.round(x10) === 7) {\n        return 5\n    }\n    return 10 ** x\n}\n\nfunction renderPow10(x: number): string {\n    const p10 = pow10Moral(x)\n\n    return renderNumberHighlyRounded(p10)\n}\n\nfunction renderNumberHighlyRounded(x: number, places = 0): string {\n    if (x < 1000) {\n        return x.toFixed(0)\n    }\n    if (x < 1e6) {\n        return `${(x / 1e3).toFixed(places)}k`\n    }\n    if (x < 1e9) {\n        return `${(x / 1e6).toFixed(places)}M`\n    }\n    if (x < 1e12) {\n        return `${(x / 1e9).toFixed(places)}B`\n    }\n    return x.toExponential(1)\n}\n\nfunction createHistogramMarks(\n    histograms: HistogramProps[], xidxs: number[],\n    histogramType: HistogramType, relative: boolean,\n    renderX: (x: number) => string,\n    renderY: (y: number) => string,\n    transpose: boolean,\n    colors: Colors,\n): [Plot.Markish[], number] {\n    const series = mulitipleSeriesConsistentLength(histograms, xidxs, relative, histogramType === 'Line (cumulative)')\n    const seriesSingle = dovetailSequences(series)\n\n    const maxValue = Math.max(...series.map(s => Math.max(...s.values.map(v => v.y))))\n    const tip = Plot.tip(\n        maxSequences(series),\n        (transpose ? Plot.pointerY : Plot.pointerX)({\n            x: transpose ? 'y' : 'xidx',\n            y: transpose ? 'xidx' : 'y',\n            title: (d: { names: string[], xidx: number, ys: number[] }) => {\n                let result = `Density: ${renderX(d.xidx)}\\n`\n                if (d.names.length > 1) {\n                    result += d.names.map((name: string, i: number) => `${name}: ${renderY(d.ys[i])}`).join('\\n')\n                }\n                else {\n                    result += `Frequency: ${renderY(d.ys[0])}`\n                }\n                return result\n            },\n            fill: colors.slightlyDifferentBackground,\n            stroke: colors.borderNonShadow,\n            textColor: colors.textMain,\n        }),\n    )\n    const color = histograms.length === 1 ? histograms[0].color : 'name'\n    const marks: Plot.Markish[] = []\n    if (histogramType === 'Line' || histogramType === 'Line (cumulative)') {\n        marks.push(\n            ...series.map(s => Plot.line(s.values, {\n                x: transpose ? 'y' : 'xidx', y: transpose ? 'xidx' : 'y', stroke: color, strokeWidth: 4,\n            })),\n        )\n    }\n    else {\n        marks.push(\n            (transpose\n                ? Plot.rectX(seriesSingle, {\n                    y1: 'xidxLeft',\n                    y2: 'xidxRight',\n                    x: 'y',\n                    fill: color,\n                })\n                : Plot.rectY(seriesSingle, {\n                    x1: 'xidxLeft',\n                    x2: 'xidxRight',\n                    y: 'y',\n                    fill: color,\n                })),\n        )\n    }\n    marks.push(tip)\n    return [marks, maxValue]\n}\n","import * as Plot from '@observablehq/plot'\nimport React, { ReactElement, ReactNode, useMemo } from 'react'\n\n// imort Observable plot\n\nimport { TimeSeriesExtraStat } from './load-article'\nimport { PlotComponent } from './plots-general'\n\nexport interface TimeSeriesPlotProps {\n    stat: TimeSeriesExtraStat\n    color: string\n    shortname: string\n}\n\nexport function TimeSeriesPlot(props: { stats: TimeSeriesPlotProps[] }): ReactNode {\n    // TODO this is largely unfinished. We need to make several improvements to this component\n    // for it to be production-ready.\n    // Including working with transposed comparisons\n    const settingsElement = (): ReactElement => <div></div>\n\n    const plotSpec = useMemo(\n        () => {\n            const marks = props.stats.map((stat) => {\n                const x = stat.stat.years\n                const y = stat.stat.timeSeries\n                return Plot.line(\n                    x.map((xval, i) => [xval, y[i]]),\n                    { stroke: stat.color, strokeWidth: 2 },\n                ) as Plot.Markish\n            })\n            marks.push(\n                Plot.axisX({\n                    label: 'Year',\n                    tickFormat: (d: number) => d.toString(),\n                }),\n            )\n            const xlabel = 'Year'\n            const ylabel = props.stats[0].stat.name\n            const ydomain = undefined\n            const legend = { legend: true, range: props.stats.map(stat => stat.color), domain: props.stats.map(stat => stat.shortname) }\n            return { marks, xlabel, ylabel, ydomain, legend }\n        },\n        [props.stats],\n    )\n\n    return (\n        <PlotComponent\n            plotSpec={() => plotSpec}\n            settingsElement={settingsElement}\n        />\n    )\n}\n","import React, { ReactNode } from 'react'\n\nimport { ExtraStat } from './load-article'\nimport { Histogram } from './plots-histogram'\nimport { TimeSeriesPlot } from './plots-timeseries'\n\nexport interface PlotProps {\n    shortname: string\n    extraStat?: ExtraStat\n    color: string\n}\n\nexport function RenderedPlot({ statDescription, plotProps }: { statDescription: string, plotProps: PlotProps[] }): ReactNode {\n    const type = plotProps.reduce<undefined | 'histogram' | 'time_series'>((result, plot) => {\n        if (result === undefined) {\n            return plot.extraStat?.type\n        }\n        else if (plot.extraStat?.type !== undefined && plot.extraStat.type !== result) {\n            throw new Error('Rendering plots of differing types')\n        }\n        return result\n    }, undefined)\n    switch (type) {\n        case 'histogram':\n            return (\n                <Histogram\n                    statDescription={statDescription}\n                    histograms={plotProps.flatMap(\n                        (props) => {\n                            if (props.extraStat?.type !== 'histogram') {\n                                return []\n                            }\n                            return [\n                                {\n                                    shortname: props.shortname,\n                                    histogram: props.extraStat,\n                                    color: props.color,\n                                    universeTotal: props.extraStat.universeTotal,\n                                },\n                            ]\n                        },\n                    )}\n                />\n            )\n        case 'time_series':\n            return (\n                <TimeSeriesPlot\n                    stats={plotProps.map(\n                        (props) => {\n                            if (props.extraStat?.type !== 'time_series') {\n                                throw new Error('expected time_series')\n                            }\n                            return {\n                                shortname: props.shortname,\n                                stat: props.extraStat,\n                                color: props.color,\n                            }\n                        },\n                    )}\n                />\n            )\n        case undefined:\n            return null\n    }\n}\n","import { createContext, useContext } from 'react'\n\n// eslint-disable-next-line no-restricted-syntax -- Context declaration\nexport const TransposeContext = createContext(false)\n\nexport function useTranspose(): boolean {\n    return useContext(TransposeContext)\n}\n"],"names":["ArticleWarnings","screenshotMode","useScreenshotMode","selectedGroups","useSelectedGroups","groupsMissingYearSelection","useGroupsMissingYearSelection","availableYears","useAvailableYears","dataSourceCheckboxes","useDataSourceCheckboxes","settings","useSettings","groupYearKeys","allUncheckedSourceGroups","category","checkboxSpecs","name","forcedOn","sourceEnabledKey","warnings","groupOrCategory","HierarchicalName","YearList","year","checkboxCategoryName","WarningBox","param","colors","useColors","warning","key","years","PlotComponent","props","transpose","useTranspose","plotRef","useRef","plotSpec","plotConfig","useCallback","transposeConfig","_plotSpec","marks","xlabel","ylabel","ydomain","result","undefined","legend","useEffect","plot","Plot","transposeTopMargin","div","document","Histogram","histogramType","_useSetting","useImperial","_useSetting1","relative","_useSetting2","binMin","binSize","_iteratorError","histogram","Error","systemColors","maxValue","log10TickGapTimes3","tickGapOom","tickGap","yKeypoints","axis","grid","title","h","shortnames","renderY","y","renderNumberHighlyRounded","_histogramBounds","histograms","_Math","_Math1","xIdxEnd","zerosAtFront","arr","i","xIdxStart","xidxs","Array","_","_xAxis","xKeypoints","xidx","lastDigit","adjustment","Math","d","pow10Moral","x","x10","errorRound","xAxisMarks","renderX","_createHistogramMarks","isCumulative","sumEach","series","a","b","histogramIdx","counts","seriesSingle","dovetailSequences","s","width","off","_seriesSingle","v","tip","maxSequences","seriesMax","color","_marks","maxValueRounded","tickGapMantissa","makePlot","HistogramSettings","transposeSettingsHeight","universe","useUniverse","setHistogramType","createScreenshot","e","CheckboxSetting","places","TimeSeriesPlot","useMemo","stat","xval","RenderedPlot","statDescription","plotProps","_plot_extraStat","_plot_extraStat1","_props_extraStat","TransposeContext","createContext","useContext"],"mappings":"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"}