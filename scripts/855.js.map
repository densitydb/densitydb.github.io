{"version":3,"file":"855.js","sources":["webpack://assets/./src/data/localized_type_names.ts","webpack://assets/./src/utils/text.ts"],"sourcesContent":["const value: [string, Record<string, string>][] = [\n    [\n        \"USA\",\n        {\n            \"Country\": \"USA\",\n            \"Subnational Region\": \"State\",\n            \"Urban Center\": \"US Urban Center\",\n            \"Metropolitan Cluster\": \"US Metropolitan Cluster\",\n            \"5M Person Circle\": \"US 5M Person Circle\",\n            \"10M Person Circle\": \"US 10M Person Circle\",\n            \"20M Person Circle\": \"US 20M Person Circle\",\n            \"50M Person Circle\": \"US 50M Person Circle\",\n            \"100M Person Circle\": \"US 100M Person Circle\",\n            \"200M Person Circle\": \"US 200M Person Circle\",\n            \"500M Person Circle\": \"US 500M Person Circle\",\n            \"1B Person Circle\": \"US 1B Person Circle\"\n        }\n    ],\n    [\n        \"Canada\",\n        {\n            \"Country\": \"Canada\",\n            \"Subnational Region\": \"Province\",\n            \"Urban Center\": \"CA Urban Center\",\n            \"Metropolitan Cluster\": \"CA Metropolitan Cluster\",\n            \"5M Person Circle\": \"CA 5M Person Circle\",\n            \"10M Person Circle\": \"CA 10M Person Circle\",\n            \"20M Person Circle\": \"CA 20M Person Circle\",\n            \"50M Person Circle\": \"CA 50M Person Circle\",\n            \"100M Person Circle\": \"CA 100M Person Circle\",\n            \"200M Person Circle\": \"CA 200M Person Circle\",\n            \"500M Person Circle\": \"CA 500M Person Circle\",\n            \"1B Person Circle\": \"CA 1B Person Circle\"\n        }\n    ]\n]\nexport default value","import localized_type_names from '../data/localized_type_names'\n\nexport function displayType(universe: string, type: string): string {\n    return pluralize(localize(universe, type))\n}\n\nexport function pluralize(type: string): string {\n    if (type.endsWith('y')) {\n        return `${type.slice(0, -1)}ies`\n    }\n    return `${type}s`\n}\n\nfunction localize(universe: string, type: string): string {\n    for (const [universeSuffix, types] of localized_type_names) {\n        if (universe.endsWith(universeSuffix)) {\n            if (type in types) {\n                return types[type]\n            }\n        }\n    }\n    return type\n}\n\nexport function separateNumber(number: string): string {\n    return number.replaceAll(/(?<!^)([0-9]{3})(?=([0-9]{3})*($|\\.))/g, '\\u202f$1')\n}\n"],"names":["displayType","universe","type","pluralize","localize","_iteratorError","localized_type_names","universeSuffix","types","separateNumber","number"],"mappings":"2IAoCA,MApCkD,CAC9C,CACI,MACA,CACI,QAAW,MACX,qBAAsB,QACtB,eAAgB,kBAChB,uBAAwB,0BACxB,mBAAoB,sBACpB,oBAAqB,uBACrB,oBAAqB,uBACrB,oBAAqB,uBACrB,qBAAsB,wBACtB,qBAAsB,wBACtB,qBAAsB,wBACtB,mBAAoB,qBACxB,EACH,CACD,CACI,SACA,CACI,QAAW,SACX,qBAAsB,WACtB,eAAgB,kBAChB,uBAAwB,0BACxB,mBAAoB,sBACpB,oBAAqB,uBACrB,oBAAqB,uBACrB,oBAAqB,uBACrB,qBAAsB,wBACtB,qBAAsB,wBACtB,qBAAsB,wBACtB,mBAAoB,qBACxB,EACH,CACJ,C,sGCjCM,SAASA,EAAYC,CAAgB,CAAEC,CAAY,EACtD,OAAOC,EAAUC,AAUrB,SAAkBH,CAAgB,CAAEC,CAAY,E,IACvCG,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,O,IAAL,QAAKA,EAAAA,EAAiCC,CAAoBA,CAAAA,OAAAA,QAAAA,CAAAA,GAArDD,CAAAA,CAAAA,EAAAA,AAAAA,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,AAAAA,EAAAA,EAAAA,GAAuD,CAAvDA,I,EAAAA,G,EAAAA,EAAAA,KAAAA,C,mWAAAA,I,qDAAAA,G,8OAAAA,I,6KAAOE,EAAAA,CAAAA,CAAAA,EAAAA,CAAgBC,EAAAA,CAAAA,CAAAA,EAAAA,CACxB,GAAIP,EAAS,QAAQ,CAACM,IACdL,KAAQM,EACR,OAAOA,CAAK,CAACN,EAAK,AAG9B,C,UANKG,EAAAA,GAAAA,EAAAA,C,aAAAA,GAAAA,AAAAA,MAAAA,EAAAA,MAAAA,EAAAA,EAAAA,MAAAA,E,YAAAA,E,MAAAA,C,EAOL,OAAOH,CACX,EAnB8BD,EAAUC,GACxC,CAEO,SAASC,EAAUD,CAAY,SAClC,AAAIA,EAAK,QAAQ,CAAC,KACN,GAAoB,OAAlBA,EAAK,KAAK,CAAC,EAAG,IAAI,OAExB,GAAO,OAALA,EAAK,IACnB,CAaO,SAASO,EAAeC,CAAc,EACzC,OAAOA,EAAO,UAAU,CAAC,qDAA0C,MACvE,C"}