{"version":3,"file":"152.js","sources":["webpack://assets/./src/components/Icon.tsx","webpack://assets/./src/components/comparison-panel.tsx"],"sourcesContent":["/**\n * This only uses the transparency of the icon image to display the specified color.\n */\n\nimport React, { CSSProperties, ReactNode } from 'react'\n\nexport function Icon({ size, color, src, style }: { size: string, color: string, src: string, style?: Partial<CSSProperties> }): ReactNode {\n    return (\n        <div style={{ backgroundColor: color, width: size, height: size, maskImage: `url(${src})`, maskRepeat: 'no-repeat', maskSize: 'contain', maskPosition: 'center', ...style }} />\n    )\n}\n","import '../common.css'\nimport './article.css'\n\nimport React, { CSSProperties, ReactNode, useContext, useEffect, useMemo, useRef } from 'react'\n\nimport { Navigator } from '../navigation/Navigator'\nimport { sanitize } from '../navigation/links'\nimport { HueColors } from '../page_template/color-themes'\nimport { useColors } from '../page_template/colors'\nimport { rowExpandedKey, useSettings } from '../page_template/settings'\nimport { groupYearKeys, StatGroupSettings } from '../page_template/statistic-settings'\nimport { PageTemplate } from '../page_template/template'\nimport { useUniverse } from '../universe'\nimport { mixWithBackground } from '../utils/color'\nimport { Article } from '../utils/protos'\nimport { useComparisonHeadStyle, useHeaderTextClass, useMobileLayout, useSubHeaderTextClass } from '../utils/responsive'\nimport { TransposeContext, useTranspose } from '../utils/transpose'\n\nimport { ArticleWarnings } from './ArticleWarnings'\nimport { Icon } from './Icon'\nimport { QuerySettingsConnection } from './QuerySettingsConnection'\nimport { ArticleRow } from './load-article'\nimport { MapGeneric, MapGenericProps, ShapeRenderingSpec } from './map'\nimport { PlotProps, RenderedPlot } from './plots'\nimport { transposeSettingsHeight } from './plots-histogram'\nimport { ScreencapElements, useScreenshotMode } from './screenshot'\nimport { SearchBox } from './search'\nimport { TableRowContainer, StatisticRowCells, TableHeaderContainer, StatisticHeaderCells, ColumnIdentifier, StatisticName } from './table'\n\nconst leftBarMargin = 0.02\nconst barHeight = '5px'\n\nexport function ComparisonPanel(props: { universes: string[], articles: Article[], rows: (settings: StatGroupSettings) => ArticleRow[][], mapPartitions: number[][] }): ReactNode {\n    const colors = useColors()\n    const tableRef = useRef<HTMLDivElement>(null)\n    const mapRef = useRef(null)\n\n    const joinedString = props.articles.map(x => x.shortname).join(' vs ')\n    const names = props.articles.map(a => a.longname)\n\n    const screencapElements = (): ScreencapElements => ({\n        path: `${sanitize(joinedString)}.png`,\n        overallWidth: tableRef.current!.offsetWidth * 2,\n        elementsToRender: [tableRef.current!, mapRef.current!],\n    })\n\n    const settings = useSettings(groupYearKeys())\n\n    const dataByArticleStat = props.rows(settings)\n    const dataByStatArticle = dataByArticleStat[0].map((_, statIndex) => dataByArticleStat.map(articleData => articleData[statIndex]))\n\n    const mobileLayout = useMobileLayout()\n\n    const validOrdinalsByStat = dataByStatArticle.map(statData => statData.every(value => value.disclaimer !== 'heterogenous-sources'))\n\n    const includeOrdinals = (\n        props.articles.every(article => article.articleType === props.articles[0].articleType)\n        && (validOrdinalsByStat.length === 0 || validOrdinalsByStat.some(x => x))\n    )\n\n    const onlyColumns: ColumnIdentifier[] = includeOrdinals ? ['statval', 'statval_unit', 'statistic_ordinal', 'statistic_percentile'] : ['statval', 'statval_unit']\n\n    const maxColumns = mobileLayout ? 4 : 6\n\n    const expandedSettings = useSettings(dataByStatArticle.filter(statData => statData.some(row => row.extraStat !== undefined)).map(([{ statpath }]) => rowExpandedKey(statpath)))\n\n    const expandedByStatIndex = dataByStatArticle.map(([{ statpath }]) => expandedSettings[rowExpandedKey(statpath)] ?? false)\n    const numExpandedExtras = expandedByStatIndex.filter(v => v).length\n\n    let widthColumns = (includeOrdinals ? 1.5 : 1) * props.articles.length + 1\n    let widthTransposeColumns = (includeOrdinals ? 1.5 : 1) * (dataByArticleStat[0].length + numExpandedExtras) + 1.5\n\n    const transpose = widthColumns > maxColumns && widthColumns > widthTransposeColumns\n\n    if (transpose) {\n        ([widthColumns, widthTransposeColumns] = [widthTransposeColumns, widthColumns])\n    }\n\n    const leftMarginPercent = transpose ? 0.24 : 0.18\n    const numColumns = transpose ? dataByArticleStat[0].length : props.articles.length\n    const columnWidth = 100 * (1 - leftMarginPercent) / (numColumns + (transpose ? numExpandedExtras : 0))\n\n    const expandedColumnWidth = (columnIndex: number): number => {\n        return transpose && expandedByStatIndex[columnIndex] ? 2 * columnWidth : columnWidth\n    }\n\n    const leftSpacerCell = (): ReactNode => {\n        return <div style={{ width: `${leftMarginPercent * 100}%` }}></div>\n    }\n\n    const transposeHistogramSpacer = (columnIndex: number): ReactNode => {\n        return transpose && expandedByStatIndex[columnIndex] ? <div key={`spacer_${columnIndex}`} style={{ width: `${columnWidth}%` }}></div> : null\n    }\n\n    const maybeScroll = (contents: React.ReactNode): ReactNode => {\n        if (widthColumns > maxColumns) {\n            return (\n                <div style={{ overflowX: 'scroll' }}>\n                    <div style={{ width: `${100 * widthColumns / (maxColumns - 0.7)}%` }}>\n                        {contents}\n                    </div>\n                </div>\n            )\n        }\n        return contents\n    }\n\n    const highlightArticleIndicesByStat: (number | undefined)[] = dataByStatArticle.map(articlesStatData => getHighlightIndex(articlesStatData))\n\n    const headerTextClass = useHeaderTextClass()\n    const subHeaderTextClass = useSubHeaderTextClass()\n    const comparisonRightStyle = useComparisonHeadStyle('right')\n    const searchComparisonStyle = useComparisonHeadStyle()\n\n    const currentUniverse = useUniverse()\n\n    const navContext = useContext(Navigator.Context)\n\n    const sharedTypeOfAllArticles = props.articles.every(article => article.articleType === props.articles[0].articleType) ? props.articles[0].articleType : undefined\n\n    const heading = (articleIndex: number, width: number): ReactNode => {\n        return (\n            <div key={`heading_${articleIndex}`} style={{ width: `${width}%` }}>\n                <HeadingDisplay\n                    longname={props.articles[articleIndex].longname}\n                    includeDelete={props.articles.length > 1}\n                    onDelete={() => {\n                        void navContext.navigate({\n                            kind: 'comparison',\n                            universe: currentUniverse,\n                            longnames: names.filter((_, index) => index !== articleIndex),\n                        }, { history: 'push', scroll: { kind: 'none' } })\n                    }}\n                    onReplace={x =>\n                        navContext.link({\n                            kind: 'comparison',\n                            universe: currentUniverse,\n                            longnames: names.map((value, index) => index === articleIndex ? x : value),\n                        }, { scroll: { kind: 'none' } })}\n                    manipulationJustify={transpose ? 'center' : 'flex-end'}\n                    sharedTypeOfAllArticles={sharedTypeOfAllArticles}\n                />\n            </div>\n        )\n    }\n\n    const bars = (backgroundColor: (i: number) => string | undefined): ReactNode => {\n        return (\n            <div style={{ display: 'flex' }}>\n                {leftSpacerCell()}\n                {Array.from({ length: numColumns }).map(\n                    (_, i) => (\n                        <div\n                            key={`bar_${i}`}\n                            style={{\n                                width: `${expandedColumnWidth(i)}%`,\n                                height: barHeight,\n                                backgroundColor: backgroundColor(i),\n                            }}\n                        />\n                    ),\n                )}\n            </div>\n        )\n    }\n\n    const comparisonHeaders = (statNameOverride?: string): ReactNode => {\n        return [\n            <ComparisonColorBar key=\"color\" highlightIndex={undefined} />,\n            <StatisticHeaderCells key=\"statname\" onlyColumns={['statname']} simpleOrdinals={true} totalWidth={100 * (leftMarginPercent - leftBarMargin)} statNameOverride={statNameOverride} />,\n            ...Array.from({ length: numColumns })\n                .map((_, columnIndex) => [\n                    <StatisticHeaderCells key={`headerCells_${columnIndex}`} onlyColumns={onlyColumns} simpleOrdinals={true} totalWidth={columnWidth} />,\n                    transposeHistogramSpacer(columnIndex),\n                ]),\n        ]\n    }\n\n    const statName = (statIndex: number, width: number, center: boolean): ReactNode => {\n        // So that we show the expand if there's a least one extra\n        const nameRow = dataByStatArticle[statIndex].find(row => row.extraStat !== undefined) ?? dataByStatArticle[statIndex][0]\n        return (\n            <div key={`statName_${nameRow.statpath}`} className=\"serif value\" style={{ width: `${width}%`, padding: '1px', textAlign: center ? 'center' : undefined }}>\n                <StatisticName\n                    row={nameRow}\n                    longname={names[0]}\n                    currentUniverse={currentUniverse}\n                    center={center}\n                />\n            </div>\n        )\n    }\n\n    const valueCells = (articleIndex: number, statIndex: number): ReactNode => {\n        return [\n            <StatisticRowCells\n                key={`rowCells_${articleIndex}_${statIndex}`}\n                row={dataByArticleStat[articleIndex][statIndex]}\n                longname={names[articleIndex]}\n                onlyColumns={onlyColumns}\n                blankColumns={validOrdinalsByStat[statIndex] ? [] : ['statistic_ordinal', 'statistic_percentile']}\n                simpleOrdinals={true}\n                statisticStyle={highlightArticleIndicesByStat[statIndex] === articleIndex ? { backgroundColor: mixWithBackground(color(colors.hueColors, articleIndex), colors.mixPct / 100, colors.background) } : {}}\n                onNavigate={(x) => {\n                    void navContext.navigate({\n                        kind: 'comparison',\n                        universe: navContext.universe,\n                        longnames: names.map((value, index) => index === articleIndex ? x : value),\n                    }, { history: 'push', scroll: { kind: 'none' } })\n                }}\n                totalWidth={columnWidth}\n            />,\n            transposeHistogramSpacer(statIndex),\n        ]\n    }\n\n    const plotProps = (statIndex: number): PlotProps[] => dataByStatArticle[statIndex].map((row, articleIdx) => ({ ...row, color: color(colors.hueColors, articleIdx), shortname: props.articles[articleIdx].shortname }))\n\n    const normalTableContents = (): ReactNode => {\n        return (\n            <>\n                {bars(articleIndex => color(colors.hueColors, articleIndex))}\n                <div style={{ display: 'flex' }}>\n                    {leftSpacerCell()}\n                    {Array.from({ length: props.articles.length }).map((_, articleIndex) => heading(articleIndex, columnWidth))}\n                </div>\n                {bars(articleIndex => color(colors.hueColors, articleIndex))}\n\n                <TableHeaderContainer>\n                    {comparisonHeaders()}\n                </TableHeaderContainer>\n\n                {\n                    dataByStatArticle.map((articlesStatData, statIndex) => {\n                        return (\n                            <div key={`TableRowContainer_${statIndex}`}>\n                                <TableRowContainer index={statIndex}>\n                                    <ComparisonColorBar key=\"color\" highlightIndex={highlightArticleIndicesByStat[statIndex]} />\n                                    {statName(statIndex, 100 * (leftMarginPercent - leftBarMargin), false)}\n                                    {dataByStatArticle[statIndex].map((_, articleIndex) => {\n                                        return valueCells(articleIndex, statIndex)\n                                    })}\n                                </TableRowContainer>\n                                {expandedByStatIndex[statIndex]\n                                    ? (\n                                            <div style={{ width: '100%', position: 'relative' }}>\n                                                <RenderedPlot statDescription={articlesStatData[0].renderedStatname} plotProps={plotProps(statIndex)} />\n                                            </div>\n                                        )\n                                    : null}\n                            </div>\n                        )\n                    })\n                }\n            </>\n        )\n    }\n\n    const transposeTableContents = (): ReactNode => {\n        const someExpanded = expandedByStatIndex.some(e => e)\n        const headerHeight = transposeSettingsHeight\n        const contentHeight = '379.5px'\n\n        return (\n            <>\n                {bars(\n                    statIndex => highlightArticleIndicesByStat[statIndex] !== undefined ? color(colors.hueColors, highlightArticleIndicesByStat[statIndex]) : undefined,\n                )}\n                <div style={{\n                    display: 'flex',\n                    flexDirection: 'row' }}\n                >\n                    {leftSpacerCell()}\n                    {\n                        dataByStatArticle.map((_, statIndex) => {\n                            return statName(statIndex, expandedColumnWidth(statIndex), true)\n                        })\n                    }\n                </div>\n\n                <div style={{ position: 'relative', minHeight: someExpanded ? `calc(${headerHeight} + ${contentHeight})` : undefined }}>\n\n                    <TableHeaderContainer>\n                        {comparisonHeaders('Region')}\n                    </TableHeaderContainer>\n\n                    {props.articles.map((_, articleIndex) => {\n                        return (\n                            <TableRowContainer key={`TableRowContainer_${articleIndex}`} index={articleIndex} minHeight={someExpanded ? `calc(${contentHeight} / ${props.articles.length})` : undefined}>\n                                <ComparisonColorBar highlightIndex={articleIndex} />\n                                {heading(articleIndex, (leftMarginPercent - 2 * leftBarMargin) * 100)}\n                                <ComparisonColorBar highlightIndex={articleIndex} />\n                                { dataByArticleStat[articleIndex].map((stat, statIndex) => {\n                                    return valueCells(articleIndex, statIndex)\n                                })}\n                            </TableRowContainer>\n                        )\n                    })}\n                    {dataByStatArticle.map((rows, statIndex) => {\n                        if (!expandedByStatIndex[statIndex]) {\n                            return null\n                        }\n                        // Must account for other expanded columns\n                        const leftPercent = 100 * leftMarginPercent + Array.from({ length: statIndex }).reduce((acc: number, _, i) => acc + expandedColumnWidth(i), columnWidth)\n                        return (\n                            <div key={`statPlot_${statIndex}`} style={{ position: 'absolute', top: 0, left: `${leftPercent}%`, bottom: 0, width: `${columnWidth}%` }}>\n                                <RenderedPlot statDescription={rows[0].renderedStatname} plotProps={plotProps(statIndex)} />\n                            </div>\n                        )\n                    })}\n                </div>\n            </>\n        )\n    }\n\n    return (\n        <TransposeContext.Provider value={transpose}>\n            <QuerySettingsConnection />\n            <PageTemplate screencapElements={screencapElements} hasUniverseSelector={true} universes={props.universes}>\n                <div>\n                    <div className={headerTextClass}>Comparison</div>\n                    <div className={subHeaderTextClass}>{joinedString}</div>\n                    <div style={{ marginBlockEnd: '16px' }}></div>\n\n                    <div style={{ display: 'flex' }}>\n                        <div style={{ width: `${100 * leftMarginPercent}%` }} />\n                        <div style={{ width: `${50 * (1 - leftMarginPercent)}%`, marginRight: '1em' }}>\n                            <div className=\"serif\" style={comparisonRightStyle}>Add another region:</div>\n                        </div>\n                        <div style={{ width: `${50 * (1 - leftMarginPercent)}%` }}>\n                            <SearchBox\n                                style={{ ...searchComparisonStyle, width: '100%' }}\n                                placeholder=\"Name\"\n                                link={x =>\n                                    navContext.link({\n                                        kind: 'comparison',\n                                        universe: currentUniverse,\n                                        longnames: [...names, x],\n                                    }, { scroll: { kind: 'none' } })}\n                                autoFocus={false}\n                                prioritizeArticleType={sharedTypeOfAllArticles}\n                            />\n                        </div>\n                    </div>\n\n                    <div style={{ marginBlockEnd: '1em' }}></div>\n\n                    {maybeScroll(\n                        <div ref={tableRef}>\n                            {transpose ? transposeTableContents() : normalTableContents()}\n                            <ArticleWarnings />\n                        </div>,\n                    )}\n                    <div className=\"gap\"></div>\n\n                    <div ref={mapRef}>\n                        <ComparisonMultiMap\n                            longnames={props.articles.map(x => x.longname)}\n                            colors={props.articles.map((_, i) => color(colors.hueColors, i))}\n                            basemap={{ type: 'osm' }}\n                            mapPartitions={props.mapPartitions}\n                        />\n                    </div>\n                </div>\n            </PageTemplate>\n        </TransposeContext.Provider>\n    )\n}\n\nfunction color(colors: HueColors, i: number): string {\n    const colorCycle = [\n        colors.blue,\n        colors.orange,\n        colors.purple,\n        colors.red,\n        colors.grey,\n        colors.pink,\n        colors.yellow,\n        colors.green,\n    ]\n    return colorCycle[i % colorCycle.length]\n}\n\nfunction getHighlightIndex(rows: ArticleRow[]): number | undefined {\n    return rows.map(x => x.statval).reduce<number | undefined>((iMax, x, i, arr) => {\n        if (isNaN(x)) {\n            return iMax\n        }\n        if (iMax === undefined) {\n            return i\n        }\n        return x > arr[iMax] ? i : iMax\n    }, undefined)\n}\n\nfunction ComparisonColorBar({ highlightIndex }: { highlightIndex: number | undefined }): ReactNode {\n    const colors = useColors()\n\n    return (\n        <div\n            key=\"color\"\n            style={{\n                width: `${100 * leftBarMargin}%`,\n                alignSelf: 'stretch',\n                position: 'relative',\n            }}\n        >\n            <div style={{\n                backgroundColor: highlightIndex === undefined ? colors.background : color(colors.hueColors, highlightIndex),\n                height: '100%',\n                width: '50%',\n                left: '25%',\n                position: 'absolute',\n            }}\n            />\n        </div>\n    )\n}\n\nconst manipulationButtonHeight = '24px'\n\nfunction ManipulationButton({ color: buttonColor, onClick, text, image }: { color: string, onClick: () => void, text: string, image: string }): ReactNode {\n    const isMobile = useMobileLayout()\n    const isTranspose = useTranspose()\n    const colors = useColors()\n\n    return (\n        <div\n            style={{\n                height: manipulationButtonHeight,\n                lineHeight: manipulationButtonHeight,\n                cursor: 'pointer',\n                paddingLeft: '0.5em', paddingRight: '0.5em',\n                borderRadius: '0.25em',\n                verticalAlign: 'middle',\n                backgroundColor: buttonColor,\n            }}\n            className={`serif manipulation-button-${text}`}\n            onClick={onClick}\n        >\n            {!(isMobile && isTranspose) ? text : <Icon src={image} size={manipulationButtonHeight} color={colors.textMain} />}\n        </div>\n    )\n}\n\nfunction HeadingDisplay({ longname, includeDelete, onDelete, onReplace, manipulationJustify, sharedTypeOfAllArticles }: {\n    longname: string\n    includeDelete: boolean\n    onDelete: () => void\n    onReplace: (q: string) => ReturnType<Navigator['link']>\n    manipulationJustify: CSSProperties['justifyContent']\n    sharedTypeOfAllArticles: string | undefined\n}): ReactNode {\n    const colors = useColors()\n    const [isEditing, setIsEditing] = React.useState(false)\n    const currentUniverse = useUniverse()\n    const comparisonHeadStyle = useComparisonHeadStyle()\n\n    const manipulationButtons = (\n        <div style={{ height: manipulationButtonHeight }}>\n            <div style={{ display: 'flex', justifyContent: manipulationJustify, height: '100%' }}>\n                <ManipulationButton color={colors.unselectedButton} onClick={() => { setIsEditing(!isEditing) }} text=\"replace\" image=\"/replace.png\" />\n                {!includeDelete\n                    ? null\n                    : (\n                            <>\n                                <div style={{ width: '5px' }} />\n                                <ManipulationButton color={colors.unselectedButton} onClick={onDelete} text=\"delete\" image=\"/close.png\" />\n                            </>\n                        )}\n                <div style={{ width: '5px' }} />\n            </div>\n        </div>\n    )\n\n    const screenshotMode = useScreenshotMode()\n\n    const navContext = useContext(Navigator.Context)\n\n    return (\n        <div>\n            {screenshotMode ? undefined : manipulationButtons}\n            <div style={{ height: '5px' }} />\n            <a\n                className=\"serif\"\n                {\n                    ...navContext.link({\n                        kind: 'article',\n                        longname,\n                        universe: currentUniverse,\n                    }, { scroll: { kind: 'position', top: 0 } })\n                }\n                style={{ textDecoration: 'none' }}\n            >\n                <div style={useComparisonHeadStyle()}>{longname}</div>\n            </a>\n            {isEditing\n                ? (\n                        <SearchBox\n                            autoFocus={true}\n                            style={{ ...comparisonHeadStyle, width: '100%' }}\n                            placeholder=\"Replacement\"\n                            onChange={() => {\n                                setIsEditing(false)\n                            }}\n                            link={onReplace}\n                            prioritizeArticleType={sharedTypeOfAllArticles}\n                        />\n                    )\n                : null}\n        </div>\n    )\n}\n\nfunction ComparisonMultiMap(props: Omit<MapGenericProps, 'attribution'> & { longnames: string[], colors: string[], mapPartitions: number[][] }): ReactNode {\n    const partitionedLongNames = props.mapPartitions.map(partition => partition.map(longnameIndex => props.longnames[longnameIndex]))\n\n    const maps = useRef<(ComparisonMap | null)[]>([])\n\n    // Want to re-zoom the maps when the partitioning changes\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            for (const map of maps.current) {\n                if (map !== null) {\n                    try {\n                        map.zoomToAll()\n                    }\n                    catch (e) {\n                        // Sometimes this fails if the map isn't ready\n                        console.warn(e)\n                    }\n                }\n            }\n        }, 0)\n        return () => { clearTimeout(timeout) }\n    }, [partitionedLongNames])\n\n    // Will get filled up on render immediately after\n    maps.current = Array<null>(props.mapPartitions.length).fill(null)\n\n    /*\n     If mobile, make 2 columns, if one at the end, use full width\n\n     If desktop, make 3 columns, if 4 at the end, make 4, if 2 at the end, make 2 (there will never be 1 at the end because that's 4)\n     */\n    const isMobile = useMobileLayout()\n    const rows: [number, number[]][][] = useMemo(() => {\n        const slice = (from: number, to: number): [number, number[]][] => {\n            return props.mapPartitions.slice(from, to).map((partition, sliceIndex) => [from + sliceIndex, partition])\n        }\n\n        if (isMobile) {\n            const result: [number, number[]][][] = []\n            for (let i = 0; i < props.mapPartitions.length; i += 2) {\n                result.push(slice(i, i + 2))\n            }\n            return result\n        }\n        else {\n            const result: [number, number[]][][] = []\n            for (let i = 0; i < props.mapPartitions.length; i += 3) {\n                if (props.mapPartitions.length - i === 4) {\n                    result.push(\n                        slice(i, i + 2),\n                        slice(i + 2, i + 4),\n                    )\n                    i += 1\n                }\n                else {\n                    result.push(slice(i, i + 3))\n                }\n            }\n            return result\n        }\n    }, [isMobile, props.mapPartitions])\n\n    return rows.map((row, rowIndex) => (\n        <div key={rowIndex} style={{ display: 'flex', width: '100%' }}>\n            {row.map(([partitionIndex, partition]) => {\n                return (\n                    <div key={partitionIndex} style={{ position: 'relative', width: `${100 / row.length}%` }}>\n                        <ComparisonMap\n                            ref={map => maps.current[partitionIndex] = map}\n                            {...props}\n                            longnames={partition.map(index => props.longnames[index])}\n                            colors={partition.map(index => props.colors[index])}\n                            attribution={\n                                partitionIndex === props.mapPartitions.length - 1 ? 'startVisible' : 'none'\n                            }\n                        />\n                    </div>\n                )\n            })}\n        </div>\n    ))\n}\n\n// eslint-disable-next-line prefer-function-component/prefer-function-component -- TODO: Maps don't support function components yet.\nclass ComparisonMap extends MapGeneric<MapGenericProps & { longnames: string[], colors: string[] }> {\n    override buttons(): ReactNode {\n        return <ComparisonMapButtons map={this} />\n    }\n\n    zoomButton(i: number, buttonColor: string, onClick: () => void): ReactNode {\n        return (\n            <div\n                key={`zoomButton_${i}`}\n                style={{\n                    display: 'inline-block', width: '2em', height: '2em',\n                    backgroundColor: buttonColor, borderRadius: '50%', marginLeft: '5px', marginRight: '5px',\n                    cursor: 'pointer',\n                }}\n                onClick={onClick}\n            />\n        )\n    }\n\n    override computeShapesToRender(): Promise<ShapeRenderingSpec> {\n        return Promise.resolve({\n            shapes: this.props.longnames.map((longname, i) => ({\n                name: longname,\n                spec: { type: 'polygon', style: { color: this.props.colors[i], fillColor: this.props.colors[i], fillOpacity: 0.5, weight: 1 } },\n                meta: {},\n            })),\n            zoomIndex: -1,\n        })\n    }\n\n    override mapDidRender(): Promise<void> {\n        this.zoomToAll({ animate: false })\n        return Promise.resolve()\n    }\n}\n\nexport function ComparisonMapButtons(props: { map: ComparisonMap }): ReactNode {\n    const colors = useColors()\n    const isScreenshot = useScreenshotMode()\n\n    if (isScreenshot) {\n        return null\n    }\n\n    return (\n        <div style={{\n            display: 'flex', backgroundColor: colors.background, padding: '0.5em', borderRadius: '0.5em',\n            alignItems: 'center',\n        }}\n        >\n            <span className=\"serif\" style={{ fontSize: '15px', fontWeight: 500 }}>Zoom to:</span>\n            <div style={{ width: '0.25em' }} />\n            {props.map.zoomButton(-1, colors.textMain, () => { props.map.zoomToAll() })}\n            {props.map.props.longnames.map((longname, i) => {\n                return props.map.zoomButton(i, props.map.props.colors[i], () => { props.map.zoomTo(longname) })\n            })}\n        </div>\n    )\n}\n"],"names":["Icon","param","size","color","src","style","ComparisonPanel","props","someExpanded","headerHeight","contentHeight","contents","colors","useColors","tableRef","useRef","mapRef","joinedString","x","names","a","settings","useSettings","groupYearKeys","dataByArticleStat","dataByStatArticle","_","statIndex","articleData","mobileLayout","useMobileLayout","validOrdinalsByStat","statData","value","includeOrdinals","article","onlyColumns","maxColumns","expandedSettings","row","undefined","statpath","rowExpandedKey","expandedByStatIndex","_expandedSettings_rowExpandedKey","numExpandedExtras","v","widthColumns","widthTransposeColumns","transpose","leftMarginPercent","numColumns","columnWidth","expandedColumnWidth","columnIndex","leftSpacerCell","transposeHistogramSpacer","highlightArticleIndicesByStat","articlesStatData","rows","iMax","i","arr","isNaN","headerTextClass","useHeaderTextClass","subHeaderTextClass","useSubHeaderTextClass","comparisonRightStyle","useComparisonHeadStyle","searchComparisonStyle","currentUniverse","useUniverse","navContext","useContext","Navigator","sharedTypeOfAllArticles","heading","articleIndex","width","HeadingDisplay","index","bars","backgroundColor","Array","comparisonHeaders","statNameOverride","ComparisonColorBar","StatisticHeaderCells","statName","center","_dataByStatArticle_statIndex_find","nameRow","StatisticName","valueCells","StatisticRowCells","mixWithBackground","plotProps","articleIdx","TransposeContext","QuerySettingsConnection","PageTemplate","sanitize","SearchBox","e","transposeSettingsHeight","TableHeaderContainer","TableRowContainer","stat","leftPercent","acc","RenderedPlot","ArticleWarnings","ComparisonMultiMap","colorCycle","highlightIndex","manipulationButtonHeight","ManipulationButton","buttonColor","onClick","text","image","isMobile","isTranspose","useTranspose","longname","includeDelete","onDelete","onReplace","manipulationJustify","_React_useState","isEditing","setIsEditing","comparisonHeadStyle","manipulationButtons","screenshotMode","useScreenshotMode","partitionedLongNames","partition","longnameIndex","maps","useEffect","timeout","setTimeout","_iteratorError","map","console","clearTimeout","useMemo","slice","from","to","sliceIndex","result","result1","i1","rowIndex","partitionIndex","ComparisonMap","buttons","ComparisonMapButtons","zoomButton","computeShapesToRender","Promise","mapDidRender","MapGeneric"],"mappings":"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"}