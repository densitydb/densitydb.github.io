{"version":3,"file":"313.js","sources":["webpack://assets/./src/components/GenericShareButton.tsx","webpack://assets/./src/data/universes_ordered.ts","webpack://assets/./src/data/syau_region_types.ts","webpack://assets/./src/syau/EditableSelector.tsx","webpack://assets/./src/syau/SYAULocalStorage.tsx","webpack://assets/./src/syau/syau-map.tsx","webpack://assets/./src/syau/syau-panel.tsx"],"sourcesContent":["import React, { CSSProperties, ReactNode } from 'react'\nimport { isFirefox, isMobile } from 'react-device-detect'\n\nimport { useColors } from '../page_template/colors'\n\nexport function GenericShareButton(props: {\n    buttonRef: React.RefObject<HTMLButtonElement>\n    produceSummary: () => Promise<[string, string]>\n}): ReactNode {\n    const colors = useColors()\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- We need to check the condition for browser compatibility.\n    const canShare = navigator.canShare?.({ url: 'https://juxtastat.org', text: 'test' }) ?? false\n    const isShare = isMobile && canShare && !isFirefox\n\n    return (\n        <button\n            className=\"serif\"\n            style={buttonStyle(colors.hueColors.green, colors.buttonTextWhite)}\n            ref={props.buttonRef}\n            onClick={async () => {\n                const [text, url] = await props.produceSummary()\n\n                async function copyToClipboard(): Promise<void> {\n                    await navigator.clipboard.writeText(`${text}\\n${url}`)\n                    props.buttonRef.current!.textContent = 'Copied!'\n                }\n\n                if (isShare) {\n                    try {\n                        await navigator.share({\n                            url,\n                            text: `${text}\\n`,\n                        })\n                    }\n                    catch {\n                        await copyToClipboard()\n                    }\n                }\n                else {\n                    await copyToClipboard()\n                }\n            }}\n        >\n            <div>{isShare ? 'Share' : 'Copy'}</div>\n            <div style={{ marginInline: '0.25em' }}></div>\n            <img src=\"/share.png\" className=\"icon\" style={{ width: '1em', height: '1em' }} />\n        </button>\n    )\n}\n\nexport function buttonStyle(color: string, textColor: string): CSSProperties {\n    return {\n        textAlign: 'center',\n        fontSize: '2em',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'row',\n        margin: '0 auto',\n        padding: '0.25em 1em',\n        backgroundColor: color,\n        borderRadius: '0.25em',\n        border: 'none',\n        color: textColor,\n    }\n}\n","export default [\n    \"world\",\n    \"Africa\",\n    \"Asia\",\n    \"Europe\",\n    \"North America\",\n    \"Oceania\",\n    \"South America\",\n    \"Andorra\",\n    \"United Arab Emirates\",\n    \"Afghanistan\",\n    \"Antigua and Barbuda\",\n    \"Anguilla\",\n    \"Albania\",\n    \"Armenia\",\n    \"Angola\",\n    \"Argentina\",\n    \"Austria\",\n    \"Australia\",\n    \"Aruba\",\n    \"Azerbaijan\",\n    \"Bosnia and Herzegovina\",\n    \"Barbados\",\n    \"Bangladesh\",\n    \"Belgium\",\n    \"Burkina Faso\",\n    \"Bulgaria\",\n    \"Bahrain\",\n    \"Burundi\",\n    \"Benin\",\n    \"Bermuda\",\n    \"Brunei\",\n    \"Bolivia\",\n    \"Brazil\",\n    \"The Bahamas\",\n    \"Bhutan\",\n    \"Botswana\",\n    \"Belarus\",\n    \"Belize\",\n    \"Canada\",\n    \"Cocos (Keeling) Islands\",\n    \"Democratic Republic of the Congo\",\n    \"Central African Republic\",\n    \"Congo\",\n    \"Switzerland\",\n    \"Ivory Coast\",\n    \"Cook Islands\",\n    \"Chile\",\n    \"Cameroon\",\n    \"China\",\n    \"Colombia\",\n    \"Costa Rica\",\n    \"Cuba\",\n    \"Cape Verde\",\n    \"Christmas Island\",\n    \"Cyprus\",\n    \"Czech Republic\",\n    \"Germany\",\n    \"Djibouti\",\n    \"Denmark\",\n    \"Dominica\",\n    \"Dominican Republic\",\n    \"Algeria\",\n    \"Ecuador\",\n    \"Estonia\",\n    \"Egypt\",\n    \"Eritrea\",\n    \"Spain\",\n    \"Ethiopia\",\n    \"Finland\",\n    \"Fiji\",\n    \"Falkland Islands\",\n    \"Micronesia\",\n    \"Faroe Islands\",\n    \"France\",\n    \"Gabon\",\n    \"United Kingdom\",\n    \"Grenada\",\n    \"Georgia\",\n    \"Guernsey\",\n    \"Ghana\",\n    \"Gibraltar\",\n    \"Greenland\",\n    \"The Gambia\",\n    \"Guinea\",\n    \"Equatorial Guinea\",\n    \"Greece\",\n    \"Guatemala\",\n    \"Guinea-Bissau\",\n    \"Guyana\",\n    \"Honduras\",\n    \"Croatia\",\n    \"Haiti\",\n    \"Hungary\",\n    \"Indonesia\",\n    \"Ireland\",\n    \"Israel\",\n    \"Isle of Man\",\n    \"India\",\n    \"Iraq\",\n    \"Iran\",\n    \"Iceland\",\n    \"Italy\",\n    \"Jersey\",\n    \"Jamaica\",\n    \"Jordan\",\n    \"Japan\",\n    \"Kenya\",\n    \"Kyrgyzstan\",\n    \"Cambodia\",\n    \"Kiribati\",\n    \"Comoros\",\n    \"Saint Kitts and Nevis\",\n    \"North Korea\",\n    \"South Korea\",\n    \"Kuwait\",\n    \"Cayman Islands\",\n    \"Kazakhstan\",\n    \"Laos\",\n    \"Lebanon\",\n    \"Saint Lucia\",\n    \"Liechtenstein\",\n    \"Sri Lanka\",\n    \"Liberia\",\n    \"Lesotho\",\n    \"Lithuania\",\n    \"Luxembourg\",\n    \"Latvia\",\n    \"Libya\",\n    \"Morocco\",\n    \"Monaco\",\n    \"Moldova\",\n    \"Montenegro\",\n    \"Madagascar\",\n    \"Marshall Islands\",\n    \"North Macedonia\",\n    \"Mali\",\n    \"Myanmar\",\n    \"Mongolia\",\n    \"Mauritania\",\n    \"Montserrat\",\n    \"Malta\",\n    \"Mauritius\",\n    \"Maldives\",\n    \"Malawi\",\n    \"Mexico\",\n    \"Malaysia\",\n    \"Mozambique\",\n    \"Namibia\",\n    \"Niger\",\n    \"Norfolk Island\",\n    \"Nigeria\",\n    \"Nicaragua\",\n    \"Netherlands\",\n    \"Norway\",\n    \"Nepal\",\n    \"Nauru\",\n    \"Niue\",\n    \"New Zealand\",\n    \"Oman\",\n    \"Panama\",\n    \"Peru\",\n    \"Papua New Guinea\",\n    \"Philippines\",\n    \"Pakistan\",\n    \"Poland\",\n    \"Pitcairn Islands\",\n    \"State of Palestine\",\n    \"Portugal\",\n    \"Palau\",\n    \"Paraguay\",\n    \"Qatar\",\n    \"Romania\",\n    \"Serbia\",\n    \"Russia\",\n    \"Rwanda\",\n    \"Saudi Arabia\",\n    \"Solomon Islands\",\n    \"Seychelles\",\n    \"Sudan\",\n    \"Sweden\",\n    \"Singapore\",\n    \"Saint Helena, Ascension and Tristan da Cunha\",\n    \"Slovenia\",\n    \"Slovakia\",\n    \"Sierra Leone\",\n    \"San Marino\",\n    \"Senegal\",\n    \"Somalia\",\n    \"Suriname\",\n    \"South Sudan\",\n    \"S\\u00e3o Tom\\u00e9 and Pr\\u00edncipe\",\n    \"El Salvador\",\n    \"Syria\",\n    \"Eswatini\",\n    \"Turks and Caicos Islands\",\n    \"Chad\",\n    \"Togo\",\n    \"Thailand\",\n    \"Tajikistan\",\n    \"Tokelau\",\n    \"East Timor\",\n    \"Turkmenistan\",\n    \"Tunisia\",\n    \"Tonga\",\n    \"Turkey\",\n    \"Trinidad and Tobago\",\n    \"Tuvalu\",\n    \"Tanzania\",\n    \"Ukraine\",\n    \"Uganda\",\n    \"USA\",\n    \"Uruguay\",\n    \"Uzbekistan\",\n    \"Vatican City\",\n    \"Saint Vincent and the Grenadines\",\n    \"Venezuela\",\n    \"British Virgin Islands\",\n    \"Vietnam\",\n    \"Vanuatu\",\n    \"Samoa\",\n    \"Yemen\",\n    \"South Africa\",\n    \"Zambia\",\n    \"Zimbabwe\",\n    \"Alabama, USA\",\n    \"Alaska, USA\",\n    \"Arizona, USA\",\n    \"Arkansas, USA\",\n    \"California, USA\",\n    \"Colorado, USA\",\n    \"Connecticut, USA\",\n    \"Delaware, USA\",\n    \"Florida, USA\",\n    \"Georgia, USA\",\n    \"Hawaii, USA\",\n    \"Idaho, USA\",\n    \"Illinois, USA\",\n    \"Indiana, USA\",\n    \"Iowa, USA\",\n    \"Kansas, USA\",\n    \"Kentucky, USA\",\n    \"Louisiana, USA\",\n    \"Maine, USA\",\n    \"Maryland, USA\",\n    \"Massachusetts, USA\",\n    \"Michigan, USA\",\n    \"Minnesota, USA\",\n    \"Mississippi, USA\",\n    \"Missouri, USA\",\n    \"Montana, USA\",\n    \"Nebraska, USA\",\n    \"Nevada, USA\",\n    \"New Hampshire, USA\",\n    \"New Jersey, USA\",\n    \"New Mexico, USA\",\n    \"New York, USA\",\n    \"North Carolina, USA\",\n    \"North Dakota, USA\",\n    \"Ohio, USA\",\n    \"Oklahoma, USA\",\n    \"Oregon, USA\",\n    \"Pennsylvania, USA\",\n    \"Rhode Island, USA\",\n    \"South Carolina, USA\",\n    \"South Dakota, USA\",\n    \"Tennessee, USA\",\n    \"Texas, USA\",\n    \"Utah, USA\",\n    \"Vermont, USA\",\n    \"Virginia, USA\",\n    \"Washington, USA\",\n    \"West Virginia, USA\",\n    \"Wisconsin, USA\",\n    \"Wyoming, USA\",\n    \"American Samoa, USA\",\n    \"Guam, USA\",\n    \"Northern Mariana Islands, USA\",\n    \"Puerto Rico, USA\",\n    \"US Virgin Islands, USA\",\n    \"District of Columbia, USA\",\n    \"Alberta, Canada\",\n    \"British Columbia, Canada\",\n    \"Manitoba, Canada\",\n    \"New Brunswick, Canada\",\n    \"Newfoundland and Labrador, Canada\",\n    \"Northwest Territories, Canada\",\n    \"Nova Scotia, Canada\",\n    \"Nunavut, Canada\",\n    \"Ontario, Canada\",\n    \"Prince Edward Island, Canada\",\n    \"Quebec, Canada\",\n    \"Saskatchewan, Canada\",\n    \"Yukon, Canada\"\n] as const","export default [\n    \"County\",\n    \"MSA\",\n    \"CSA\",\n    \"Urban Area\",\n    \"CCD\",\n    \"City\",\n    \"Neighborhood\",\n    \"Native Area\",\n    \"Native Statistical Area\",\n    \"Native Subdivision\",\n    \"School District\",\n    \"USDA County Type\",\n    \"Media Market\",\n    \"CA Census Division\",\n    \"CA Census Subdivision\",\n    \"CA Population Center\",\n    \"CA CMA\",\n    \"CA Riding\",\n    \"Continent\",\n    \"Country\",\n    \"Subnational Region\",\n    \"Urban Center\",\n    \"Metropolitan Cluster\"\n] as const","import React, { ReactNode, useContext } from 'react'\n\nimport { CountsByUT } from '../components/countsByArticleType'\nimport { GenericSearchBox } from '../components/search-generic'\nimport syau_region_types from '../data/syau_region_types'\nimport universes_ordered from '../data/universes_ordered'\nimport { Navigator } from '../navigation/Navigator'\nimport { useSubHeaderTextClass } from '../utils/responsive'\n\nimport { populationColumns } from './load'\n\nfunction EditableSelector(props: {\n    items: string[]\n    selected: string | undefined\n    onSelect: (item: string) => ReturnType<Navigator['link']>\n    placeholder: string\n}): ReactNode {\n    let selected = props.selected\n    if (selected !== undefined && !props.items.includes(selected)) {\n        selected = undefined\n    }\n    const subHeaderClass = useSubHeaderTextClass()\n    return (\n        <GenericSearchBox\n            matches={props.items}\n            doSearch={(sq: string) => Promise.resolve(props.items.filter(type => type.toLowerCase().includes(sq.toLowerCase())))}\n            link={props.onSelect}\n            autoFocus={true}\n            placeholder={selected ?? props.placeholder}\n            style={`${subHeaderClass} syau-searchbox`}\n            onChange={(item) => {\n                void props.onSelect(item).onClick()\n            }}\n            renderMatch={(currentMatch, onMouseOver, onClick, style, dataTestId) => (\n                <div\n                    key={currentMatch()}\n                    style={style}\n                    onClick={onClick}\n                    onMouseOver={onMouseOver}\n                    data-test-id={dataTestId}\n                >\n                    {currentMatch()}\n                </div>\n            )}\n        />\n    )\n}\n\nexport function SelectUniverse(props: { typ?: string, universe?: string, counts: CountsByUT }): ReactNode {\n    const navContext = useContext(Navigator.Context)\n    const universes = universes_ordered.filter(\n        universe => props.typ === undefined || populationColumns(props.counts, props.typ, universe).length > 0,\n    )\n    return (\n        <EditableSelector\n            items={universes}\n            selected={props.universe}\n            onSelect={\n                universe => navContext.link({\n                    kind: 'syau',\n                    typ: props.typ,\n                    universe,\n                }, { scroll: { kind: 'none' } })\n            }\n            placeholder=\"Select a universe\"\n        />\n    )\n}\n\nexport function SelectType(props: { typ?: string, universe?: string, counts: CountsByUT }): ReactNode {\n    const types = syau_region_types.filter(\n        type => props.universe === undefined || populationColumns(props.counts, type, props.universe).length > 0,\n    )\n    const navContext = useContext(Navigator.Context)\n    return (\n        <EditableSelector\n            items={types}\n            selected={props.typ}\n            onSelect={\n                type => navContext.link({\n                    kind: 'syau',\n                    typ: type,\n                    universe: props.universe,\n                }, { scroll: { kind: 'none' } })\n            }\n            placeholder=\"Select a region type\"\n        />\n    )\n}\n","import { StoredProperty } from '../quiz/quiz'\nimport { Universe } from '../universe'\n\nimport { SYAUHistory, Type, SYAUHistoryForGame, SYAUHistoryKey } from './syau-panel'\n\nexport class SYAULocalStorage {\n    private constructor() {\n        // Private constructor\n    }\n\n    static shared = new SYAULocalStorage()\n\n    readonly history = new StoredProperty<SYAUHistory>(\n        'syau_history',\n        storedValue => JSON.parse(storedValue ?? '{}') as SYAUHistory,\n        value => JSON.stringify(value),\n    )\n\n    useHistory(typ: Type, universe: Universe): [SYAUHistoryForGame, (newHistory: SYAUHistoryForGame) => void] {\n        const key = `${typ}-${universe}` satisfies SYAUHistoryKey\n        const history = this.history.use()\n        const current: SYAUHistoryForGame = history[key] ?? { guessed: [] }\n        return [current, (newHistory) => {\n            this.history.value = { ...history, [key]: newHistory }\n        }]\n    }\n}\n","import maplibregl, { LngLatLike } from 'maplibre-gl'\n\nimport { MapGeneric, MapGenericProps, MapState, ShapeRenderingSpec } from '../components/map'\nimport { assert } from '../utils/defensive'\nimport { ICoordinate } from '../utils/protos'\n\nconst circleMarkerRadius = 20\n\ninterface SYAUMapProps extends MapGenericProps {\n    longnames: string[]\n    population: number[]\n    populationOrdinals: number[]\n    centroids: ICoordinate[]\n    isGuessed: boolean[]\n    guessedColor: string\n    notGuessedColor: string\n    voroniHighlightColor: string\n}\n\nexport class SYAUMap extends MapGeneric<SYAUMapProps> {\n    private alreadyFitBounds: boolean = false\n    // private layer: L.LayerGroup | undefined = undefined\n    name_to_index: undefined | Map<string, number>\n    markersOnScreen: Record<string, maplibregl.Marker | undefined> = {}\n    polysOnScreen: { name: string, isGuessed: boolean }[] = []\n    updateAttached: boolean = false\n\n    override computeShapesToRender(): Promise<ShapeRenderingSpec> {\n        return Promise.resolve({\n            shapes: this.polysOnScreen.map(({ name, isGuessed }) => ({\n                name,\n                spec: {\n                    type: 'polygon',\n                    style: {\n                        fillColor: isGuessed ? this.props.guessedColor : this.props.notGuessedColor,\n                        fillOpacity: 0.5,\n                        color: isGuessed ? this.props.guessedColor : this.props.notGuessedColor,\n                        weight: 2,\n                    },\n                },\n                notClickable: true,\n                meta: {},\n            })),\n            zoomIndex: -1,\n        })\n    }\n\n    override async componentDidUpdate(prevProps: SYAUMapProps, prevState: MapState): Promise<void> {\n        if (\n            prevProps.longnames.length !== this.props.longnames.length\n            || prevProps.longnames.map((l, i) => l !== this.props.longnames[i]).some(x => x)\n        ) {\n            this.alreadyFitBounds = false\n        }\n        await super.componentDidUpdate(prevProps, prevState)\n    }\n\n    updateCentroidsSource(map: maplibregl.Map): maplibregl.GeoJSONSource {\n        const data = {\n            type: 'FeatureCollection',\n            features: this.props.centroids.map((c, idx) => ({\n                type: 'Feature',\n                properties: {\n                    name: this.props.longnames[idx],\n                    population: this.props.population[idx],\n                    populationGuessed: this.props.isGuessed[idx] ? this.props.population[idx] : 0,\n                    isGuessed: this.props.isGuessed[idx] ? 1 : 0,\n                    existence: 1,\n                    populationOrdinal: this.props.populationOrdinals[idx],\n                },\n                geometry: {\n                    type: 'Point',\n                    coordinates: [c.lon!, c.lat!],\n                },\n            })),\n        } satisfies GeoJSON.FeatureCollection\n        let source: maplibregl.GeoJSONSource | undefined = map.getSource('centroids')\n        if (!source) {\n            map.addSource('centroids', {\n                type: 'geojson',\n                data,\n                cluster: true,\n                clusterMaxZoom: 14,\n                clusterRadius: circleMarkerRadius * 2.5,\n                clusterProperties: {\n                    // keep counts of population and named status in a cluster\n                    population: ['+', ['get', 'population']],\n                    populationGuessed: ['+', ['get', 'populationGuessed']],\n                    isGuessed: ['+', ['get', 'isGuessed']],\n                    existence: ['+', ['get', 'existence']],\n                },\n            })\n            source = map.getSource('centroids')!\n        }\n        else {\n            if (!(source instanceof maplibregl.GeoJSONSource)) {\n                throw new Error('Source is not a GeoJSON source')\n            }\n            source.setData(data)\n        }\n        return source\n    }\n\n    fitBounds(map: maplibregl.Map): void {\n        if (this.alreadyFitBounds) {\n            return\n        }\n        const longs = optimizeWrapping(this.props.centroids.map(c => c.lon!))\n        const lats = this.props.centroids.map(c => c.lat!)\n        let minLon = Math.min(...longs)\n        let minLat = Math.min(...lats)\n        let maxLon = Math.max(...longs)\n        let maxLat = Math.max(...lats)\n        const lonRange = maxLon - minLon\n        const latRange = maxLat - minLat\n        const padPct = 0.1\n        minLon -= lonRange * padPct\n        minLat -= latRange * padPct\n        maxLon += lonRange * padPct\n        maxLat += latRange * padPct\n        const bounds = [[minLon, minLat], [maxLon, maxLat]] as [[number, number], [number, number]]\n        map.fitBounds(bounds, { animate: false })\n        this.alreadyFitBounds = true\n    }\n\n    updateMarkers(): void {\n        const maps = this.handler.maps\n        if (!maps) return\n        assert(maps.length === 1, 'SYAUMap should only be used with a single map instance')\n        const map = maps[0]\n        const newMarkers: Record<string, maplibregl.Marker | undefined> = {}\n        const features = map.querySourceFeatures('centroids')\n\n        const oldMarkers = { ...this.markersOnScreen }\n\n        const polysOnScreen: { name: string, isGuessed: boolean }[] = []\n\n        for (const feature of features) {\n            const coords: LngLatLike = (feature.geometry as GeoJSON.Point).coordinates as LngLatLike\n            const props = feature.properties as (\n                { populationGuessed: number, population: number, isGuessed: number, existence: number } &\n\n                // eslint-disable-next-line no-restricted-syntax -- cluster_id comes from maplibre and is out of our control\n                ({ cluster: true, cluster_id: string } | { cluster: undefined, name: string, populationOrdinal: number }))\n            const id = props.cluster ? props.cluster_id : props.name\n            // if (!props.cluster) continue\n            if (oldMarkers[id]) {\n                oldMarkers[id].remove()\n            }\n            let text: string\n            if (props.cluster) {\n                text = `${props.isGuessed}/${props.existence}`\n            }\n            else {\n                polysOnScreen.push({\n                    name: props.name,\n                    isGuessed: props.isGuessed === 1,\n                })\n                if (props.isGuessed) {\n                    text = `#${props.populationOrdinal}`\n                }\n                else {\n                    text = `?`\n                }\n            }\n            const html = circleSector(\n                this.props.notGuessedColor,\n                this.props.guessedColor,\n                circleMarkerRadius,\n                2 * Math.PI * (props.populationGuessed / props.population),\n                text,\n            )\n            const el = document.createElement('div')\n            el.innerHTML = html\n            el.className = 'syau-marker'\n            el.style.width = `${circleMarkerRadius * 2}px`\n            el.style.height = `${circleMarkerRadius * 2}px`\n            const marker = new maplibregl.Marker({\n                element: el,\n            }).setLngLat(coords)\n            // the assignment to markersOnScreen is necessary in case multiple of these updates are running at once\n            // might be better to simply not allow that to happen.\n            newMarkers[id] = oldMarkers[id] = marker\n            newMarkers[id].addTo(map)\n        }\n        for (const id in oldMarkers) {\n            if (!newMarkers[id]) oldMarkers[id]?.remove()\n        }\n        this.markersOnScreen = newMarkers\n        polysOnScreen.sort((a, b) => {\n            if (a.name < b.name) return -1\n            if (a.name > b.name) return 1\n            return 0\n        })\n        if (JSON.stringify(polysOnScreen) !== JSON.stringify(this.polysOnScreen)) {\n            this.polysOnScreen = polysOnScreen\n            void this.bumpVersion()\n        }\n    }\n\n    addLayersIfNeeded(map: maplibregl.Map): void {\n        if (!map.getLayer('centroid_circle')) {\n            // circle and symbol layers for rendering individual centroids (unclustered points)\n            map.addLayer({\n                id: 'centroid_circle',\n                type: 'circle',\n                source: 'centroids',\n                filter: ['!=', 'cluster', true],\n                paint: {\n                    'circle-color': [\n                        'case',\n                        ['==', ['get', 'isGuessed'], 1],\n                        this.props.guessedColor,\n                        this.props.notGuessedColor,\n                    ],\n                    'circle-radius': 0,\n                },\n            })\n        }\n    }\n\n    override async populateMap(maps: maplibregl.Map[], timeBasis: number, version: number): Promise<void> {\n        await super.populateMap(maps, timeBasis, version)\n        await this.handler.stylesheetPresent()\n\n        assert(maps.length === 1, 'SYAUMap should only be used with a single map instance')\n\n        const map = maps[0]\n\n        this.fitBounds(map)\n        const source = this.updateCentroidsSource(map)\n        this.addLayersIfNeeded(map)\n        if (!this.updateAttached) {\n            this.updateAttached = true\n            map.on('move', () => { this.updateMarkers() })\n            map.on('moveend', () => { this.updateMarkers() })\n            source.on('data', () => { this.updateMarkers() })\n        }\n    }\n}\n\nfunction circleSector(color1: string, color2: string, radius: number, sizeAngle: number, text: string): string {\n    let startAngle = -Math.PI / 2\n    const singleSectors = []\n    const target = startAngle + sizeAngle\n    let endAngle = Math.min(target, startAngle + Math.PI / 2)\n    for (let i = 0; i < 4; i++) {\n        singleSectors.push(singleSector(radius, startAngle, endAngle, color2))\n        if (endAngle === target) {\n            break\n        }\n        startAngle = endAngle\n        endAngle = Math.min(target, startAngle + Math.PI / 2)\n    }\n\n    const result = [\n        '<div>',\n        `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${radius * 2}\" height=\"${radius * 2}\" viewBox=\"0 0 ${radius * 2} ${radius * 2}\">`,\n        `<circle cx=\"${radius}\" cy=\"${radius}\" r=\"${radius}\" fill=\"${color1}\"></circle>`,\n        ...singleSectors,\n        '</svg>',\n        '<div style=\"position:absolute; top:50%; left:50%; transform:translate(-50%, -50%); width: 100%; text-align: center; font-weight: 500\" class=\"serif\">',\n        text,\n        '</div>',\n        '</div>',\n    ]\n\n    return result.join('')\n}\n\nfunction singleSector(radius: number, startAngle: number, endAngle: number, color2: string): string {\n    const startx = radius + radius * Math.cos(startAngle)\n    const starty = radius + radius * Math.sin(startAngle)\n    const endx = radius + radius * Math.cos(endAngle)\n    const endy = radius + radius * Math.sin(endAngle)\n    return `<path d=\"M${radius},${radius} L${startx},${starty} A${radius},${radius} 1 0,1 ${endx},${endy} z\" fill=\"${color2}\"></path>`\n}\n\nfunction optimizeWrapping(lons: number[]): number[] {\n    const lonsAboutIDL = lons.map(lon => lon > 0 ? lon - 360 : lon)\n    const range = (xs: number[]): number => Math.max(...xs) - Math.min(...xs)\n    if (range(lons) < range(lonsAboutIDL)) {\n        return lons\n    }\n    return lonsAboutIDL\n}\n","import React, { ReactNode, useContext } from 'react'\n\nimport '../common.css'\n\nimport { buttonStyle, GenericShareButton } from '../components/GenericShareButton'\nimport { CountsByUT } from '../components/countsByArticleType'\nimport { CheckboxSetting } from '../components/sidebar'\nimport { Navigator } from '../navigation/Navigator'\nimport { useColors, useJuxtastatColors } from '../page_template/colors'\nimport { useSetting } from '../page_template/settings'\nimport { PageTemplate } from '../page_template/template'\nimport { Universe } from '../universe'\nimport { useHeaderTextClass, useMobileLayout, useSubHeaderTextClass } from '../utils/responsive'\nimport { pluralize } from '../utils/text'\n\nimport { SelectType, SelectUniverse } from './EditableSelector'\nimport { SYAULocalStorage } from './SYAULocalStorage'\nimport { confirmMatch, SYAUData } from './load'\nimport { SYAUMap } from './syau-map'\n\nexport type Type = string\n\nexport type SYAUHistoryKey = `${Type}-${Universe}`\n\nexport interface SYAUHistoryForGame {\n    guessed: string[]\n}\n\nexport type SYAUHistory = Record<SYAUHistoryKey, SYAUHistoryForGame>\n\nexport function SYAUPanel(props: { typ?: string, universe?: Universe, counts: CountsByUT, syauData?: SYAUData }): ReactNode {\n    const headerClass = useHeaderTextClass()\n    const subHeaderClass = useSubHeaderTextClass()\n    return (\n        <PageTemplate>\n            <div className={headerClass}>So you&apos;re an urbanist?</div>\n            <div className={subHeaderClass}>\n                Name every\n                <SelectType typ={props.typ} universe={props.universe} counts={props.counts} />\n                {' '}\n                in\n                <SelectUniverse typ={props.typ} universe={props.universe} counts={props.counts} />\n            </div>\n            {\n                props.syauData === undefined\n                    ? undefined\n                    : (\n                            <div>\n                                <div style={{ marginBlockEnd: '1em' }} />\n                                <SYAUGame typ={props.typ!} universe={props.universe!} syauData={props.syauData} />\n                            </div>\n                        )\n            }\n        </PageTemplate>\n    )\n}\n\nfunction GuessInputField(props: { guessCallback: (query: string) => boolean }): ReactNode {\n    const [syauRequireEnter] = useSetting('syauRequireEnter')\n    return (\n        <input\n            type=\"text\"\n            id=\"syau-input\"\n            placeholder=\"Type a region name\"\n            style={{ width: '86%' }}\n            onChange={(e) => {\n                if (syauRequireEnter) {\n                    return\n                }\n                if (props.guessCallback(e.target.value)) {\n                    e.target.value = ''\n                }\n            }}\n            onKeyDown={(e) => {\n                if (syauRequireEnter && e.key === 'Enter') {\n                    props.guessCallback(e.currentTarget.value)\n                    e.currentTarget.value = ''\n                }\n            }}\n        />\n    )\n}\n\nexport function SYAUGame(props: { typ: string, universe: Universe, syauData: SYAUData }): ReactNode {\n    const colors = useColors()\n    const jColors = useJuxtastatColors()\n    const [history, setHistory] = SYAULocalStorage.shared.useHistory(props.typ, props.universe)\n    const totalPopulation = props.syauData.populations.reduce((a, b) => a + b, 0)\n    const totalPopulationGuessed = history.guessed.map(name => props.syauData.populations[props.syauData.longnameToIndex[name]]).reduce((a, b) => a + b, 0)\n    const [alreadyGuessed, setAlreadyGuessed] = React.useState(false)\n\n    const shareRef = React.createRef<HTMLButtonElement>()\n\n    const pluralType = pluralize(props.typ)\n\n    function attemptGuess(query: string): boolean {\n        const approxMatches = props.syauData.longnames.filter((_, idx) => confirmMatch(props.syauData.matchChunks[idx], query))\n        const unguessedApproxMatches = approxMatches.filter(name => !history.guessed.includes(name))\n        setAlreadyGuessed(approxMatches.length !== 0 && unguessedApproxMatches.length === 0)\n        if (unguessedApproxMatches.length === 0) {\n            return false\n        }\n        setHistory({ guessed: [...history.guessed, ...unguessedApproxMatches] })\n        return true\n    }\n\n    const isGuessed = props.syauData.longnames.map(name => history.guessed.includes(name))\n    const indicatorColor = alreadyGuessed ? jColors.correct : colors.background\n\n    return (\n        <div>\n            <div style={{ margin: 'auto', width: '50%' }}>\n                <div style={{ display: 'flex', justifyContent: 'center', margin: 'auto' }}>\n                    <div style={{ width: '7%', height: '1.5em' }} />\n                    <GuessInputField guessCallback={attemptGuess} />\n                    <div style={{ width: '2%', height: '1.5em' }} />\n                    <div style={{ width: '5%', height: '1.5em', backgroundColor: indicatorColor }} />\n                </div>\n                <div style={{ marginBlockEnd: '1em' }} />\n                <div style={{ textAlign: 'center' }} id=\"test-syau-status\">\n                    <b>\n                        {history.guessed.length}\n                        /\n                        {props.syauData.longnames.length}\n                    </b>\n                    {' '}\n                    {pluralType}\n                    {' '}\n                    named, which is\n                    {' '}\n                    <b>\n                        {renderPct(totalPopulationGuessed / totalPopulation)}\n                    </b>\n                    {' '}\n                    of the total population.\n                </div>\n                <div style={{ marginBlockEnd: '1em' }} />\n            </div>\n            <SYAUMap\n                basemap={{ type: 'osm', noLabels: true }}\n                longnames={props.syauData.longnames}\n                population={props.syauData.populations}\n                populationOrdinals={props.syauData.populationOrdinals}\n                centroids={props.syauData.centroids}\n                isGuessed={isGuessed}\n                guessedColor={jColors.correct}\n                notGuessedColor={jColors.incorrect}\n                voroniHighlightColor={colors.hueColors.blue}\n                height={{ type: 'fixed-height', value: 600 }}\n                attribution=\"startVisible\"\n            />\n            <div style={{ marginBlockEnd: '1em' }} />\n            <div style={{ display: 'flex', justifyContent: 'center', margin: 'auto' }}>\n                <div style={{ display: 'inline-block' }}>\n                    <GenericShareButton\n                        buttonRef={shareRef}\n                        produceSummary={\n                            () => {\n                                const frac = totalPopulationGuessed / totalPopulation\n                                const numGreen = Math.floor(10 * frac)\n                                const numRed = 10 - numGreen\n                                const emoji = jColors.correctEmoji.repeat(numGreen) + jColors.incorrectEmoji.repeat(numRed)\n                                const lines = [\n                                    `I named ${history.guessed.length}/${props.syauData.longnames.length} ${pluralType} in ${props.universe}`,\n                                    `(${renderPct(frac)} of the population)`,\n                                    '',\n                                    emoji,\n                                    '',\n                                ]\n                                // eslint-disable-next-line no-restricted-syntax -- Sharing\n                                const hash = window.location.hash\n                                const url = `https://soyoureanurbanist.org${hash === '' ? '' : `/${hash}`}`\n                                return Promise.resolve([lines.join('\\n'), url])\n                            }\n                        }\n                    />\n                </div>\n                <div style={{ display: 'inline-block', marginInlineStart: '1em' }} />\n                <div style={{ display: 'inline-block' }}>\n                    <button\n                        style={buttonStyle(colors.hueColors.red, colors.buttonTextWhite)}\n                        onClick={() => {\n                        // check if they are sure\n                            if (window.confirm('Are you sure you want to reset your progress?')) {\n                                setHistory({ guessed: [] })\n                            }\n                        }}\n                    >\n                        Reset\n                    </button>\n                </div>\n            </div>\n            <div style={{ marginBlockEnd: '1em' }} />\n            <div style={{ display: 'flex', justifyContent: 'center', margin: 'auto' }}>\n                <CheckboxSetting\n                    name=\"Require pressing enter to formalize a guess\"\n                    settingKey=\"syauRequireEnter\"\n                    testId=\"syauRequireEnter\"\n                />\n            </div>\n            <div style={{ marginBlockEnd: '1em' }} />\n            <SYAUTable\n                longnames={props.syauData.longnames}\n                populationOrdinals={props.syauData.populationOrdinals}\n                isGuessed={isGuessed}\n            />\n        </div>\n    )\n}\n\nfunction renderPct(frac: number): string {\n    const pct = 100 * frac\n    if (pct === 100) {\n        return '100%'\n    }\n    if (pct > 99.9) {\n        return `${pct.toFixed(3)}%`\n    }\n    if (pct > 99) {\n        return `${pct.toFixed(2)}%`\n    }\n    if (pct > 90) {\n        return `${pct.toFixed(1)}%`\n    }\n    return `${pct.toFixed(0)}%`\n}\n\nfunction SYAUTable(props: { longnames: string[], populationOrdinals: number[], isGuessed: boolean[] }): ReactNode {\n    const colors = useColors()\n    const jColors = useJuxtastatColors()\n    const isMobile = useMobileLayout()\n    const navContext = useContext(Navigator.Context)\n\n    const columns = isMobile ? 3 : 5\n    // const rows = Math.ceil(props.longnames.length / columns)\n\n    return (\n        <div style={{ display: 'grid', gridTemplateColumns: `repeat(${columns}, 1fr)`, gap: '1em' }}>\n            {props.longnames.map((name, idx) => {\n                const ordinal = props.populationOrdinals[idx]\n                const guessed = props.isGuessed[idx]\n                const color = guessed ? colors.buttonTextWhite : colors.textMain\n\n                const linkProps = guessed\n                    ? navContext.link({\n                        kind: 'article',\n                        longname: name,\n                    }, { scroll: { kind: 'position', top: 0 } })\n                    : {}\n\n                return (\n                    <a\n                        key={name}\n                        className={guessed ? 'testing-syau-named' : 'testing-syau-not-named'}\n                        style={{\n                            backgroundColor: guessed ? jColors.correct : colors.background,\n                            padding: '1em',\n                            borderRadius: '5px',\n                            boxShadow: guessed ? `0 0 10px ${jColors.correct}` : `0 0 10px ${colors.background}`,\n                            borderColor: colors.textMain,\n                            borderWidth: '0.2em',\n                            borderStyle: 'solid',\n                            color,\n                            textDecoration: 'none',\n                        }}\n                        {\n                            ...linkProps\n                        }\n                    >\n                        <div style={{ color, fontWeight: 600 }}>\n                            {ordinal}\n                            .\n                            {' '}\n                            {guessed ? name.split(',')[0] : ''}\n                        </div>\n                    </a>\n                )\n            },\n            )}\n        </div>\n    )\n}\n"],"names":["GenericShareButton","props","_navigator_canShare1","colors","useColors","canShare","isShare","isMobile","isFirefox","buttonStyle","_ref","text","url","copyToClipboard","navigator","color","textColor","EditableSelector","selected","undefined","subHeaderClass","useSubHeaderTextClass","GenericSearchBox","sq","Promise","type","item","currentMatch","onMouseOver","onClick","style","dataTestId","SelectUniverse","navContext","useContext","Navigator","universes","universes_ordered","universe","populationColumns","SelectType","types","syau_region_types","SYAULocalStorage","StoredProperty","storedValue","JSON","value","useHistory","typ","_history_key","key","history","newHistory","SYAUMap","computeShapesToRender","name","isGuessed","componentDidUpdate","prevProps","prevState","l","i","x","_superprop_get_componentDidUpdate","updateCentroidsSource","map","data","c","idx","source","maplibregl","Error","circleMarkerRadius","fitBounds","lons","_Math","_Math1","lonsAboutIDL","range","_Math2","_Math3","longs","lon","xs","lats","minLon","minLat","maxLon","maxLat","lonRange","latRange","bounds","updateMarkers","_oldMarkers_id","maps","assert","newMarkers","features","oldMarkers","polysOnScreen","_iteratorError","feature","coords","id","html","circleSector","color1","color2","radius","sizeAngle","startAngle","Math","singleSectors","target","endAngle","singleSector","startx","starty","endx","endy","result","el","document","marker","id1","a","b","addLayersIfNeeded","populateMap","timeBasis","version","_superprop_get_populateMap","MapGeneric","SYAUPanel","headerClass","useHeaderTextClass","PageTemplate","SYAUGame","GuessInputField","syauRequireEnter","_useSetting","e","jColors","useJuxtastatColors","_SYAULocalStorage_shared_useHistory","setHistory","totalPopulation","totalPopulationGuessed","_React_useState","alreadyGuessed","setAlreadyGuessed","shareRef","React","pluralType","pluralize","indicatorColor","query","approxMatches","_","confirmMatch","unguessedApproxMatches","renderPct","frac","numGreen","emoji","lines","hash","window","CheckboxSetting","SYAUTable","pct","useMobileLayout","ordinal","guessed","linkProps"],"mappings":"0gFAKO,SAASA,EAAmBC,CAGlC,EACG,IAEiBC,EAAAA,EAAAA,EAFXC,EAASC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IAETC,EAAWH,MAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,AAAAA,CAAAA,EAAAA,SAAQ,EAAE,QAAQ,AAAD,EAAjBA,KAAAA,EAAAA,EAAAA,IAAAA,CAAAA,EAAqB,CAAE,IAAK,wBAAyB,KAAM,MAAO,EAAC,GAAnEA,EACXI,EAAUC,EAAAA,QAAQA,EAAIF,GAAY,CAACG,EAAAA,SAASA,CAElD,OACI,gBAAC,UACG,UAAU,QACV,MAAOC,EAAYN,EAAO,SAAS,CAAC,KAAK,CAAEA,EAAO,eAAe,EACjE,IAAKF,EAAM,SAAS,CACpB,QAAS,W,wBACeS,EAAbC,EAAMC,EAEb,SAAeC,I,qEACX,O,EAAMC,UAAU,SAAS,CAAC,SAAS,CAAE,GAAWF,MAAAA,CAATD,EAAK,MAAQ,OAAJC,I,eAAhD,SACAX,EAAM,SAAS,CAAC,OAAO,CAAE,WAAW,CAAG,U,MAC3C,I,kDALoBS,MAAAA,C,EAAMT,EAAM,cAAc,G,WAAvCU,EAAaD,AAAAA,CAAAA,EAAAA,EAAAA,KAAAA,CAAAA,KAAAA,EAAAA,CAAAA,EAAAA,IAAAA,G,IAAAA,CAAAA,EAAAA,CAAPE,EAAOF,CAAAA,CAAAA,EAAAA,C,CAOhBJ,EAAAA,MAAAA,C,sBAEI,O,sBAAA,C,EAAMQ,UAAU,KAAK,CAAC,CAClBF,IAAAA,EACA,KAAO,GAAO,OAALD,EAAK,KAClB,G,sBAHA,S,aAMA,O,SAAA,C,EAAME,I,2BAIV,O,EAAMA,I,QAAN,S,6BAER,I,GAEA,gBAAC,WAAKP,EAAU,QAAU,QAC1B,gBAAC,OAAI,MAAO,CAAE,aAAc,QAAS,C,GACrC,gBAAC,OAAI,IAAI,aAAa,UAAU,OAAO,MAAO,CAAE,MAAO,MAAO,OAAQ,KAAM,C,GAGxF,CAEO,SAASG,EAAYM,CAAa,CAAEC,CAAiB,EACxD,MAAO,CACH,UAAW,SACX,SAAU,MACV,QAAS,OACT,eAAgB,SAChB,WAAY,SACZ,cAAe,MACf,OAAQ,SACR,QAAS,aACT,gBAAiBD,EACjB,aAAc,SACd,OAAQ,OACR,MAAOC,CACX,CACJ,C,wCCjEA,MAAe,CACX,QACA,SACA,OACA,SACA,gBACA,UACA,gBACA,UACA,uBACA,cACA,sBACA,WACA,UACA,UACA,SACA,YACA,UACA,YACA,QACA,aACA,yBACA,WACA,aACA,UACA,eACA,WACA,UACA,UACA,QACA,UACA,SACA,UACA,SACA,cACA,SACA,WACA,UACA,SACA,SACA,0BACA,mCACA,2BACA,QACA,cACA,cACA,eACA,QACA,WACA,QACA,WACA,aACA,OACA,aACA,mBACA,SACA,iBACA,UACA,WACA,UACA,WACA,qBACA,UACA,UACA,UACA,QACA,UACA,QACA,WACA,UACA,OACA,mBACA,aACA,gBACA,SACA,QACA,iBACA,UACA,UACA,WACA,QACA,YACA,YACA,aACA,SACA,oBACA,SACA,YACA,gBACA,SACA,WACA,UACA,QACA,UACA,YACA,UACA,SACA,cACA,QACA,OACA,OACA,UACA,QACA,SACA,UACA,SACA,QACA,QACA,aACA,WACA,WACA,UACA,wBACA,cACA,cACA,SACA,iBACA,aACA,OACA,UACA,cACA,gBACA,YACA,UACA,UACA,YACA,aACA,SACA,QACA,UACA,SACA,UACA,aACA,aACA,mBACA,kBACA,OACA,UACA,WACA,aACA,aACA,QACA,YACA,WACA,SACA,SACA,WACA,aACA,UACA,QACA,iBACA,UACA,YACA,cACA,SACA,QACA,QACA,OACA,cACA,OACA,SACA,OACA,mBACA,cACA,WACA,SACA,mBACA,qBACA,WACA,QACA,WACA,QACA,UACA,SACA,SACA,SACA,eACA,kBACA,aACA,QACA,SACA,YACA,+CACA,WACA,WACA,eACA,aACA,UACA,UACA,WACA,cACA,iCACA,cACA,QACA,WACA,2BACA,OACA,OACA,WACA,aACA,UACA,aACA,eACA,UACA,QACA,SACA,sBACA,SACA,WACA,UACA,SACA,MACA,UACA,aACA,eACA,mCACA,YACA,yBACA,UACA,UACA,QACA,QACA,eACA,SACA,WACA,eACA,cACA,eACA,gBACA,kBACA,gBACA,mBACA,gBACA,eACA,eACA,cACA,aACA,gBACA,eACA,YACA,cACA,gBACA,iBACA,aACA,gBACA,qBACA,gBACA,iBACA,mBACA,gBACA,eACA,gBACA,cACA,qBACA,kBACA,kBACA,gBACA,sBACA,oBACA,YACA,gBACA,cACA,oBACA,oBACA,sBACA,oBACA,iBACA,aACA,YACA,eACA,gBACA,kBACA,qBACA,iBACA,eACA,sBACA,YACA,gCACA,mBACA,yBACA,4BACA,kBACA,2BACA,mBACA,wBACA,oCACA,gCACA,sBACA,kBACA,kBACA,+BACA,iBACA,uBACA,gBACH,A,qMCtSD,MAAe,CACX,SACA,MACA,MACA,aACA,MACA,OACA,eACA,cACA,0BACA,qBACA,kBACA,mBACA,eACA,qBACA,wBACA,uBACA,SACA,YACA,YACA,UACA,qBACA,eACA,uBACH,C,yBCbD,SAASC,EAAiBhB,CAKzB,EACG,IAAIiB,EAAWjB,EAAM,QAAQ,AACzBiB,AAAaC,UAAbD,GAA2BjB,EAAM,KAAK,CAAC,QAAQ,CAACiB,IAChDA,CAAAA,EAAWC,MAAQ,EAEvB,IAAMC,EAAiBC,AAAAA,GAAAA,EAAAA,EAAAA,AAAAA,IACvB,OACI,gBAACC,EAAAA,CAAgBA,CAAAA,CACb,QAASrB,EAAM,KAAK,CACpB,SAAU,SAACsB,CAAE,E,OAAaC,QAAQ,OAAO,CAACvB,EAAM,KAAK,CAAC,MAAM,CAACwB,SAAAA,CAAI,E,OAAIA,EAAK,WAAW,GAAG,QAAQ,CAACF,EAAG,WAAW,G,KAC/G,KAAMtB,EAAM,QAAQ,CACpB,UAAW,GACX,YAAaiB,MAAAA,EAAAA,EAAYjB,EAAM,WAAW,CAC1C,MAAQ,GAAiB,OAAfmB,EAAe,mBACzB,SAAU,SAACM,CAAI,EACNzB,EAAM,QAAQ,CAACyB,GAAM,OAAO,EACrC,EACA,YAAa,SAACC,CAAY,CAAEC,CAAW,CAAEC,CAAO,CAAEC,CAAK,CAAEC,CAAU,E,OAC/D,gBAAC,OACG,IAAKJ,IACL,MAAOG,EA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"}