{"version":3,"file":"749.js","sources":["webpack://assets/./src/components/comparison-panel.tsx","webpack://assets/./src/sorting.ts"],"sourcesContent":["import '../common.css'\nimport './article.css'\n\nimport { DndContext, DragEndEvent, DragOverlay, DragStartEvent, PointerSensor, TouchSensor, useSensor, useSensors, closestCenter } from '@dnd-kit/core'\nimport { SortableContext, arrayMove, horizontalListSortingStrategy, verticalListSortingStrategy } from '@dnd-kit/sortable'\nimport React, { ReactNode, useContext, useEffect, useMemo, useRef, useState } from 'react'\n\nimport { Navigator } from '../navigation/Navigator'\nimport { sanitize } from '../navigation/links'\nimport { colorFromCycle, useColors } from '../page_template/colors'\nimport { rowExpandedKey, useSettings } from '../page_template/settings'\nimport { groupYearKeys, StatGroupSettings } from '../page_template/statistic-settings'\nimport { PageTemplate } from '../page_template/template'\nimport { compareArticleRows } from '../sorting'\nimport { useUniverse } from '../universe'\nimport { mixWithBackground } from '../utils/color'\nimport { Article } from '../utils/protos'\nimport { useComparisonHeadStyle, useHeaderTextClass, useMobileLayout, useSubHeaderTextClass } from '../utils/responsive'\nimport { TransposeContext } from '../utils/transpose'\n\nimport { ArticleWarnings } from './ArticleWarnings'\nimport { QuerySettingsConnection } from './QuerySettingsConnection'\nimport { computeNameSpecsWithGroups } from './article-panel'\nimport { generateCSVDataForArticles, CSVExportData } from './csv-export'\nimport { ArticleRow } from './load-article'\nimport { MapGeneric, MapGenericProps, ShapeRenderingSpec } from './map'\nimport { PlotProps } from './plots'\nimport { ScreencapElements, useScreenshotMode } from './screenshot'\nimport { SearchBox } from './search'\nimport { TableContents, CellSpec } from './supertable'\nimport { ColumnIdentifier } from './table'\n\nexport function ComparisonPanel(props: { universes: string[], articles: Article[], rows: (settings: StatGroupSettings) => ArticleRow[][], mapPartitions: number[][] }): ReactNode {\n    const colors = useColors()\n    const tableRef = useRef<HTMLDivElement>(null)\n    const mapRef = useRef(null)\n\n    // State for drag overlay and articles\n    const [activeId, setActiveId] = useState<string | null>(null)\n    const [localArticles, setLocalArticles] = useState<{ value: Article[], propsValue: Article[] }>({ value: props.articles, propsValue: props.articles })\n\n    const [sortByStatIndex, setSortByStatIndex] = useState<number | null>(null)\n    const [sortDirection, setSortDirection] = useState<'up' | 'down'>('down')\n\n    // Sensors for drag and drop - more sensitive for vertical dragging\n    const sensors = useSensors(\n        useSensor(PointerSensor, {\n            activationConstraint: {\n                distance: 0,\n            },\n        }),\n        useSensor(TouchSensor, {\n            activationConstraint: {\n                delay: 50,\n                tolerance: 0,\n            },\n        }),\n    )\n\n    // Sync local state with props\n    let localArticlesToUse\n    if (localArticles.propsValue === props.articles) {\n        localArticlesToUse = localArticles.value\n    }\n    else {\n        setLocalArticles({ propsValue: props.articles, value: props.articles })\n        localArticlesToUse = props.articles\n    }\n\n    const joinedString = localArticlesToUse.map(x => x.shortname).join(' vs ')\n    const names = localArticlesToUse.map(a => a.longname)\n\n    const screencapElements = (): ScreencapElements => ({\n        path: `${sanitize(joinedString)}.png`,\n        overallWidth: tableRef.current!.offsetWidth * 2,\n        elementsToRender: [tableRef.current!, mapRef.current!],\n    })\n\n    // Drag and drop handlers\n    const handleDragStart = (event: DragStartEvent): void => {\n        setActiveId(event.active.id as string)\n    }\n\n    const handleDragEnd = (event: DragEndEvent): void => {\n        const { active, over } = event\n\n        if (over && active.id !== over.id) {\n            const oldIndex = localArticlesToUse.findIndex(article => article.shortname === active.id)\n            const newIndex = localArticlesToUse.findIndex(article => article.shortname === over.id)\n\n            const newArticles = arrayMove(localArticlesToUse, oldIndex, newIndex)\n            const newLongnames = newArticles.map(a => a.longname)\n\n            // Update local state immediately for responsive UI\n            setLocalArticles({ propsValue: props.articles, value: newArticles })\n\n            // Update the URL to reflect the new order\n            void navContext.navigate({\n                kind: 'comparison',\n                universe: navContext.universe,\n                longnames: newLongnames,\n            }, { history: 'push', scroll: { kind: 'none' } })\n        }\n\n        setActiveId(null)\n    }\n\n    const settings = useSettings(groupYearKeys())\n\n    const dataByArticleStat = props.rows(settings)\n    const dataByStatArticle = dataByArticleStat[0].map((_, statIndex) => dataByArticleStat.map(articleData => articleData[statIndex]))\n\n    const handleSort = (statIndex: number): void => {\n        let newSortDirection: 'up' | 'down' | 'both'\n        if (sortByStatIndex === statIndex) {\n            newSortDirection = sortDirection === 'up' ? 'down' : 'up'\n        }\n        else {\n            newSortDirection = 'down'\n            setSortByStatIndex(statIndex)\n        }\n\n        setSortDirection(newSortDirection)\n\n        const statData = dataByStatArticle[statIndex]\n        const sortedIndices = statData\n            .map((row, index) => ({ row, index }))\n            .sort((a, b) => compareArticleRows(a.row, b.row, newSortDirection))\n            .map(item => item.index)\n\n        const newArticles = sortedIndices.map(index => localArticlesToUse[index])\n\n        setLocalArticles({ propsValue: props.articles, value: newArticles })\n\n        void navContext.navigate({\n            kind: 'comparison',\n            universe: navContext.universe,\n            longnames: newArticles.map(a => a.longname),\n        }, { history: 'push', scroll: { kind: 'none' } })\n    }\n\n    const mobileLayout = useMobileLayout()\n\n    const validOrdinalsByStat = dataByStatArticle.map(statData => statData.every(value => value.disclaimer !== 'heterogenous-sources'))\n\n    const includeOrdinals = (\n        localArticlesToUse.every(article => article.articleType === localArticlesToUse[0].articleType)\n        && (validOrdinalsByStat.length === 0 || validOrdinalsByStat.some(x => x))\n    )\n\n    const onlyColumns: ColumnIdentifier[] = includeOrdinals ? ['statval', 'statval_unit', 'statistic_ordinal', 'statistic_percentile'] : ['statval', 'statval_unit']\n\n    const maxColumns = mobileLayout ? 4 : 6\n\n    const expandedSettings = useSettings(dataByStatArticle.filter(statData => statData.some(row => row.extraStat !== undefined)).map(([{ statpath }]) => rowExpandedKey(statpath)))\n\n    const expandedByStatIndex = dataByStatArticle.map(([{ statpath }]) => expandedSettings[rowExpandedKey(statpath)] ?? false)\n    const numExpandedExtras = expandedByStatIndex.filter(v => v).length\n\n    let widthColumns = (includeOrdinals ? 1.5 : 1) * localArticlesToUse.length + 1\n    let widthTransposeColumns = (includeOrdinals ? 1.5 : 1) * (dataByArticleStat[0].length + numExpandedExtras) + 1.5\n\n    const transpose = widthColumns > maxColumns && widthColumns > widthTransposeColumns\n\n    if (transpose) {\n        ([widthColumns, widthTransposeColumns] = [widthTransposeColumns, widthColumns])\n    }\n\n    const leftMarginPercent = transpose ? 0.24 : 0.18\n    const numColumns = transpose ? dataByArticleStat[0].length : localArticlesToUse.length\n    const columnWidth = 100 * (1 - leftMarginPercent) / (numColumns + (transpose ? numExpandedExtras : 0))\n\n    const maybeScroll = (contents: React.ReactNode): ReactNode => {\n        if (widthColumns > maxColumns) {\n            return (\n                <div style={{ overflowX: 'scroll' }}>\n                    <div style={{ width: `${100 * widthColumns / (maxColumns - 0.7)}%` }}>\n                        {contents}\n                    </div>\n                </div>\n            )\n        }\n        return contents\n    }\n\n    const highlightArticleIndicesByStat: (number | undefined)[] = dataByStatArticle.map(articlesStatData => getHighlightIndex(articlesStatData))\n\n    const headerTextClass = useHeaderTextClass()\n    const subHeaderTextClass = useSubHeaderTextClass()\n    const comparisonRightStyle = useComparisonHeadStyle('right')\n    const searchComparisonStyle = useComparisonHeadStyle()\n\n    const currentUniverse = useUniverse()\n\n    const navContext = useContext(Navigator.Context)\n\n    const sharedTypeOfAllArticles = localArticlesToUse.every(article => article.articleType === localArticlesToUse[0].articleType) ? localArticlesToUse[0].articleType : undefined\n\n    const rowToDisplayForStat = (statIndex: number): ArticleRow => {\n        return dataByStatArticle[statIndex].find(row => row.extraStat !== undefined) ?? dataByStatArticle[statIndex][0]\n    }\n\n    const plotProps = (statIndex: number): PlotProps[] => dataByStatArticle[statIndex].map((row, articleIdx) => ({ ...row, color: colorFromCycle(colors.hueColors, articleIdx), shortname: localArticlesToUse[articleIdx].shortname, longname: localArticlesToUse[articleIdx].longname, sharedTypeOfAllArticles }))\n\n    const longnameHeaderSpecs: CellSpec[] = Array.from({ length: localArticlesToUse.length }).map((_, articleIndex) => (\n        {\n            type: 'comparison-longname',\n            articleIndex,\n            articles: localArticlesToUse,\n            names,\n            transpose,\n            sharedTypeOfAllArticles,\n            highlightIndex: articleIndex,\n            draggable: true,\n            articleId: localArticlesToUse[articleIndex].shortname,\n        } satisfies CellSpec\n    ))\n\n    const statisticNameHeaderSpecsOriginal: (CellSpec & { type: 'statistic-name' })[] = Array.from({ length: dataByStatArticle.length }).map((_, statIndex) => (\n        {\n            type: 'statistic-name',\n            row: rowToDisplayForStat(statIndex),\n            longname: names[0],\n            currentUniverse,\n            center: transpose ? true : false,\n            transpose,\n            highlightIndex: highlightArticleIndicesByStat[statIndex],\n            sortInfo: {\n                onSort: () => {\n                    handleSort(statIndex)\n                },\n                sortDirection: sortByStatIndex === statIndex ? sortDirection : 'both',\n            },\n        }\n    ))\n\n    const { updatedNameSpecs: statisticNameHeaderSpecs, groupNames: statisticNameGroupNames } = computeNameSpecsWithGroups(statisticNameHeaderSpecsOriginal)\n\n    const rowSpecsByStat: CellSpec[][] = Array.from({ length: dataByStatArticle.length }).map((_, statIndex) => (\n        Array.from({ length: localArticlesToUse.length }).map((unused, articleIndex) => ({\n            type: 'statistic-row',\n            row: dataByArticleStat[articleIndex][statIndex],\n            longname: names[articleIndex],\n            onlyColumns,\n            blankColumns: validOrdinalsByStat[statIndex] ? [] : ['statistic_ordinal', 'statistic_percentile'],\n            simpleOrdinals: true,\n            statisticStyle: highlightArticleIndicesByStat[statIndex] === articleIndex ? { backgroundColor: mixWithBackground(colorFromCycle(colors.hueColors, articleIndex), colors.mixPct / 100, colors.background) } : {},\n            onNavigate: (x: string) => {\n                void navContext.navigate({\n                    kind: 'comparison',\n                    universe: navContext.universe,\n                    longnames: names.map((value, index) => index === articleIndex ? x : value),\n                }, { history: 'push', scroll: { kind: 'none' } })\n            },\n        }))\n    ))\n\n    const rowSpecsByStatTransposed = rowSpecsByStat.length === 0 ? [] : rowSpecsByStat[0].map((_, statIndex) => rowSpecsByStat.map(rowSpecs => rowSpecs[statIndex]))\n\n    const plotSpecs: ({ statDescription: string, plotProps: PlotProps[] } | undefined)[] = Array.from({ length: dataByStatArticle.length }).map((_, statIndex) =>\n        expandedByStatIndex[statIndex]\n            ? {\n                    statDescription: dataByStatArticle[statIndex][0].renderedStatname,\n                    plotProps: plotProps(statIndex),\n                }\n            : undefined,\n    )\n\n    const topLeftSpec: CellSpec = { type: 'comparison-top-left-header', statNameOverride: transpose ? 'Region' : undefined }\n\n    const csvData = generateCSVDataForArticles(localArticlesToUse, dataByArticleStat, includeOrdinals)\n    const csvFilename = `${sanitize(joinedString)}.csv`\n    const csvExportData: CSVExportData = { csvData, csvFilename }\n\n    return (\n        <TransposeContext.Provider value={transpose}>\n            <QuerySettingsConnection />\n            <PageTemplate\n                screencapElements={screencapElements}\n                csvExportData={csvExportData}\n                hasUniverseSelector={true}\n                universes={props.universes}\n            >\n                <DndContext\n                    sensors={sensors}\n                    onDragStart={handleDragStart}\n                    onDragEnd={handleDragEnd}\n                    collisionDetection={closestCenter}\n                >\n                    <SortableContext items={localArticlesToUse.map(a => a.shortname)} strategy={transpose ? verticalListSortingStrategy : horizontalListSortingStrategy}>\n                        <div>\n                            <div className={headerTextClass}>Comparison</div>\n                            <div className={subHeaderTextClass}>{joinedString}</div>\n                            <div style={{ marginBlockEnd: '16px' }}></div>\n\n                            <div style={{ display: 'flex' }}>\n                                <div style={{ width: `${100 * leftMarginPercent}%` }} />\n                                <div style={{ width: `${50 * (1 - leftMarginPercent)}%`, marginRight: '1em' }}>\n                                    <div className=\"serif\" style={comparisonRightStyle}>Add another region:</div>\n                                </div>\n                                <div style={{ width: `${50 * (1 - leftMarginPercent)}%` }}>\n                                    <SearchBox\n                                        style={{ ...searchComparisonStyle, width: '100%' }}\n                                        placeholder=\"Name\"\n                                        link={x =>\n                                            navContext.link({\n                                                kind: 'comparison',\n                                                universe: currentUniverse,\n                                                longnames: [...names, x],\n                                            }, { scroll: { kind: 'none' } })}\n                                        autoFocus={false}\n                                        prioritizeArticleType={sharedTypeOfAllArticles}\n                                    />\n                                </div>\n                            </div>\n\n                            <div style={{ marginBlockEnd: '1em' }}></div>\n\n                            {maybeScroll(\n                                <div ref={tableRef}>\n                                    {transpose\n                                        ? (\n                                                <TableContents\n                                                    superHeaderSpec={{ headerSpecs: statisticNameHeaderSpecs, showBottomBar: false, groupNames: statisticNameGroupNames }}\n                                                    leftHeaderSpec={{ leftHeaderSpecs: longnameHeaderSpecs }}\n                                                    rowSpecs={rowSpecsByStatTransposed}\n                                                    horizontalPlotSpecs={plotSpecs.map(() => undefined)}\n                                                    verticalPlotSpecs={plotSpecs}\n                                                    topLeftSpec={topLeftSpec}\n                                                    widthLeftHeader={leftMarginPercent * 100}\n                                                    columnWidth={columnWidth}\n                                                    onlyColumns={onlyColumns}\n                                                    simpleOrdinals={true}\n                                                />\n                                            )\n                                        : (\n                                                <TableContents\n                                                    superHeaderSpec={{ headerSpecs: longnameHeaderSpecs, showBottomBar: true }}\n                                                    leftHeaderSpec={{ leftHeaderSpecs: statisticNameHeaderSpecs, groupNames: statisticNameGroupNames }}\n                                                    rowSpecs={rowSpecsByStat}\n                                                    horizontalPlotSpecs={plotSpecs}\n                                                    verticalPlotSpecs={[]}\n                                                    topLeftSpec={topLeftSpec}\n                                                    widthLeftHeader={leftMarginPercent * 100}\n                                                    columnWidth={columnWidth}\n                                                    onlyColumns={onlyColumns}\n                                                    simpleOrdinals={true}\n                                                />\n                                            )}\n                                    <ArticleWarnings />\n                                </div>,\n                            )}\n                            <div className=\"gap\"></div>\n\n                            <div ref={mapRef}>\n                                <ComparisonMultiMap\n                                    longnames={localArticlesToUse.map(x => x.longname)}\n                                    colors={localArticlesToUse.map((_, i) => colorFromCycle(colors.hueColors, i))}\n                                    basemap={{ type: 'osm' }}\n                                    mapPartitions={props.mapPartitions}\n                                />\n                            </div>\n                        </div>\n                    </SortableContext>\n                    <DragOverlay>\n                        {activeId\n                            ? (\n                                    <div style={{ opacity: 0.5, backgroundColor: colors.background, padding: '8px', borderRadius: '4px' }}>\n                                        {localArticlesToUse.find(a => a.shortname === activeId)?.longname}\n                                    </div>\n                                )\n                            : null}\n                    </DragOverlay>\n                </DndContext>\n            </PageTemplate>\n        </TransposeContext.Provider>\n    )\n}\n\nfunction getHighlightIndex(rows: ArticleRow[]): number | undefined {\n    return rows.map(x => x.statval).reduce<number | undefined>((iMax, x, i, arr) => {\n        if (isNaN(x)) {\n            return iMax\n        }\n        if (iMax === undefined) {\n            return i\n        }\n        return x > arr[iMax] ? i : iMax\n    }, undefined)\n}\n\nfunction ComparisonMultiMap(props: Omit<MapGenericProps, 'attribution'> & { longnames: string[], colors: string[], mapPartitions: number[][] }): ReactNode {\n    const partitionedLongNames = props.mapPartitions.map(partition => partition.map(longnameIndex => props.longnames[longnameIndex]))\n\n    const maps = useRef<(ComparisonMap | null)[]>([])\n\n    // Want to re-zoom the maps when the partitioning changes\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            for (const map of maps.current) {\n                if (map !== null) {\n                    try {\n                        map.zoomToAll()\n                    }\n                    catch (e) {\n                        // Sometimes this fails if the map isn't ready\n                        console.warn(e)\n                    }\n                }\n            }\n        }, 0)\n        return () => { clearTimeout(timeout) }\n    }, [partitionedLongNames])\n\n    // Will get filled up on render immediately after\n    maps.current = Array<null>(props.mapPartitions.length).fill(null)\n\n    /*\n     If mobile, make 2 columns, if one at the end, use full width\n\n     If desktop, make 3 columns, if 4 at the end, make 4, if 2 at the end, make 2 (there will never be 1 at the end because that's 4)\n     */\n    const isMobile = useMobileLayout()\n    const rows: [number, number[]][][] = useMemo(() => {\n        const slice = (from: number, to: number): [number, number[]][] => {\n            return props.mapPartitions.slice(from, to).map((partition, sliceIndex) => [from + sliceIndex, partition])\n        }\n\n        if (isMobile) {\n            const result: [number, number[]][][] = []\n            for (let i = 0; i < props.mapPartitions.length; i += 2) {\n                result.push(slice(i, i + 2))\n            }\n            return result\n        }\n        else {\n            const result: [number, number[]][][] = []\n            for (let i = 0; i < props.mapPartitions.length; i += 3) {\n                if (props.mapPartitions.length - i === 4) {\n                    result.push(\n                        slice(i, i + 2),\n                        slice(i + 2, i + 4),\n                    )\n                    i += 1\n                }\n                else {\n                    result.push(slice(i, i + 3))\n                }\n            }\n            return result\n        }\n    }, [isMobile, props.mapPartitions])\n\n    return rows.map((row, rowIndex) => (\n        <div key={rowIndex} style={{ display: 'flex', width: '100%' }}>\n            {row.map(([partitionIndex, partition]) => {\n                return (\n                    <div key={partitionIndex} style={{ position: 'relative', width: `${100 / row.length}%` }}>\n                        <ComparisonMap\n                            ref={map => maps.current[partitionIndex] = map}\n                            {...props}\n                            longnames={partition.map(index => props.longnames[index])}\n                            colors={partition.map(index => props.colors[index])}\n                            attribution={\n                                partitionIndex === props.mapPartitions.length - 1 ? 'startVisible' : 'none'\n                            }\n                        />\n                    </div>\n                )\n            })}\n        </div>\n    ))\n}\n\n// eslint-disable-next-line prefer-function-component/prefer-function-component -- TODO: Maps don't support function components yet.\nclass ComparisonMap extends MapGeneric<MapGenericProps & { longnames: string[], colors: string[] }> {\n    override buttons(): ReactNode {\n        return <ComparisonMapButtons map={this} />\n    }\n\n    zoomButton(i: number, buttonColor: string, onClick: () => void): ReactNode {\n        return (\n            <div\n                key={`zoomButton_${i}`}\n                style={{\n                    display: 'inline-block', width: '2em', height: '2em',\n                    backgroundColor: buttonColor, borderRadius: '50%', marginLeft: '5px', marginRight: '5px',\n                    cursor: 'pointer',\n                }}\n                onClick={onClick}\n            />\n        )\n    }\n\n    override computeShapesToRender(): Promise<ShapeRenderingSpec> {\n        return Promise.resolve({\n            shapes: this.props.longnames.map((longname, i) => ({\n                name: longname,\n                spec: { type: 'polygon', style: { color: this.props.colors[i], fillColor: this.props.colors[i], fillOpacity: 0.5, weight: 1 } },\n                meta: {},\n            })),\n            zoomIndex: -1,\n        })\n    }\n\n    override mapDidRender(): Promise<void> {\n        this.zoomToAll({ animate: false })\n        return Promise.resolve()\n    }\n}\n\nexport function ComparisonMapButtons(props: { map: ComparisonMap }): ReactNode {\n    const colors = useColors()\n    const isScreenshot = useScreenshotMode()\n\n    if (isScreenshot) {\n        return null\n    }\n\n    return (\n        <div style={{\n            display: 'flex', backgroundColor: colors.background, padding: '0.5em', borderRadius: '0.5em',\n            alignItems: 'center',\n        }}\n        >\n            <span className=\"serif\" style={{ fontSize: '15px', fontWeight: 500 }}>Zoom to:</span>\n            <div style={{ width: '0.25em' }} />\n            {props.map.zoomButton(-1, colors.textMain, () => { props.map.zoomToAll() })}\n            {props.map.props.longnames.map((longname, i) => {\n                return props.map.zoomButton(i, props.map.props.colors[i], () => { props.map.zoomTo(longname) })\n            })}\n        </div>\n    )\n}\n","import { ArticleRow } from './components/load-article'\n\nexport function compareArticleRows(a: ArticleRow, b: ArticleRow, direction: 'up' | 'down'): number {\n    if (!isNaN(a.statval) && !isNaN(b.statval)) {\n        return direction === 'up' ? a.statval - b.statval : b.statval - a.statval\n    }\n    // always put NaN values at the end\n    if (isNaN(a.statval)) {\n        return 1\n    }\n    if (isNaN(b.statval)) {\n        return -1\n    }\n    return direction === 'up' ? a.renderedStatname.localeCompare(b.renderedStatname) : b.renderedStatname.localeCompare(a.renderedStatname)\n}\n"],"names":["ComparisonPanel","props","contents","_localArticlesToUse_find","localArticlesToUse","colors","useColors","tableRef","useRef","mapRef","_useState","activeId","setActiveId","_useState1","localArticles","setLocalArticles","_useState2","sortByStatIndex","setSortByStatIndex","_useState3","sortDirection","setSortDirection","sensors","useSensors","useSensor","PointerSensor","TouchSensor","joinedString","x","names","a","settings","useSettings","groupYearKeys","dataByArticleStat","dataByStatArticle","_","statIndex","articleData","handleSort","newSortDirection","newArticles","sortedIndices","statData","row","index","b","direction","isNaN","item","navContext","mobileLayout","useMobileLayout","validOrdinalsByStat","value","includeOrdinals","article","onlyColumns","maxColumns","expandedSettings","undefined","statpath","rowExpandedKey","expandedByStatIndex","_expandedSettings_rowExpandedKey","numExpandedExtras","v","widthColumns","widthTransposeColumns","transpose","leftMarginPercent","columnWidth","numColumns","highlightArticleIndicesByStat","articlesStatData","rows","iMax","i","arr","headerTextClass","useHeaderTextClass","subHeaderTextClass","useSubHeaderTextClass","comparisonRightStyle","useComparisonHeadStyle","searchComparisonStyle","currentUniverse","useUniverse","useContext","Navigator","sharedTypeOfAllArticles","rowToDisplayForStat","_dataByStatArticle_statIndex_find","longnameHeaderSpecs","Array","articleIndex","statisticNameHeaderSpecsOriginal","_computeNameSpecsWithGroups","statisticNameHeaderSpecs","statisticNameGroupNames","rowSpecsByStat","unused","mixWithBackground","colorFromCycle","rowSpecsByStatTransposed","rowSpecs","plotSpecs","articleIdx","topLeftSpec","csvData","generateCSVDataForArticles","csvFilename","sanitize","TransposeContext","QuerySettingsConnection","PageTemplate","DndContext","event","active","over","oldIndex","newIndex","arrayMove","newLongnames","closestCenter","SortableContext","verticalListSortingStrategy","horizontalListSortingStrategy","SearchBox","TableContents","ArticleWarnings","ComparisonMultiMap","DragOverlay","partitionedLongNames","partition","longnameIndex","maps","useEffect","timeout","setTimeout","_iteratorError","map","e","console","clearTimeout","isMobile","useMemo","slice","from","to","sliceIndex","result","result1","i1","rowIndex","partitionIndex","ComparisonMap","buttons","ComparisonMapButtons","zoomButton","buttonColor","onClick","computeShapesToRender","Promise","longname","mapDidRender","MapGeneric","useScreenshotMode"],"mappings":"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"}