{"version":3,"file":"470.js","sources":["webpack://assets/./src/components/map.css","webpack://assets/./src/components/map.css?b72c","webpack://assets/./src/components/map.tsx","webpack://assets/./src/components/screenshot-map.tsx","webpack://assets/./src/utils/coordinates.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_GET_URL_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/getUrl.js\";\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 width=%2729%27 height=%2729%27 fill=%27%23333%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M24 16v5.5c0 1.75-.75 2.5-2.5 2.5H16v-1l3-1.5-4-5.5 1-1 5.5 4 1.5-3zM6 16l1.5 3 5.5-4 1 1-4 5.5 3 1.5v1H7.5C5.75 24 5 23.25 5 21.5V16zm7-11v1l-3 1.5 4 5.5-1 1-5.5-4L6 13H5V7.5C5 5.75 5.75 5 7.5 5zm11 2.5c0-1.75-.75-2.5-2.5-2.5H16v1l3 1.5-4 5.5 1 1 5.5-4 1.5 3h1z%27/%3E%3C/svg%3E\", import.meta.url);\nvar ___CSS_LOADER_URL_IMPORT_1___ = new URL(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 width=%2729%27 height=%2729%27 viewBox=%270 0 29 29%27%3E%3Cpath d=%27M18.5 16c-1.75 0-2.5.75-2.5 2.5V24h1l1.5-3 5.5 4 1-1-4-5.5 3-1.5v-1zM13 18.5c0-1.75-.75-2.5-2.5-2.5H5v1l3 1.5L4 24l1 1 5.5-4 1.5 3h1zm3-8c0 1.75.75 2.5 2.5 2.5H24v-1l-3-1.5L25 5l-1-1-5.5 4L17 5h-1zM10.5 13c1.75 0 2.5-.75 2.5-2.5V5h-1l-1.5 3L5 4 4 5l4 5.5L5 12v1z%27/%3E%3C/svg%3E\", import.meta.url);\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_1___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/* Style fullscreen/shrink controls to match \"Zoom to\" controls */\n.maplibregl-ctrl-top-left .maplibregl-ctrl.maplibregl-ctrl-group:has(.maplibregl-ctrl-fullscreen, .maplibregl-ctrl-shrink) {\n    margin: 1em;\n    padding: calc((3em - 29px) / 2); /* (height of zoom button + 2*padding of flex container - height of icon)/2 */\n    background-color: var(--background);\n    box-shadow: none;\n\n    > button:hover:not(:disabled) {\n        background-color: var(--slightly-different-background-focused);\n    }\n\n    > button.maplibregl-ctrl-fullscreen .maplibregl-ctrl-icon {\n        mask-image: url(${___CSS_LOADER_URL_REPLACEMENT_0___});\n        background-color: var(--text-main);\n        background-image: none;\n    }\n\n    > button.maplibregl-ctrl-shrink .maplibregl-ctrl-icon {\n        mask-image: url(${___CSS_LOADER_URL_REPLACEMENT_1___});\n        background-color: var(--text-main);\n        background-image: none;\n    }\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/map.css\"],\"names\":[],\"mappings\":\"AAAA,iEAAiE;AACjE;IACI,WAAW;IACX,+BAA+B,EAAE,6EAA6E;IAC9G,mCAAmC;IACnC,gBAAgB;;IAEhB;QACI,8DAA8D;IAClE;;IAEA;QACI,mDAAyb;QACzb,kCAAkC;QAClC,sBAAsB;IAC1B;;IAEA;QACI,mDAA2a;QAC3a,kCAAkC;QAClC,sBAAsB;IAC1B;AACJ\",\"sourcesContent\":[\"/* Style fullscreen/shrink controls to match \\\"Zoom to\\\" controls */\\n.maplibregl-ctrl-top-left .maplibregl-ctrl.maplibregl-ctrl-group:has(.maplibregl-ctrl-fullscreen, .maplibregl-ctrl-shrink) {\\n    margin: 1em;\\n    padding: calc((3em - 29px) / 2); /* (height of zoom button + 2*padding of flex container - height of icon)/2 */\\n    background-color: var(--background);\\n    box-shadow: none;\\n\\n    > button:hover:not(:disabled) {\\n        background-color: var(--slightly-different-background-focused);\\n    }\\n\\n    > button.maplibregl-ctrl-fullscreen .maplibregl-ctrl-icon {\\n        mask-image: url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='29' height='29' fill='%23333' viewBox='0 0 29 29'%3E%3Cpath d='M24 16v5.5c0 1.75-.75 2.5-2.5 2.5H16v-1l3-1.5-4-5.5 1-1 5.5 4 1.5-3zM6 16l1.5 3 5.5-4 1 1-4 5.5 3 1.5v1H7.5C5.75 24 5 23.25 5 21.5V16zm7-11v1l-3 1.5 4 5.5-1 1-5.5-4L6 13H5V7.5C5 5.75 5.75 5 7.5 5zm11 2.5c0-1.75-.75-2.5-2.5-2.5H16v1l3 1.5-4 5.5 1 1 5.5-4 1.5 3h1z'/%3E%3C/svg%3E\\\");\\n        background-color: var(--text-main);\\n        background-image: none;\\n    }\\n\\n    > button.maplibregl-ctrl-shrink .maplibregl-ctrl-icon {\\n        mask-image: url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='29' height='29' viewBox='0 0 29 29'%3E%3Cpath d='M18.5 16c-1.75 0-2.5.75-2.5 2.5V24h1l1.5-3 5.5 4 1-1-4-5.5 3-1.5v-1zM13 18.5c0-1.75-.75-2.5-2.5-2.5H5v1l3 1.5L4 24l1 1 5.5-4 1.5 3h1zm3-8c0 1.75.75 2.5 2.5 2.5H24v-1l-3-1.5L25 5l-1-1-5.5 4L17 5h-1zM10.5 13c1.75 0 2.5-.75 2.5-2.5V5h-1l-1.5 3L5 4 4 5l4 5.5L5 12v1z'/%3E%3C/svg%3E\\\");\\n        background-color: var(--text-main);\\n        background-image: none;\\n    }\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../node_modules/css-loader/dist/cjs.js!./map.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../node_modules/css-loader/dist/cjs.js!./map.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import maplibregl from 'maplibre-gl'\nimport 'maplibre-gl/dist/maplibre-gl.css'\nimport React, { ReactNode } from 'react'\n\nimport './map.css'\n\nimport { boundingBox, extendBoxes, geometry } from '../map-partition'\nimport { Basemap } from '../mapper/settings/utils'\nimport { Navigator } from '../navigation/Navigator'\nimport { LongLoad } from '../navigation/loading'\nimport { useColors } from '../page_template/colors'\nimport { relatedSettingsKeys, relationshipKey, useSetting, useSettings } from '../page_template/settings'\nimport { debugPerformance } from '../search'\nimport { TestUtils } from '../utils/TestUtils'\nimport { randomColor } from '../utils/color'\nimport { computeAspectRatioForInsets } from '../utils/coordinates'\nimport { assert } from '../utils/defensive'\nimport { isHistoricalCD } from '../utils/is_historical'\nimport { Feature, IRelatedButton, IRelatedButtons } from '../utils/protos'\nimport { loadShapeFromPossibleSymlink } from '../utils/symlinks'\nimport { NormalizeProto } from '../utils/types'\n\nimport { mapBorderRadius, mapBorderWidth, useScreenshotMode, screencapElement } from './screenshot'\nimport { renderMap } from './screenshot-map'\n\nexport const defaultMapPadding = 20\n\nexport interface Inset { bottomLeft: [number, number], topRight: [number, number], coordBox?: [number, number, number, number], mainMap: boolean, name?: string }\nexport type Insets = Inset[]\nexport type MapHeight =\n    | { type: 'fixed-height', value: number | string }\n    | { type: 'aspect-ratio', value: number }\n\nexport interface MapGenericProps {\n    height?: MapHeight\n    basemap: Basemap\n    attribution: 'none' | 'startHidden' | 'startVisible'\n    insets?: Insets\n}\n\nexport interface Shape {\n    name: string\n    spec: ShapeSpec\n    meta: Record<string, unknown>\n    notClickable?: boolean\n}\nexport interface ShapeRenderingSpec {\n    shapes: Shape[]\n    zoomIndex: number\n}\n\nexport interface MapState {\n    loading: boolean\n    mapIsVisible: boolean[]\n    shapeByName: Map<string, [ShapeType, GeoJSON.Feature]>\n}\n\nexport type ShapeSpec = {\n    type: 'polygon'\n    style: {\n        fillColor: string\n        fillOpacity: number\n        color: string\n        weight?: number\n    }\n} | {\n    type: 'point'\n    style: {\n        fillColor: string\n        fillOpacity: number\n        radius: number\n    }\n}\n\nexport type ShapeType = ShapeSpec['type']\n\nconst activeMaps: MapGeneric<MapGenericProps>[] = []\n\nclass CustomAttributionControl extends maplibregl.AttributionControl {\n    constructor(startShowingAttribution: boolean) {\n        super()\n\n        // Copied from implementation https://github.com/maplibre/maplibre-gl-js/blob/34b95c06259014661cf72a418fd81917313088bf/src/ui/control/attribution_control.ts#L190\n        // But reduced since always compact\n        this._updateCompact = () => {\n            if (!this._container.classList.contains('maplibregl-compact') && !this._container.classList.contains('maplibregl-attrib-empty')) {\n                this._container.classList.add('maplibregl-compact')\n                if (startShowingAttribution) {\n                    this._container.setAttribute('open', '')\n                    this._container.classList.add('maplibregl-compact-show')\n                }\n            }\n        }\n    }\n}\n\nclass MapHandler {\n    public ids: string[]\n    public mainMaps: boolean[] = []\n    public maps: maplibregl.Map[] | undefined = undefined\n    private ensureStyleLoaded: Promise<void> | undefined = undefined\n\n    constructor(mainMaps: boolean[]) {\n        this.ids = Array.from({ length: mainMaps.length }, (_, i) => `map-${i}-${Math.random().toString(36).substring(2)}`)\n        this.mainMaps = mainMaps\n    }\n\n    initialize(onClick: (name: string) => void): void {\n        [this.maps, this.ensureStyleLoaded] = createMaps(this.ids, this.mainMaps, onClick)\n    }\n\n    container(): HTMLElement {\n        assert(this.maps !== undefined, 'Map must be initialized before accessing container')\n        return this.maps[0].getContainer()\n    }\n\n    async getMaps(): Promise<maplibregl.Map[]> {\n        while (this.maps === undefined) {\n            await new Promise(resolve => setTimeout(resolve, 10))\n        }\n        return this.maps\n    }\n\n    async ensureStyleLoadedFn(): Promise<maplibregl.Map[]> {\n        while (this.ensureStyleLoaded === undefined) {\n            await new Promise(resolve => setTimeout(resolve, 10))\n        }\n        await this.ensureStyleLoaded\n        return await this.getMaps()\n    }\n\n    async stylesheetPresent(): Promise<maplibregl.Map[]> {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- it can in fact be undefined, this is undocumented\n        if (this.maps?.every(map => map.style.stylesheet !== undefined)) {\n            return this.maps\n        }\n        await new Promise(resolve => setTimeout(resolve, 10))\n        return await this.stylesheetPresent()\n    }\n}\n\nfunction createMap(\n    id: string,\n    onClick: (name: string) => void,\n    fullMap: boolean,\n): [maplibregl.Map, Promise<void>] {\n    const map = new maplibregl.Map({\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        container: id,\n        scrollZoom: fullMap,\n        dragPan: fullMap,\n        dragRotate: false,\n        canvasContextAttributes: {\n            preserveDrawingBuffer: true,\n        },\n        pixelRatio: TestUtils.shared.isTesting ? 0.1 : undefined, // e2e tests often run with a software renderer, this saves time\n        attributionControl: false,\n    })\n\n    if (fullMap) {\n        map.addControl(new maplibregl.FullscreenControl(), 'top-left')\n        map.on('mouseover', 'polygon', () => {\n            map.getCanvas().style.cursor = 'pointer'\n        })\n        map.on('mouseleave', 'polygon', () => {\n            map.getCanvas().style.cursor = ''\n        })\n        map.on('click', 'polygon', (e) => {\n            const features = e.features!\n            const names = features.filter(feature => !feature.properties.notClickable).map(feature => feature.properties.name as string)\n            if (names.length === 0) {\n                return\n            }\n            onClick(names[0])\n        })\n    }\n\n    const ensureStyleLoaded = new Promise(resolve => map.on('style.load', resolve)) satisfies Promise<void>\n    return [map, ensureStyleLoaded]\n}\n\nfunction createMaps(\n    ids: string[],\n    mainMaps: boolean[],\n    onClick: (name: string) => void,\n): [maplibregl.Map[], Promise<void>] {\n    const maps = []\n    const ensureStyleLoadeds = []\n    for (const [i, id] of ids.entries()) {\n        const [map, ensureStyleLoaded] = createMap(id, onClick, mainMaps[i])\n        maps.push(map)\n        ensureStyleLoadeds.push(ensureStyleLoaded)\n    }\n    const ensureStyleLoaded = Promise.all(ensureStyleLoadeds).then(() => undefined) satisfies Promise<void>\n    return [maps, ensureStyleLoaded]\n}\n\n// eslint-disable-next-line prefer-function-component/prefer-function-component  -- TODO: Maps don't support function components yet.\nexport abstract class MapGeneric<P extends MapGenericProps> extends React.Component<P, MapState> {\n    protected version = 0\n    private lastUpdate: Promise<void> | undefined\n    private basemap_props: null | Basemap = null\n    private exist_this_time: string[] = []\n    private attributionControl: CustomAttributionControl | undefined\n    protected handler: MapHandler\n    private hasZoomed = false\n\n    constructor(props: P) {\n        super(props)\n        this.state = { loading: true, shapeByName: new Map(), mapIsVisible: this.insets().map(() => true) }\n        activeMaps.push(this)\n        this.handler = new MapHandler(this.insets().map(inset => inset.mainMap))\n    }\n\n    insets(): Insets {\n        return this.props.insets ?? [{ bottomLeft: [0, 0], topRight: [1, 1], mainMap: true }]\n    }\n\n    /* Override if you want the loading spinner */\n    shouldHaveLoadingSpinner(): boolean {\n        return false\n    }\n\n    override render(): ReactNode {\n        return (\n            <>\n                <input type=\"hidden\" data-test-loading={this.state.loading} />\n                <div style={{ position: 'relative', ...this.mapStyle() }}>\n                    {this.insets().map((bbox, i) => (\n                        <MapBody\n                            key={this.handler.ids[i]}\n                            id={this.handler.ids[i]}\n                            height=\"100%\"\n                            buttons={this.buttons()}\n                            bbox={bbox}\n                            insetBoundary={i > 0}\n                            visible={this.state.mapIsVisible[i]}\n                        />\n                    ))}\n                    <LongLoad containerStyleOverride={{\n                        position: 'absolute',\n                        transition: 'opacity 0.25s',\n                        opacity: this.state.loading && this.shouldHaveLoadingSpinner() ? 1 : 0,\n                        pointerEvents: 'none',\n                    }}\n                    />\n                </div>\n                <div style={{ display: 'none' }}>\n                    {Array.from(this.state.shapeByName.keys()).map(name =>\n                        // eslint-disable-next-line react/no-unknown-property -- this is a custom property\n                        <div key={name} clickable-polygon={name} onClick={() => { this.onClick(name) }} />,\n                    )}\n                </div>\n            </>\n        )\n    }\n\n    mapHeight(): number | string {\n        const height = this.props.height ?? { type: 'fixed-height', value: 400 }\n        if (height.type === 'aspect-ratio') {\n            return '100%'\n        }\n        return height.value\n    }\n\n    mapStyle(): React.CSSProperties {\n        const height = this.props.height ?? { type: 'fixed-height', value: 400 }\n        if (height.type === 'aspect-ratio') {\n            return {\n                aspectRatio: height.value.toString(),\n                width: '100%',\n                minHeight: '300px',\n            }\n        }\n        return {\n            height: height.value,\n            width: '100%',\n        }\n    }\n\n    buttons(): ReactNode {\n        return <></>\n    }\n\n    /**\n     * Should return [names, styles, metas, zoom_index]\n     * names: list of names of polygons to draw\n     * styles: list of styles for each polygon\n     * metas: list of metadata dictionaries for each polygon\n     * zoom_index: index of polygon to zoom to, or -1 if none\n     */\n    abstract computeShapesToRender(version: number): Promise<ShapeRenderingSpec>\n\n    async mapDidRender(): Promise<void> {\n        /**\n             * Called after the map is rendered\n             */\n    }\n\n    async loadPolygon(name: string): Promise<NormalizeProto<Feature>> {\n        return await loadShapeFromPossibleSymlink(name) as NormalizeProto<Feature>\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- unimplemented\n    loadPoint(name: string): Promise<{ lon: number, lat: number }> {\n        throw new Error('loadPoint not implemented by default')\n    }\n\n    subnationalOutlines(): maplibregl.LayerSpecification[] {\n        const basemap = this.props.basemap\n        if (basemap.type !== 'osm' || !basemap.subnationalOutlines) {\n            return []\n        }\n        return [\n            {\n                'id': 'boundary_subn_overlayed',\n                'type': 'line',\n                'source': 'openmaptiles',\n                'source-layer': 'boundary',\n                'filter': [\n                    'all',\n                    [\n                        '<=',\n                        [\n                            'get',\n                            'admin_level',\n                        ],\n                        4,\n                    ],\n                    [\n                        '!=',\n                        [\n                            'get',\n                            'maritime',\n                        ],\n                        1,\n                    ],\n                    [\n                        '!=',\n                        [\n                            'get',\n                            'disputed',\n                        ],\n                        1,\n                    ],\n                    [\n                        '!',\n                        [\n                            'has',\n                            'claimed_by',\n                        ],\n                    ],\n                ],\n                'paint': {\n                    'line-color': basemap.subnationalOutlines.color,\n                    'line-width': basemap.subnationalOutlines.weight,\n                },\n            },\n        ]\n    }\n\n    override async componentDidMount(): Promise<void> {\n        this.handler.initialize((name) => { this.onClick(name) })\n        const maps = await this.handler.getMaps()\n        const insets = this.insets()\n        assert(maps.length === insets.length, `Expected ${insets.length} maps, got ${maps.length}`)\n        for (const i of insets.keys()) {\n            const map = maps[i]\n            const { coordBox } = insets[i]\n            if (coordBox) {\n                const bounds = new maplibregl.LngLatBounds(\n                    new maplibregl.LngLat(coordBox[0], coordBox[1]),\n                    new maplibregl.LngLat(coordBox[2], coordBox[3]),\n                )\n                map.fitBounds(bounds, { animate: false })\n            }\n        }\n        this.hasZoomed = true\n        await this.componentDidUpdate(this.props, this.state)\n    }\n\n    onClick(name: string): void {\n        void this.context.navigate({\n            kind: 'article',\n            universe: this.context.universe,\n            longname: name,\n        }, { history: 'push', scroll: { kind: 'element', element: this.handler.container() } })\n    }\n\n    async exportAsPng(colorbarElement: HTMLElement | undefined, backgroundColor: string, insetBorderColor: string): Promise<string> {\n        const pixelRatio = 4\n        const width = 4096\n        const colorbarHeight = 300\n        const cBarPad = 40\n\n        const maps = await this.handler.getMaps()\n        const insets = this.insets()\n\n        const aspectRatio = computeAspectRatioForInsets(insets)\n\n        const height = Math.round(width / aspectRatio)\n\n        const totalHeight = height + colorbarHeight\n\n        const params = { width, height, pixelRatio, insetBorderColor }\n\n        const canvas = document.createElement('canvas')\n        const ctx = canvas.getContext('2d')!\n        canvas.width = width\n        canvas.height = totalHeight\n\n        await Promise.all(maps.map(async (map, i) => {\n            if (!this.state.mapIsVisible[i]) {\n                return\n            }\n            const inset = insets[i]\n            await renderMap(ctx, map, inset, params)\n        }))\n\n        ctx.fillStyle = backgroundColor\n        ctx.fillRect(0, height, width, colorbarHeight) // Fill the entire colorbar area\n\n        if (colorbarElement) {\n            const colorbarWidth = (colorbarHeight - cBarPad) * colorbarElement.offsetWidth / colorbarElement.offsetHeight\n\n            const colorbarCanvas = await screencapElement(colorbarElement, colorbarWidth, 1)\n\n            ctx.drawImage(colorbarCanvas, (width - colorbarWidth) / 2, height + cBarPad / 2)\n        }\n\n        return canvas.toDataURL('image/png', 1.0)\n    }\n\n    async exportAsGeoJSON(): Promise<string> {\n        const { shapes } = await this.computeShapesToRender(this.version)\n        const geojson: GeoJSON.FeatureCollection = {\n            type: 'FeatureCollection',\n            features: [],\n        }\n        for (const shape of shapes) {\n            let feature = await this.shapeGeojson(shape.name, shape.notClickable, shape.spec)\n            feature = JSON.parse(JSON.stringify(feature)) as typeof feature\n            for (const [key, value] of Object.entries(shape.meta)) {\n                feature.properties![key] = value\n            }\n            geojson.features.push(feature)\n        }\n        return JSON.stringify(geojson)\n    }\n\n    override async componentDidUpdate(prevProps: P, prevState: MapState): Promise<void> {\n        let shouldWeUpdate = false\n        // make sure we update the first time\n        shouldWeUpdate ||= this.version < 1\n        shouldWeUpdate ||= JSON.stringify(prevProps) !== JSON.stringify(this.props)\n        shouldWeUpdate ||= JSON.stringify({ ...prevState, loading: undefined }) !== JSON.stringify({ ...this.state, loading: undefined })\n        if (shouldWeUpdate) {\n            // Only update if something that's not the loading has changed, or it's the first load\n            await this.bumpVersion()\n        }\n    }\n\n    async bumpVersion(): Promise<void> {\n        return this.updateToVersion(this.version + 1)\n    }\n\n    async updateToVersion(version: number): Promise<void> {\n        this.version = version\n        await this.handler.getMaps()\n        await this.lastUpdate\n        if (this.version !== version) {\n            // There's a newer update behind us\n            return\n        }\n        this.lastUpdate = (async () => {\n            const updateStart = Date.now()\n            await this.updateFn(version)\n            const updateDuration = Date.now() - updateStart\n            // Can only update once per second\n            await new Promise(resolve => setTimeout(resolve, Math.max(0, 1000 - updateDuration)))\n        })()\n        return this.lastUpdate\n    }\n\n    // In order to prevent race conditions, only one updateFn should be run at a time for a given map\n    async updateFn(version: number): Promise<void> {\n        const time = Date.now()\n        debugPerformance('Loading map...')\n        this.setState({ loading: true })\n        const maps = await this.handler.getMaps()\n\n        if (this.attributionControl !== undefined) {\n            maps[0].removeControl(this.attributionControl)\n            this.attributionControl = undefined\n        }\n\n        if (this.props.attribution !== 'none') {\n            this.attributionControl = new CustomAttributionControl(this.props.attribution === 'startVisible')\n            maps[0].addControl(this.attributionControl)\n        }\n\n        this.exist_this_time = []\n\n        this.attachBasemap()\n\n        await this.populateMap(maps, time, version)\n        this.setState({ loading: false })\n        debugPerformance(`Updated sources to delete stuff; at ${Date.now() - time}ms`)\n        debugPerformance(`No longer loading map; took ${Date.now() - time}ms`)\n    }\n\n    async populateMap(maps: maplibregl.Map[], timeBasis: number, version: number): Promise<void> {\n        const { shapes, zoomIndex } = await this.computeShapesToRender(version)\n\n        debugPerformance(`Computed polygons; at ${Date.now() - timeBasis}ms`)\n\n        await this.addShapes(shapes, zoomIndex)\n\n        debugPerformance(`Added polygons; at ${Date.now() - timeBasis}ms`)\n\n        // Remove polygons that no longer exist\n        // Must do this before map render or zooms are incorrect (they try to zoom to previous regions)\n        for (const [name] of this.state.shapeByName.entries()) {\n            if (!this.exist_this_time.includes(name)) {\n                this.state.shapeByName.delete(name)\n            }\n        }\n\n        debugPerformance(`Removed polygons; at ${Date.now() - timeBasis}ms`)\n\n        await this.mapDidRender()\n\n        debugPerformance(`Finished waiting for mapDidRender; at ${Date.now() - timeBasis}ms`)\n\n        await this.updateSources(true)\n    }\n\n    attachBasemap(): void {\n        if (JSON.stringify(this.props.basemap) === JSON.stringify(this.basemap_props)) {\n            return\n        }\n        this.basemap_props = this.props.basemap\n        void this.loadBasemap()\n    }\n\n    async loadBasemap(): Promise<void> {\n        const maps = await this.handler.stylesheetPresent()\n        // await this.ensureStyleLoaded()\n        maps.forEach((map) => { setBasemap(map, this.props.basemap) })\n    }\n\n    progressivelyLoadShapes(): boolean {\n        // Whether to attempt to refresh the map as polygons are added\n        return true\n    }\n\n    async addShapes(shapes: Shape[], zoom_to: number): Promise<void> {\n        const time = Date.now()\n        debugPerformance('Adding polygons...')\n        await Promise.all(shapes.map(async (polygon, i) => {\n            await this.addShape(polygon, i === zoom_to)\n            if (this.progressivelyLoadShapes()) {\n                await this.updateSources()\n            }\n        }))\n        debugPerformance(`Added polygons [addPolygons]; at ${Date.now() - time}ms`)\n        await this.updateSources(true)\n        debugPerformance(`Updated sources [addPolygons]; at ${Date.now() - time}ms`)\n    }\n\n    async shapeGeojson(name: string, notClickable: boolean | undefined, style: ShapeSpec): Promise<GeoJSON.Feature> {\n        switch (style.type) {\n            case 'polygon':\n                const poly = await this.loadPolygon(name)\n                return {\n                    type: 'Feature' as const,\n                    properties: { name, notClickable, ...style.style },\n                    geometry: geometry(poly),\n                }\n            case 'point':\n                const { lon, lat } = await this.loadPoint(name)\n                return {\n                    type: 'Feature' as const,\n                    properties: { name, notClickable, ...style.style },\n                    geometry: {\n                        type: 'Point',\n                        coordinates: [lon, lat],\n                    },\n                }\n        }\n    }\n\n    sources_last_updated = 0\n\n    firstLabelId(map: maplibregl.Map): string | undefined {\n        for (const layer of map.style.stylesheet.layers) {\n            if (layer.type === 'symbol' && layer.id.startsWith('label')) {\n                return layer.id\n            }\n        }\n        return undefined\n    }\n\n    async updateSources(force = false): Promise<void> {\n        if (this.sources_last_updated > Date.now() - 1000 && !force) {\n            return\n        }\n        const maps = await this.handler.getMaps()\n        if (maps.some(map => !map.isStyleLoaded()) && !force) {\n            return\n        }\n        this.sources_last_updated = Date.now()\n        await this.handler.ensureStyleLoadedFn()\n        const shapes = Array.from(this.state.shapeByName.values())\n        const mapIsVisible = maps.map((map, i) => this.setUpMap(map, shapes, this.insets()[i]))\n        this.setState({ mapIsVisible })\n    }\n\n    setUpMap(map: maplibregl.Map, shapes: [ShapeType, GeoJSON.Feature][], inset: Inset): boolean {\n        function filterOverlaps(features: GeoJSON.Feature[]): GeoJSON.Feature[] {\n            const bbox = inset.coordBox\n            if (!inset.mainMap && bbox !== undefined) {\n                features = features.filter((poly) => {\n                    const bounds = boundingBox(poly.geometry)\n                    // Check if the polygon overlaps the inset bounds\n                    return bounds.getWest() < bbox[2] && bounds.getEast() > bbox[0]\n                        && bounds.getNorth() > bbox[1] && bounds.getSouth() < bbox[3]\n                })\n            }\n            return features\n        }\n        const labelId = this.firstLabelId(map)\n\n        const setUpPolygonSource = (polys: GeoJSON.Feature[]): number => {\n            const polygonData = {\n                type: 'FeatureCollection',\n                features: filterOverlaps(polys),\n            } satisfies GeoJSON.FeatureCollection\n            let polygonSource: maplibregl.GeoJSONSource | undefined = map.getSource('polygon')\n            if (polygonSource === undefined) {\n                map.addSource('polygon', {\n                    type: 'geojson',\n                    data: polygonData,\n                })\n                map.addLayer({\n                    id: 'polygon',\n                    type: 'fill',\n                    source: 'polygon',\n                    paint: {\n                        'fill-color': ['get', 'fillColor'],\n                        'fill-opacity': ['get', 'fillOpacity'],\n                    },\n                }, labelId)\n                map.addLayer({\n                    id: 'polygon-outline',\n                    type: 'line',\n                    source: 'polygon',\n                    paint: {\n                        'line-color': ['get', 'color'],\n                        'line-width': ['get', 'weight'],\n                    },\n                }, labelId)\n                polygonSource = map.getSource('polygon')!\n            }\n            polygonSource.setData(polygonData)\n            return polygonData.features.length\n        }\n\n        const setUpPointSource = (points: GeoJSON.Feature[]): number => {\n            const pointData = {\n                type: 'FeatureCollection',\n                features: filterOverlaps(points),\n            } satisfies GeoJSON.FeatureCollection\n            let pointSource: maplibregl.GeoJSONSource | undefined = map.getSource('point')\n            if (pointSource === undefined) {\n                map.addSource('point', {\n                    type: 'geojson',\n                    data: pointData,\n                })\n                map.addLayer({\n                    id: 'point',\n                    type: 'circle',\n                    source: 'point',\n                    paint: {\n                        'circle-color': ['get', 'fillColor'],\n                        'circle-opacity': ['get', 'fillOpacity'],\n                        'circle-radius': ['get', 'radius'],\n                    },\n                }, labelId)\n                pointSource = map.getSource('point')!\n            }\n            pointSource.setData(pointData)\n            return pointData.features.length\n        }\n\n        let count = 0\n\n        count += setUpPolygonSource(shapes.filter(([type]) => type === 'polygon').map(([, feature]) => feature))\n        count += setUpPointSource(shapes.filter(([type]) => type === 'point').map(([, feature]) => feature))\n\n        for (const layer of this.subnationalOutlines()) {\n            if (map.getLayer(layer.id) !== undefined) {\n                map.removeLayer(layer.id)\n            }\n            map.addLayer(layer, labelId)\n        }\n        return count > 0 || inset.mainMap\n    }\n\n    /*\n     * Returns whether or not we actually need to update the sources\n     */\n    async addShape(shape: Shape, fit_bounds: boolean): Promise<void> {\n        this.exist_this_time.push(shape.name)\n        const current = this.state.shapeByName.get(shape.name)\n        if (current && current[0] === shape.spec.type) {\n            current[1].properties = { ...shape.spec.style, name: shape.name, notClickable: shape.notClickable }\n        }\n        const geojson = await this.shapeGeojson(shape.name, shape.notClickable, shape.spec)\n        if (fit_bounds) {\n            this.zoomToItems([geojson], { animate: false })\n        }\n\n        this.state.shapeByName.set(shape.name, [shape.spec.type, geojson])\n    }\n\n    zoomToItems(items: Iterable<GeoJSON.Feature>, options: maplibregl.FitBoundsOptions): void {\n        this.handler.maps?.forEach((map) => {\n            map.fitBounds(\n                extendBoxes(Array.from(items).map(feature => boundingBox(feature.geometry))),\n                { padding: defaultMapPadding, ...options },\n            )\n        })\n    }\n\n    zoomToAll(options: maplibregl.FitBoundsOptions = {}): void {\n        this.zoomToItems(Array.from(this.state.shapeByName.values()).map(([, feature]) => feature), options)\n    }\n\n    zoomTo(name: string): void {\n        this.zoomToItems([this.state.shapeByName.get(name)![1]], {})\n    }\n\n    static override contextType = Navigator.Context\n\n    declare context: React.ContextType<typeof Navigator.Context>\n}\n\nfunction MapBody(props: { id: string, height: number | string, buttons: ReactNode, bbox: Inset, insetBoundary: boolean, visible: boolean }): ReactNode {\n    const colors = useColors()\n    const isScreenshot = useScreenshotMode()\n    // Optionally use props.bbox.bottomLeft and props.bbox.topRight for custom placement\n    const [x0, y0] = props.bbox.bottomLeft\n    const [x1, y1] = props.bbox.topRight\n    return (\n        <div\n            id={props.id}\n            style={{\n                left: `${x0 * 100}%`,\n                bottom: `${y0 * 100}%`,\n                width: `${(x1 - x0) * 100}%`,\n                height: `${(y1 - y0) * 100}%`,\n                position: 'absolute',\n                border: props.insetBoundary ? `2px solid ${colors.mapInsetBorderColor}` : `${mapBorderWidth}px solid ${colors.borderNonShadow}`,\n                borderRadius: props.insetBoundary ? '0px' : `${mapBorderRadius}px`,\n                // In screenshot mode, the background is transparent so we can render this component atop the already-rendered map canvases\n                // In normal mode, the map is drawn over this normally, but is hidden during e2e testing, where we use the background color to mark map position\n                backgroundColor: isScreenshot ? 'transparent' : colors.slightlyDifferentBackground,\n                ...(props.visible ? {} : { display: 'none' }),\n            }}\n        >\n            {/* place this on the right of the map */}\n            <div style={\n                { zIndex: 1000, position: 'absolute', right: 0, top: 0, padding: '1em' }\n            }\n            >\n                {props.buttons}\n            </div>\n        </div>\n    )\n}\n\nfunction isVisible(basemap: Basemap, layer: maplibregl.LayerSpecification): boolean {\n    switch (basemap.type) {\n        case 'none':\n            return false\n        case 'osm':\n            if (basemap.noLabels && layer.type === 'symbol') {\n                return false\n            }\n            return true\n    }\n}\n\nfunction setBasemap(map: maplibregl.Map, basemap: Basemap): void {\n    map.style.stylesheet.layers.forEach((layerspec: maplibregl.LayerSpecification) => {\n        if (layerspec.id === 'background') {\n            return\n        }\n        const layer = map.getLayer(layerspec.id)!\n        layer.setLayoutProperty('visibility', isVisible(basemap, layerspec) ? 'visible' : 'none')\n    })\n}\n\nfunction clickMapElement(longname: string): void {\n    for (const map of activeMaps) {\n        if (map.state.shapeByName.has(longname)) {\n            map.onClick(longname)\n            return\n        }\n    }\n    throw new Error(`Polygon ${longname} not found in any map`)\n}\n\n// for testing\n(window as unknown as {\n    clickMapElement: (longname: string) => void\n}).clickMapElement = clickMapElement\n\ninterface MapProps extends MapGenericProps {\n    longname: string\n    related: NormalizeProto<IRelatedButtons>[]\n    articleType: string\n}\n\ninterface ArticleMapProps extends MapProps {\n    showHistoricalCDs: boolean\n    settings: Record<string, unknown>\n    color: string\n}\n\n// eslint-disable-next-line no-restricted-syntax -- Don't want to overwrite the JS Map\nexport { MapComponent as Map }\nfunction MapComponent(props: MapProps): ReactNode {\n    const colors = useColors()\n    const [showHistoricalCDs] = useSetting('show_historical_cds')\n    const relatedCheckboxSettings = useSettings(relatedSettingsKeys(props.articleType))\n    return (\n        <ArticleMap\n            {...props}\n            showHistoricalCDs={showHistoricalCDs}\n            settings={relatedCheckboxSettings}\n            color={colors.hueColors.blue}\n        />\n    )\n}\n\nclass ArticleMap extends MapGeneric<ArticleMapProps> {\n    private already_fit_bounds: string | undefined = undefined\n\n    override computeShapesToRender(): Promise<ShapeRenderingSpec> {\n        const relateds = [\n            ...this.getRelated('contained_by'),\n            ...this.getRelated('intersects'),\n            ...this.getRelated('borders'),\n            ...this.getRelated('contains'),\n            ...this.getRelated('same_geography'),\n        ]\n\n        const relatedPolygons = this.relatedPolygons(relateds)\n\n        return Promise.resolve({\n            shapes: [\n                {\n                    name: this.props.longname,\n                    spec: { type: 'polygon', style: { fillOpacity: 0.5, weight: 1, color: this.props.color, fillColor: this.props.color } },\n                    meta: {},\n                    notClickable: true,\n                },\n                ...relatedPolygons,\n            ],\n            zoomIndex: this.already_fit_bounds !== this.props.longname ? 0 : -1,\n        })\n    }\n\n    override mapDidRender(): Promise<void> {\n        this.already_fit_bounds = this.props.longname\n        return Promise.resolve()\n    }\n\n    getRelated(key: string): NormalizeProto<IRelatedButton>[] {\n        const element = this.props.related.filter(\n            x => x.relationshipType === key)\n            .map(x => x.buttons)[0]\n        return element\n    }\n\n    relatedPolygons(related: NormalizeProto<IRelatedButton>[]): Shape[] {\n        const result: Shape[] = []\n        for (let i = related.length - 1; i >= 0; i--) {\n            if (!this.props.showHistoricalCDs && isHistoricalCD(related[i].rowType)) {\n                continue\n            }\n            const key = relationshipKey(this.props.articleType, related[i].rowType)\n            if (!this.props.settings[key]) {\n                continue\n            }\n\n            const color = randomColor(related[i].longname)\n            const style = { color, weight: 1, fillColor: color, fillOpacity: 0.1 }\n            result.push({\n                name: related[i].longname,\n                spec: { type: 'polygon', style },\n                meta: {},\n            })\n        }\n        return result\n    }\n}\n","import maplibregl from 'maplibre-gl'\n\nimport { Inset } from './map'\n\ninterface MapScreenshotParams {\n    width: number\n    height: number\n    pixelRatio: number\n    insetBorderColor: string\n}\n\nfunction computeRelativeLocs(inset: Inset, params: MapScreenshotParams): { insetWidth: number, insetHeight: number, insetX: number, insetY: number } {\n    const [x0, y0] = inset.bottomLeft\n    const [x1, y1] = inset.topRight\n    const insetWidth = (x1 - x0) * params.width\n    const insetHeight = (y1 - y0) * params.height\n    const insetX = x0 * params.width\n    const insetY = (1 - y1) * params.height // Flip Y coordinate for canvas\n    return { insetWidth, insetHeight, insetX, insetY }\n}\n\nexport async function renderMap(\n    ctx: CanvasRenderingContext2D,\n    map: maplibregl.Map, inset: Inset,\n    params: MapScreenshotParams,\n): Promise<void> {\n    const container = map.getContainer()\n    const originalSize = {\n        width: container.style.width || '',\n        height: container.style.height || '',\n    }\n    const originalBounds = map.getBounds()\n    const originalPixelRatio = map.getPixelRatio()\n\n    const { insetWidth, insetHeight, insetX, insetY } = computeRelativeLocs(inset, params)\n\n    // resize the container to the inset size / pixel ratio, so the map renders at high resolution\n    // but text and other elements are not scaled\n    container.style.width = `${insetWidth / params.pixelRatio}px`\n    container.style.height = `${insetHeight / params.pixelRatio}px`\n\n    map.setPixelRatio(params.pixelRatio)\n\n    // Trigger map resize\n    map.resize()\n\n    let bounds = originalBounds\n    if (inset.coordBox !== undefined) {\n        const [west, south, east, north] = inset.coordBox\n        bounds = new maplibregl.LngLatBounds(\n            new maplibregl.LngLat(west, south),\n            new maplibregl.LngLat(east, north),\n        )\n    }\n    map.fitBounds(bounds, { animate: false, padding: 0 })\n    // Wait for maps to re-render at high resolution\n    await new Promise(resolve => setTimeout(resolve, 1000))\n\n    const mapCanvas = map.getCanvas()\n\n    // Draw the map content onto the main canvas\n    ctx.drawImage(mapCanvas, insetX, insetY, insetWidth, insetHeight)\n\n    if (!inset.mainMap) {\n        ctx.strokeStyle = params.insetBorderColor\n        ctx.lineWidth = 4\n        ctx.strokeRect(insetX, insetY, insetWidth, insetHeight)\n    }\n    container.style.width = originalSize.width\n    container.style.height = originalSize.height\n    map.setPixelRatio(originalPixelRatio)\n    map.resize()\n    map.fitBounds(originalBounds, { animate: false })\n}\n","import { Inset, Insets } from '../components/map'\n\nimport { assert } from './defensive'\n\n// Web Mercator projection functions\nfunction lngToWebMercatorX(lng: number): number {\n    return lng * Math.PI / 180 * 6378137\n}\n\nfunction latToWebMercatorY(lat: number): number {\n    return 6378137 * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360))\n}\n\nexport function computeAspectRatio(coordBox: [number, number, number, number]): number {\n    // coordBox is [west, south, east, north]\n    const x1 = lngToWebMercatorX(coordBox[0])\n    const x2 = lngToWebMercatorX(coordBox[2])\n    const y1 = latToWebMercatorY(coordBox[1])\n    const y2 = latToWebMercatorY(coordBox[3])\n\n    const width = Math.abs(x2 - x1)\n    const height = Math.abs(y2 - y1)\n\n    return width / height\n}\n\nfunction area(coordBox: [number, number, number, number]): number {\n    // coordBox is [west, south, east, north]\n    const x1 = lngToWebMercatorX(coordBox[0])\n    const x2 = lngToWebMercatorX(coordBox[2])\n    const y1 = latToWebMercatorY(coordBox[1])\n    const y2 = latToWebMercatorY(coordBox[3])\n\n    return Math.abs((x2 - x1) * (y2 - y1))\n}\n\nexport function computeAspectRatioForInsets(ins: Insets): number {\n    const mapsWithCoordBox = ins.filter(inset => inset.coordBox !== undefined) as (Inset & { coordBox: [number, number, number, number] })[]\n    assert(mapsWithCoordBox.length > 0, 'No insets with coordBox')\n\n    const biggestMap = mapsWithCoordBox.reduce((prev, curr) => {\n        return area(curr.coordBox) > area(prev.coordBox) ? curr : prev\n    })\n    const coordBox = biggestMap.coordBox\n    const onScreenWidth = biggestMap.topRight[0] - biggestMap.bottomLeft[0]\n    const onScreenHeight = biggestMap.topRight[1] - biggestMap.bottomLeft[1]\n    const onScreenAspectRatio = onScreenWidth / onScreenHeight\n    return computeAspectRatio(coordBox) / onScreenAspectRatio\n}\n"],"names":["URL","activeMaps","CustomAttributionControl","startShowingAttribution","maplibregl","MapHandler","mainMaps","undefined","Array","_","i","Math","initialize","onClick","createMaps","ids","maps","ensureStyleLoadeds","_iteratorError","id","_createMap","fullMap","map","TestUtils","e","names","features","feature","ensureStyleLoaded","Promise","resolve","container","assert","getMaps","setTimeout","ensureStyleLoadedFn","stylesheetPresent","_this_maps","MapGeneric","props","Map","inset","insets","_this_props_insets","shouldHaveLoadingSpinner","render","bbox","MapBody","t","LongLoad","name","mapHeight","_this_props_height","height","mapStyle","buttons","mapDidRender","loadPolygon","loadShapeFromPossibleSymlink","loadPoint","Error","subnationalOutlines","basemap","componentDidMount","coordBox","bounds","exportAsPng","colorbarElement","backgroundColor","insetBorderColor","pixelRatio","width","colorbarHeight","cBarPad","aspectRatio","totalHeight","params","canvas","ctx","colorbarWidth","colorbarCanvas","computeAspectRatioForInsets","document","originalSize","originalBounds","originalPixelRatio","_computeRelativeLocs","insetWidth","insetHeight","insetX","insetY","_inset_coordBox","west","south","east","north","mapCanvas","_inset_bottomLeft","x0","y0","_inset_topRight","x1","y1","screencapElement","exportAsGeoJSON","shapes","geojson","shape","_iteratorError1","key","value","JSON","Object","componentDidUpdate","prevProps","prevState","shouldWeUpdate","bumpVersion","updateToVersion","version","updateStart","updateDuration","Date","updateFn","time","debugPerformance","populateMap","timeBasis","_ref","zoomIndex","attachBasemap","loadBasemap","layerspec","layer","isVisible","progressivelyLoadShapes","addShapes","zoom_to","polygon","a","shapeGeojson","notClickable","style","poly","lon","lat","geometry","firstLabelId","updateSources","force","mapIsVisible","setUpMap","filterOverlaps","boundingBox","labelId","count","polygonData","type","polygonSource","pointData","pointSource","addShape","fit_bounds","current","zoomToItems","items","options","_this_handler_maps","extendBoxes","zoomToAll","zoomTo","React","colors","useColors","isScreenshot","useScreenshotMode","_props_bbox_bottomLeft","_props_bbox_topRight","mapBorderWidth","mapBorderRadius","MapComponent","showHistoricalCDs","_useSetting","relatedCheckboxSettings","useSettings","relatedSettingsKeys","ArticleMap","Navigator","window","longname","computeShapesToRender","relateds","relatedPolygons","getRelated","x","related","result","isHistoricalCD","relationshipKey","color","randomColor","lngToWebMercatorX","lng","latToWebMercatorY","area","x2","y2","ins","mapsWithCoordBox","biggestMap","prev","curr","onScreenWidth","onScreenHeight","computeAspectRatio"],"mappings":"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"}