{"version":3,"file":"786.js","sources":["webpack://assets/./src/components/plots.css","webpack://assets/./src/components/table.css","webpack://assets/./src/components/ArticleWarnings.tsx","webpack://assets/./src/components/Icon.tsx","webpack://assets/./src/data/metadata.ts","webpack://assets/./src/components/ExternalLiinks.tsx","webpack://assets/./src/data/relatedButtonColors.ts","webpack://assets/./src/components/related-button.tsx","webpack://assets/./src/components/article-panel.tsx","webpack://assets/./src/components/editable-field.tsx","webpack://assets/./src/components/plots.css?871a","webpack://assets/./src/components/plots-general.tsx","webpack://assets/./src/components/plots-histogram.tsx","webpack://assets/./src/components/plots-timeseries.tsx","webpack://assets/./src/components/plots.tsx","webpack://assets/./src/components/table.css?1d6c","webpack://assets/./src/components/table.tsx","webpack://assets/./src/components/supertable.tsx","webpack://assets/./src/utils/Property.ts","webpack://assets/./src/utils/transpose.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.histogram-svg-panel svg {\n    max-height: 100%;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/plots.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,gBAAgB;AACpB\",\"sourcesContent\":[\".histogram-svg-panel svg {\\n    max-height: 100%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.value_unit {\n    text-align: left;\n    padding-right: 1em;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/table.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,gBAAgB;IAChB,kBAAkB;AACtB\",\"sourcesContent\":[\".value_unit {\\n    text-align: left;\\n    padding-right: 1em;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import React, { ReactNode } from 'react'\n\nimport { useColors } from '../page_template/colors'\nimport { checkboxCategoryName, sourceEnabledKey, useSettings } from '../page_template/settings'\nimport { groupYearKeys, useAvailableYears, useDataSourceCheckboxes, useGroupsMissingYearSelection, useSelectedGroups } from '../page_template/statistic-settings'\nimport { Category, Group } from '../page_template/statistic-tree'\n\nimport { useScreenshotMode } from './screenshot'\n\nexport function ArticleWarnings(): ReactNode {\n    const screenshotMode = useScreenshotMode()\n    const selectedGroups = useSelectedGroups()\n    const groupsMissingYearSelection = useGroupsMissingYearSelection()\n    const availableYears = useAvailableYears()\n    const dataSourceCheckboxes = useDataSourceCheckboxes()\n    const settings = useSettings(groupYearKeys())\n\n    const allUncheckedSourceGroups = dataSourceCheckboxes\n        .filter(({ category, checkboxSpecs }) => checkboxSpecs\n            .every(({ name, forcedOn }) => !forcedOn && !settings[sourceEnabledKey({ category, name })]))\n\n    if (screenshotMode) {\n        return null\n    }\n    const warnings = selectedGroups.length === 0\n        ? [\n                <b key=\"noneSelected\">\n                    No Statistic Categories are selected\n                </b>,\n            ]\n        : [\n                ...groupsMissingYearSelection.map(groupOrCategory => (\n                    <>\n                        To see\n                        {' '}\n                        <b><HierarchicalName groupOrCategory={groupOrCategory} /></b>\n                        {' statistics, select '}\n                        <YearList years={availableYears.filter(year => groupOrCategory.years.has(year))} />\n                        .\n                    </>\n                )),\n                ...allUncheckedSourceGroups.map(({ category }) => (\n                    <>\n                        All statistics from the\n                        {' '}\n                        <b>{checkboxCategoryName(category)}</b>\n                        {' '}\n                        are disabled.\n                    </>\n                )),\n            ]\n\n    if (warnings.length === 0) {\n        return null\n    }\n\n    return <WarningBox warnings={warnings} />\n}\n\nfunction WarningBox({ warnings }: { warnings: ReactNode[] }): ReactNode {\n    const colors = useColors()\n\n    return (\n        <div\n            style={{\n                backgroundColor: colors.slightlyDifferentBackgroundFocused,\n                borderRadius: '5px',\n            }}\n            data-test-id=\"article-warnings\"\n        >\n            <ul style={{\n                paddingTop: '1em',\n                paddingBottom: '1em',\n            }}\n            >\n                {\n                    warnings.map(\n                        (warning, key) => (\n                            <li key={key}>\n                                {warning}\n                            </li>\n                        ),\n                    )\n                }\n            </ul>\n        </div>\n    )\n}\n\nfunction HierarchicalName({ groupOrCategory }: { groupOrCategory: Group | Category }): ReactNode {\n    switch (groupOrCategory.kind) {\n        case 'Group':\n            return `${groupOrCategory.parent.name} > ${groupOrCategory.name}`\n        case 'Category':\n            return groupOrCategory.name\n    }\n}\n\nfunction YearList({ years }: { years: number[] }): ReactNode {\n    switch (years.length) {\n        case 0:\n            return null\n        case 1:\n            return <b>{years[0]}</b>\n        case 2:\n            return (\n                <>\n                    <b>{years[0]}</b>\n                    {' or '}\n                    <b>{years[1]}</b>\n                </>\n            )\n        case 3:\n            return (\n                <>\n                    <b>{years[0]}</b>\n                    {', '}\n                    <b>{years[1]}</b>\n                    {', or '}\n                    <b>{years[2]}</b>\n                </>\n            )\n        default:\n            return (\n                <>\n                    <b>{years[0]}</b>\n                    {', '}\n                    <YearList years={years.slice(1)} />\n                </>\n            )\n    }\n}\n","/**\n * This only uses the transparency of the icon image to display the specified color.\n */\n\nimport React, { CSSProperties, ReactNode } from 'react'\n\nexport function Icon({ size, color, src, style }: { size: string, color: string, src: string, style?: Partial<CSSProperties> }): ReactNode {\n    return (\n        <div style={{ backgroundColor: color, width: size, height: size, maskImage: `url(${src})`, maskRepeat: 'no-repeat', maskSize: 'contain', maskPosition: 'center', ...style }} />\n    )\n}\n","export default {\n    \"displayed_metadata\": [\n        {\n            \"index\": 0,\n            \"name\": \"US Census GeoID\"\n        },\n        {\n            \"index\": 1,\n            \"name\": \"StatCan GeoCode\"\n        },\n        {\n            \"index\": 4,\n            \"name\": \"ISO Code\"\n        }\n    ],\n    \"external_link_metadata\": [\n        {\n            \"index\": 2,\n            \"site\": \"Wikidata\",\n            \"link_prefix\": \"https://www.wikidata.org/wiki/\",\n            \"normalizer\": null\n        },\n        {\n            \"index\": 3,\n            \"site\": \"Wikipedia\",\n            \"link_prefix\": \"https://en.wikipedia.org/wiki/\",\n            \"normalizer\": \"wikipedia\"\n        }\n    ]\n} as const","import React, { ReactNode } from 'react'\n\nimport metadata from '../data/metadata'\nimport { Colors } from '../page_template/color-themes'\nimport { useColors } from '../page_template/colors'\nimport { assert } from '../utils/defensive'\nimport { IMetadata } from '../utils/protos'\n\ntype ExternalLinkSpec = (typeof metadata.external_link_metadata)[number]\ntype NormalizerSpec = ExternalLinkSpec['normalizer']\n\nexport function ExternalLinks(props: { metadataProtos: IMetadata[] }): ReactNode {\n    const elementsEach = metadata.external_link_metadata.flatMap((meta) => {\n        const foundMetadata = props.metadataProtos.find(m => m.metadataIndex === meta.index)\n        if (foundMetadata === undefined) {\n            return []\n        }\n        return [<ExternalLink key={meta.index} meta={meta} metaProto={foundMetadata} />]\n    })\n\n    return <>{elementsEach}</>\n}\n\nfunction ExternalLink(props: { meta: ExternalLinkSpec, metaProto: IMetadata }): ReactNode {\n    const colors = useColors()\n    const sv = props.metaProto.stringValue\n    assert(sv !== undefined && sv !== null, `ExternalLink: stringValue is undefined for metadata index ${props.meta.index}`)\n    return (\n        <a\n            href={props.meta.link_prefix + computeLinkSuffix(props.meta.normalizer, sv)}\n        >\n            <img\n                style={{ height: '36px', marginRight: '8px', verticalAlign: 'middle' }}\n                src={imageURLFor(props.meta.site, colors)}\n            />\n        </a>\n    )\n}\n\nfunction computeLinkSuffix(normalizer: NormalizerSpec, sv: string): string {\n    switch (normalizer) {\n        case null:\n            return sv\n        case 'wikipedia':\n            return sv.replace(/ /g, '_')\n    }\n}\n\nfunction imageURLFor(site: ExternalLinkSpec['site'], colors: Colors): string {\n    switch (site) {\n        case 'Wikipedia':\n            return '/wikipedia.svg'\n        case 'Wikidata':\n            return colors.wikidataURL\n    }\n}\n","export default [\n    [\n        \"International\",\n        \"red\"\n    ],\n    [\n        \"International City\",\n        \"red\"\n    ],\n    [\n        \"US Subdivision\",\n        \"blue\"\n    ],\n    [\n        \"US City\",\n        \"blue\"\n    ],\n    [\n        \"Census\",\n        \"cyan\"\n    ],\n    [\n        \"Political\",\n        \"purple\"\n    ],\n    [\n        \"Oddball\",\n        \"darkGrey\"\n    ],\n    [\n        \"Kavi\",\n        \"brown\"\n    ],\n    [\n        \"School\",\n        \"yellow\"\n    ],\n    [\n        \"Small\",\n        \"pink\"\n    ],\n    [\n        \"Native\",\n        \"green\"\n    ]\n] as const","import React, { ReactNode, useContext, useId } from 'react'\n\nimport relatedButtonColors from '../data/relatedButtonColors'\nimport type_ordering_idx from '../data/type_ordering_idx'\nimport type_to_type_category from '../data/type_to_type_category'\nimport { Navigator } from '../navigation/Navigator'\nimport { HueColors } from '../page_template/color-themes'\nimport { useColors } from '../page_template/colors'\nimport { relationshipKey, useSetting } from '../page_template/settings'\nimport { useUniverse } from '../universe'\nimport { DefaultMap } from '../utils/DefaultMap'\nimport { mixWithBackground } from '../utils/color'\nimport { isHistoricalCD } from '../utils/is_historical'\nimport { useMobileLayout } from '../utils/responsive'\nimport { displayType } from '../utils/text'\n\nimport { CheckboxSetting } from './sidebar'\n\ninterface Region { rowType: string, longname: string, shortname: string }\n\nconst propForRegionTypes = 0.20\nconst spacing = 2\n\nfunction colorsEach(colors: HueColors): Record<string, string> {\n    const keys: [string, string][] = relatedButtonColors.map(\n        ([typ, color]) => [typ, colors[color]],\n    )\n    return Object.fromEntries(keys)\n}\n\nfunction useRelatedColor(rowType: string, colorIntensity: number): string {\n    const colors = useColors()\n    const typeCategory = type_to_type_category[rowType]\n    const color = colorsEach(colors.hueColors)[typeCategory]\n    return mixWithBackground(color, (colors.mixPct + (100 - colors.mixPct) * (1 - colorIntensity)) / 100, colors.background)\n}\n\nfunction RelatedButton(props: { region: Region }): ReactNode {\n    const currentUniverse = useUniverse()\n    const colors = useColors()\n    const navContext = useContext(Navigator.Context)\n    return (\n        <li style={{\n            display: 'flex',\n            margin: `${spacing}px`,\n        }}\n        >\n            <a\n                className=\"serif\"\n                style={{\n                    color: colors.textMain,\n                    backgroundColor: useRelatedColor(props.region.rowType, 1),\n                    textDecoration: 'none',\n                    padding: '2px 6px 2px 6px',\n                    borderRadius: '5px',\n                    fontWeight: 400,\n                    fontSize: useMobileLayout() ? '12pt' : '8pt',\n                }}\n                {...navContext.link(\n                    { kind: 'article', longname: props.region.longname, universe: currentUniverse },\n                    { scroll: { kind: 'position', top: 0 } },\n                )}\n            >\n                {props.region.shortname}\n            </a>\n        </li>\n    )\n}\n\nfunction Label(props: { checkId: string, children: ReactNode, fontWeight: number }): ReactNode {\n    return (\n        <div\n            className=\"serif\"\n            style={{\n                fontSize: useMobileLayout() ? '12pt' : '10pt',\n                fontWeight: props.fontWeight,\n                alignContent: 'center',\n                margin: `${spacing}px`,\n            }}\n        >\n            <label htmlFor={props.checkId}>\n                {props.children}\n            </label>\n        </div>\n    )\n}\n\nfunction RelationshipGroup(props: { regions: Region[], checkId: string, relationshipType: string, groupIndex: number, buttonType: string, numGroups: number }): ReactNode {\n    function displayName(name: string): string {\n        name = name.replaceAll('_', ' ')\n        // title case\n        name = name.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.slice(1).toLowerCase()\n        })\n        return name\n    }\n\n    const backgroundColor = useRelatedColor(props.buttonType, props.groupIndex % 2 === 0 ? 0.3 : 0.4)\n\n    return (\n        <ul\n            style={{\n                display: 'flex',\n                flexFlow: 'row wrap',\n                paddingInlineStart: '0px',\n                listStyleType: 'none',\n                padding: `${spacing}px`,\n                paddingLeft: `${spacing}px`, // Prevents errors\n                ...(props.numGroups > 1\n                    ? {\n                            backgroundColor,\n                            // Border radius if first or last group\n                            borderRadius: props.groupIndex === 0 ? '5px 5px 0 0' : (props.groupIndex === props.numGroups - 1 ? '0 0 5px 5px' : undefined),\n                            paddingLeft: `${2 * spacing}px`,\n                        }\n                    : {}),\n            }}\n        >\n            <Label checkId={props.checkId} fontWeight={400}>\n                {displayName(props.relationshipType)}\n            </Label>\n            {\n                props.regions.map((row, i) => (\n                    <RelatedButton\n                        key={i}\n                        region={row}\n                    />\n                ),\n                )\n            }\n        </ul>\n    )\n}\n\nfunction Row(props: {\n    articleType: string\n    buttonType: string\n    regions: Map<string, Region[]>\n    rowIndex: number\n    totalRows: number\n}): ReactNode {\n    const settingKey = relationshipKey(props.articleType, props.buttonType)\n\n    const checkId = useId()\n\n    const universe = useUniverse()\n\n    return (\n        <li style={{\n            paddingInlineStart: '0px',\n            listStyleType: 'none',\n            margin: 0,\n            width: '100%',\n            display: 'flex',\n            alignItems: 'center',\n            position: 'relative',\n            backgroundColor: useRelatedColor(props.buttonType, props.rowIndex % 2 === 0 ? 0.1 : 0.2),\n            // Border radius if first or last row\n            borderRadius: props.rowIndex === 0 ? '5px 5px 0 0' : (props.rowIndex === props.totalRows - 1 ? '0 0 5px 5px' : undefined),\n        }}\n        >\n            <div style={{\n                display: 'flex',\n                width: `${100 * propForRegionTypes}%`,\n                alignItems: 'center',\n            }}\n            >\n                <CheckboxSetting\n                    name=\"\"\n                    settingKey={settingKey}\n                    classNameToUse=\"related_checkbox\"\n                    id={checkId}\n                />\n                <Label checkId={checkId} fontWeight={500}>\n                    {displayType(universe, props.buttonType)}\n                </Label>\n            </div>\n            <ul style={{\n                paddingInlineStart: '0px',\n                listStyleType: 'none',\n                margin: 0,\n                width: `${100 * (1 - propForRegionTypes)}%`,\n                display: 'flex',\n                flexDirection: 'column',\n                padding: props.regions.size > 1 ? `${2 * spacing}px` : `0 0 0 ${3 * spacing}px`,\n            }}\n            >\n                {\n                    Array.from(props.regions).map(([relationshipType, regions], i) => {\n                        return (\n                            <RelationshipGroup\n                                key={relationshipType}\n                                regions={regions}\n                                checkId={checkId}\n                                relationshipType={relationshipType}\n                                groupIndex={i}\n                                buttonType={props.buttonType}\n                                numGroups={props.regions.size}\n                            />\n                        )\n                    })\n                }\n            </ul>\n        </li>\n    )\n}\n\nexport function Related(props: { articleType: string, related: { relationshipType: string, buttons: Region[] }[] }): ReactNode {\n    // buttons[rowType][relationshipType] = <list of buttons>\n    const [showHistoricalCds] = useSetting('show_historical_cds')\n    const buttons = new DefaultMap<string, DefaultMap<string, Region[]>>(() => new DefaultMap(() => []))\n    for (const relateds of props.related) {\n        for (const button of relateds.buttons) {\n            buttons.get(button.rowType).get(relateds.relationshipType).push(button)\n        }\n    }\n\n    // get a sorted list of keys of buttons\n    const buttonKeys = Array.from(buttons.keys())\n        .sort((a, b) => type_ordering_idx[a] - type_ordering_idx[b])\n        .filter(buttonKey => showHistoricalCds || !isHistoricalCD(buttonKey))\n\n    const elements = buttonKeys.map((key, i) => (\n        <Row\n            key={key}\n            buttonType={key}\n            regions={buttons.get(key)}\n            articleType={props.articleType}\n            rowIndex={i}\n            totalRows={buttonKeys.length}\n        />\n    ))\n\n    return (\n        <ul style={{\n            margin: '1em 0',\n            paddingInlineStart: '0px',\n            listStyleType: 'none',\n        }}\n        >\n            {elements}\n        </ul>\n    )\n}\n","import '../common.css'\nimport './article.css'\n\nimport React, { ReactNode, useContext, useRef } from 'react'\n\nimport { Navigator } from '../navigation/Navigator'\nimport { sanitize } from '../navigation/links'\nimport { useColors } from '../page_template/colors'\nimport { rowExpandedKey, useSetting, useSettings } from '../page_template/settings'\nimport { groupYearKeys, StatGroupSettings } from '../page_template/statistic-settings'\nimport { statParents } from '../page_template/statistic-tree'\nimport { PageTemplate } from '../page_template/template'\nimport { useUniverse } from '../universe'\nimport { Article, IRelatedButtons } from '../utils/protos'\nimport { useComparisonHeadStyle, useHeaderTextClass, useMobileLayout, useSubHeaderTextClass } from '../utils/responsive'\nimport { NormalizeProto } from '../utils/types'\n\nimport { ArticleWarnings } from './ArticleWarnings'\nimport { ExternalLinks } from './ExternalLiinks'\nimport { QuerySettingsConnection } from './QuerySettingsConnection'\nimport { generateCSVDataForArticles, CSVExportData } from './csv-export'\nimport { ArticleRow } from './load-article'\nimport { Map } from './map'\nimport { Related } from './related-button'\nimport { ScreencapElements, useScreenshotMode } from './screenshot'\nimport { SearchBox } from './search'\nimport { CellSpec, PlotSpec, TableContents } from './supertable'\nimport { ColumnIdentifier } from './table'\n\nexport function ArticlePanel({ article, rows }: { article: Article, rows: (settings: StatGroupSettings) => ArticleRow[][] }): ReactNode {\n    const headersRef = useRef<HTMLDivElement>(null)\n    const tableRef = useRef<HTMLDivElement>(null)\n    const mapRef = useRef<HTMLDivElement>(null)\n\n    const screencapElements = (): ScreencapElements => ({\n        path: `${sanitize(article.longname)}.png`,\n        overallWidth: tableRef.current!.offsetWidth * 2,\n        elementsToRender: [headersRef.current!, tableRef.current!, mapRef.current!],\n    })\n\n    const headerTextClass = useHeaderTextClass()\n    const subHeaderTextClass = useSubHeaderTextClass()\n    const comparisonHeadStyle = useComparisonHeadStyle('right')\n\n    const settings = useSettings(groupYearKeys())\n    const filteredRows = rows(settings)[0]\n\n    const csvData = generateCSVDataForArticles([article], [filteredRows], true)\n    const csvFilename = `${sanitize(article.longname)}.csv`\n    const csvExportData: CSVExportData = { csvData, csvFilename }\n\n    return (\n        <>\n            <QuerySettingsConnection />\n            <PageTemplate\n                screencapElements={screencapElements}\n                csvExportData={csvExportData}\n                hasUniverseSelector={true}\n                universes={article.universes}\n            >\n                <div>\n                    <div ref={headersRef}>\n                        <div className={headerTextClass}>{article.shortname}</div>\n                        <div className={subHeaderTextClass}>{article.longname}</div>\n                    </div>\n                    <div style={{ marginBlockEnd: '16px' }}></div>\n\n                    <div ref={tableRef}>\n                        <ArticleTable\n                            filteredRows={filteredRows}\n                            article={article}\n                        />\n                    </div>\n\n                    <p></p>\n\n                    <div ref={mapRef}>\n                        <Map\n                            longname={article.longname}\n                            related={article.related as NormalizeProto<IRelatedButtons>[]}\n                            articleType={article.articleType}\n                            basemap={{ type: 'osm' }}\n                            attribution=\"startVisible\"\n                        />\n                    </div>\n\n                    <div style={{ marginBlockEnd: '1em' }}></div>\n\n                    <div style={{ display: 'flex', alignItems: 'center' }}>\n                        <div style={{ flex: '0 0 auto', marginRight: '1em' }}>\n                            <ExternalLinks metadataProtos={article.metadata} />\n                        </div>\n                        <div style={{ flex: '0 0 auto', marginRight: '1em' }}>\n                            <div className=\"serif\" style={comparisonHeadStyle}>Compare to: </div>\n                        </div>\n                        <div style={{ flex: '1 1 auto' }}>\n                            <ComparisonSearchBox longname={article.longname} type={article.articleType} />\n                        </div>\n                    </div>\n\n                    <Related\n                        related={article.related as NormalizeProto<IRelatedButtons>[]}\n                        articleType={article.articleType}\n                    />\n                </div>\n            </PageTemplate>\n        </>\n    )\n}\n\ntype NameSpec = Extract<CellSpec, { type: 'statistic-name' }>\n\nexport function computeNameSpecsWithGroups(nameSpecs: NameSpec[]): { updatedNameSpecs: NameSpec[], groupNames: (string | undefined)[] } {\n    const updatedNameSpecs: NameSpec[] = []\n    const groupNames: (string | undefined)[] = []\n\n    for (const spec of nameSpecs) {\n        const statParent = statParents.get(spec.row.statpath)\n\n        const groupRows = nameSpecs.filter(s => statParents.get(s.row.statpath)?.group.id === statParent?.group.id)\n        const groupSize = groupRows.length\n\n        const groupSourcesSet = new Set(\n            groupRows\n                .map(s => statParents.get(s.row.statpath)?.source)\n                .filter(source => source !== null)\n                .map(source => source!.name),\n        )\n        const groupHasMultipleSources = groupSourcesSet.size > 1\n\n        const sourceName = statParent?.source?.name\n        let displayName = groupSize > 1 ? (statParent?.indentedName ?? spec.row.renderedStatname) : spec.row.renderedStatname\n        if (groupHasMultipleSources && sourceName) {\n            displayName = `${displayName} [${sourceName}]`\n        }\n\n        updatedNameSpecs.push({\n            ...spec,\n            isIndented: groupSize > 1,\n            displayName,\n        })\n        groupNames.push(groupSize > 1 ? statParent?.group.name : undefined)\n    }\n\n    return { updatedNameSpecs, groupNames }\n}\n\nfunction ArticleTable(props: {\n    filteredRows: ArticleRow[]\n    article: Article\n}): ReactNode {\n    const colors = useColors()\n    const expandedSettings = useSettings(props.filteredRows.map(row => rowExpandedKey(row.statpath)))\n    const expandedEach = props.filteredRows.map(row => expandedSettings[rowExpandedKey(row.statpath)])\n    const currentUniverse = useUniverse()\n    const [simpleOrdinals] = useSetting('simple_ordinals')\n    const navContext = useContext(Navigator.Context)\n\n    const { widthLeftHeader, columnWidth } = useWidths()\n\n    const statNameSpecs: Extract<CellSpec, { type: 'statistic-name' }>[] = props.filteredRows.map(row => ({\n        type: 'statistic-name',\n        longname: props.article.longname,\n        row,\n        currentUniverse,\n    }))\n\n    const { updatedNameSpecs: leftHeaderSpecs, groupNames } = computeNameSpecsWithGroups(statNameSpecs)\n\n    const onlyColumns: ColumnIdentifier[] = ['statval', 'statval_unit', 'statistic_percentile', 'statistic_ordinal', 'pointer_in_class', 'pointer_overall']\n    const cellSpecs: CellSpec[][] = props.filteredRows.map(row => [({\n        type: 'statistic-row',\n        longname: props.article.longname,\n        row,\n        onNavigate: (newArticle) => {\n            void navContext.navigate({\n                kind: 'article',\n                longname: newArticle,\n                universe: currentUniverse,\n            }, { history: 'push', scroll: { kind: 'none' } })\n        },\n        simpleOrdinals,\n        onlyColumns,\n    })])\n\n    const plotSpecs: (PlotSpec | undefined)[] = expandedEach.map((expanded, index) => expanded\n        ? {\n                statDescription: props.filteredRows[index].renderedStatname,\n                plotProps: [{ ...props.filteredRows[index], color: colors.hueColors.blue, shortname: props.article.shortname, longname: props.article.longname, sharedTypeOfAllArticles: props.article.articleType }], // TODO add other articles when comparison is implemented\n            }\n        : undefined,\n    )\n\n    const topLeftSpec = { type: 'top-left-header' } satisfies CellSpec\n\n    return (\n        <div className=\"stats_table\">\n            <TableContents\n                leftHeaderSpec={{ leftHeaderSpecs, groupNames }}\n                rowSpecs={cellSpecs}\n                horizontalPlotSpecs={plotSpecs}\n                verticalPlotSpecs={[]}\n                topLeftSpec={topLeftSpec}\n                widthLeftHeader={widthLeftHeader}\n                columnWidth={columnWidth}\n                onlyColumns={onlyColumns}\n                simpleOrdinals={simpleOrdinals}\n            />\n            <ArticleWarnings />\n        </div>\n    )\n}\n\nexport function StatisticHeader(props: {\n    longname: string\n    groupName?: string\n}): ReactNode {\n    return (\n        <div style={{ width: '100%', padding: '1px' }}>\n            <span className=\"serif value\">\n                <span>{props.groupName}</span>\n            </span>\n        </div>\n    )\n}\n\nfunction ComparisonSearchBox({ longname, type }: { longname: string, type: string }): ReactNode {\n    const currentUniverse = useUniverse()\n    const navContext = useContext(Navigator.Context)\n    return (\n        <SearchBox\n            style={{ ...useComparisonHeadStyle(), width: '100%' }}\n            placeholder=\"Other region...\"\n            link={x => navContext.link({\n                kind: 'comparison',\n                universe: currentUniverse,\n                longnames: [longname, x],\n            }, { scroll: { kind: 'position', top: 0 } })}\n            autoFocus={false}\n            prioritizeArticleType={type}\n        />\n    )\n}\n\nfunction useWidths(): { widthLeftHeader: number, columnWidth: number } {\n    const [simpleOrdinals] = useSetting('simple_ordinals')\n    const isMobile = useMobileLayout()\n    const screenshotMode = useScreenshotMode()\n\n    // TODO clean this up and reduce the amount of magic numbers\n    const nonPointerColumns = 15 + 10 + (simpleOrdinals ? 7 + 8 : 17 + 25)\n    const pointerColumns = 8 * (screenshotMode ? 0 : (!simpleOrdinals && isMobile ? 1 : 2))\n    const numerator = 31\n    const denominator = nonPointerColumns + pointerColumns + numerator\n    const widthLeftHeader = 100 * (numerator / denominator)\n    const columnWidth = 100 - widthLeftHeader\n    return { widthLeftHeader, columnWidth }\n}\n","import React, { CSSProperties, ReactNode, useRef, useState, useEffect } from 'react'\nimport ContentEditable, { ContentEditableEvent } from 'react-contenteditable'\n\nexport function EditableString(props: { content: string, onNewContent: (content: string) => void, style: CSSProperties, inputMode: 'text' | 'decimal' }): ReactNode {\n    /*\n     * This code is weird because the `ContentEditable` needs to use refs.\n     * See https://www.npmjs.com/package/react-contenteditable\n     */\n    const contentEditable: React.Ref<HTMLElement> = useRef(null)\n    const html = useRef(props.content.toString())\n    const [, setCounter] = useState(0)\n\n    // Otherwise, this component can display the wrong number when props change\n    useEffect(() => {\n        html.current = props.content.toString()\n        setCounter(count => count + 1)\n    }, [props.content])\n\n    const handleChange = (evt: ContentEditableEvent): void => {\n        html.current = evt.target.value\n    }\n\n    const handleSubmit = (): void => {\n        const content = contentEditable.current!.innerText\n        if (content !== props.content) {\n            props.onNewContent(content)\n        }\n    }\n\n    const selectAll = (): void => {\n        setTimeout(() => {\n            const range = document.createRange()\n            range.selectNodeContents(contentEditable.current!)\n            const selection = window.getSelection()\n            selection?.removeAllRanges()\n            selection?.addRange(range)\n        }, 0)\n    }\n\n    return (\n        <ContentEditable\n            className=\"editable_content\"\n            style={props.style}\n            innerRef={contentEditable}\n            html={html.current}\n            disabled={false}\n            onChange={handleChange}\n            onKeyDown={(e: React.KeyboardEvent) => {\n                if (e.key === 'Enter') {\n                    handleSubmit()\n                    e.preventDefault()\n                }\n            }}\n            onBlur={handleSubmit}\n            tagName=\"span\" // Use a custom HTML tag (uses a div by default)\n            inputMode={props.inputMode}\n            onFocus={selectAll}\n        />\n    )\n}\n\nexport function EditableNumber(props: { number: number, onNewNumber: (number: number) => void }): ReactNode {\n    const onNewContent = (content: string): void => {\n        const number = parseInt(content)\n        if (!Number.isNaN(number) && number !== props.number) {\n            props.onNewNumber(number)\n        }\n    }\n    return (\n        <EditableString\n            content={props.number.toString()}\n            onNewContent={onNewContent}\n            style={{ minWidth: '2em', display: 'inline-block' }}\n            inputMode=\"decimal\"\n        />\n    )\n}\n","\n      import API from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../node_modules/css-loader/dist/cjs.js!./plots.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../node_modules/css-loader/dist/cjs.js!./plots.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import * as Plot from '@observablehq/plot'\nimport React, { ReactElement, useCallback, useEffect, useRef } from 'react'\n\nimport { useTranspose } from '../utils/transpose'\n\nimport { useScreenshotMode } from './screenshot'\n\nimport './plots.css'\n\ninterface DetailedPlotSpec {\n    marks: Plot.Markish[]\n    xlabel: string\n    ylabel: string\n    ydomain?: [number, number]\n    legend?: { legend: boolean, range: string[], domain: string[] }\n}\n\nexport function PlotComponent(props: {\n    plotSpec: (transpose: boolean) => DetailedPlotSpec\n    settingsElement: (makePlot: () => HTMLElement) => ReactElement\n}): ReactElement {\n    const transpose = useTranspose()\n\n    const plotRef = useRef<HTMLDivElement>(null)\n\n    const plotSpec = props.plotSpec\n\n    const plotConfig = useCallback((transposeConfig: boolean): Plot.PlotOptions => {\n        const { marks, xlabel, ylabel, ydomain, legend } = plotSpec(transposeConfig)\n        const result: Plot.PlotOptions = {\n            marks,\n            x: {\n                label: xlabel,\n            },\n            y: {\n                label: ylabel,\n                domain: ydomain,\n            },\n            grid: false,\n            width: transposeConfig ? undefined : 1000,\n            height: transposeConfig ? 1000 : undefined,\n            style: {\n                fontSize: transposeConfig ? '2em' : '1em',\n                fontFamily: 'Jost, Arial, sans-serif',\n            },\n            marginTop: 80,\n            marginBottom: transposeConfig ? 80 : 40,\n            marginLeft: 80,\n            color: legend,\n        }\n        if (transposeConfig) {\n            result.x = {\n                label: ylabel,\n                domain: ydomain,\n            }\n            result.y = {\n                label: xlabel,\n                reverse: true,\n            }\n        }\n        return result\n    }, [plotSpec])\n\n    useEffect(() => {\n        if (plotRef.current) {\n            const plot = Plot.plot(plotConfig(transpose))\n            plotRef.current.innerHTML = ''\n            plotRef.current.appendChild(plot)\n        }\n    }, [props.plotSpec, transpose, plotConfig])\n\n    const screenshotMode = useScreenshotMode()\n\n    const transposeTopMargin = '35px'\n\n    // put a button panel in the top right corner\n    return (\n        <>\n            <div\n                className=\"histogram-svg-panel\" // tied to CSS\n                ref={plotRef}\n                style={\n                    {\n                        width: '100%',\n                        height: transpose ? `calc(100% - ${transposeTopMargin})` : undefined,\n                        position: transpose ? 'relative' : undefined,\n                        top: transpose ? transposeTopMargin : undefined,\n                    }\n                }\n            >\n            </div>\n            {screenshotMode\n                ? undefined\n                : (\n                        <div style={{ zIndex: 1000, position: 'absolute', top: 0, right: 0, left: transpose ? 0 : undefined }}>\n                            {props.settingsElement(() => {\n                                const plot = Plot.plot(plotConfig(false))\n                                const div = document.createElement('div')\n                                div.style.width = '1000px'\n                                div.style.height = '500px'\n                                div.appendChild(plot)\n                                return div\n                            })}\n                        </div>\n                    )}\n        </>\n    )\n}\n","import * as Plot from '@observablehq/plot'\nimport React, { ReactElement, ReactNode, useCallback, useContext, useState } from 'react'\n\n// imort Observable plot\nimport { Navigator } from '../navigation/Navigator'\nimport { Colors } from '../page_template/color-themes'\nimport { useColors } from '../page_template/colors'\nimport { HistogramType, useSetting } from '../page_template/settings'\nimport { useUniverse } from '../universe'\nimport { IHistogram } from '../utils/protos'\nimport { useTranspose } from '../utils/transpose'\n\nimport { PlotComponent } from './plots-general'\nimport { createScreenshot } from './screenshot'\nimport { SearchBox } from './search'\nimport { CheckboxSetting } from './sidebar'\n\nconst yPad = 0.025\n\ninterface HistogramProps {\n    shortname: string\n    longname: string\n    histogram: IHistogram\n    color: string\n    universeTotal: number\n}\n\nexport function Histogram(props: { histograms: HistogramProps[], statDescription: string, sharedTypeOfAllArticles?: string }): ReactNode {\n    const [histogramType] = useSetting('histogram_type')\n    const [useImperial] = useSetting('use_imperial')\n    const [relative] = useSetting('histogram_relative')\n    const binMin = props.histograms[0].histogram.binMin!\n    const binSize = props.histograms[0].histogram.binSize!\n    for (const histogram of props.histograms) {\n        if (histogram.histogram.binMin !== binMin || histogram.histogram.binSize !== binSize) {\n            throw new Error('histograms have different binMin or binSize')\n        }\n    }\n    const settingsElement = (makePlot: () => HTMLElement): ReactElement => (\n        <HistogramSettings makePlot={makePlot} shortnames={props.histograms.map(h => h.shortname)} longnames={props.histograms.map(h => h.longname)} sharedTypeOfAllArticles={props.sharedTypeOfAllArticles} />\n    )\n\n    const systemColors = useColors()\n\n    const plotSpec = useCallback(\n        (transpose: boolean) => {\n            const title = props.histograms.length === 1 ? props.histograms[0].shortname : ''\n            const colors = props.histograms.map(h => h.color)\n            const shortnames = props.histograms.map(h => h.shortname)\n            const renderY = relative ? (y: number) => `${y.toFixed(2)}%` : (y: number) => renderNumberHighlyRounded(y, 2)\n\n            const [xIdxStart, xIdxEnd] = histogramBounds(props.histograms)\n            const xidxs = Array.from({ length: xIdxEnd - xIdxStart }, (_, i) => i + xIdxStart)\n            const [xAxisMarks, renderX] = xAxis(xidxs, binSize, binMin, useImperial, transpose)\n            const [marks, maxValue] = createHistogramMarks(props.histograms, xidxs, histogramType, relative, renderX, renderY, transpose, systemColors)\n            marks.push(\n                ...xAxisMarks,\n                ...yAxis(maxValue, transpose),\n            )\n            marks.push(Plot.text([title], { frameAnchor: 'top', dy: -40 }))\n            const xlabel = `${props.statDescription} (/${useImperial ? 'mi' : 'km'}²)`\n            const ylabel = relative ? '% of total' : 'Population'\n            const ydomain: [number, number] = [maxValue * (-yPad), maxValue * (1 + yPad)]\n            const legend = props.histograms.length === 1\n                ? undefined\n                : { legend: !transpose, range: colors, domain: shortnames }\n            return { marks, xlabel, ylabel, ydomain, legend }\n        },\n        [props.histograms, binMin, binSize, relative, histogramType, useImperial, systemColors, props.statDescription],\n    )\n\n    return (\n        <PlotComponent\n            plotSpec={plotSpec}\n            settingsElement={settingsElement}\n        />\n    )\n}\n\nexport const transposeSettingsHeight = 30.5\n\nfunction HistogramSettings(props: {\n    shortnames: string[]\n    longnames: string[]\n    makePlot: () => HTMLElement\n    sharedTypeOfAllArticles?: string\n}): ReactNode {\n    const universe = useUniverse()\n    const [histogramType, setHistogramType] = useSetting('histogram_type')\n    const colors = useColors()\n    const transpose = useTranspose()\n    const navContext = useContext(Navigator.Context)\n    const [showSearchBox, setShowSearchBox] = useState(false)\n\n    // dropdown for histogram type\n    return (\n        <div\n            className=\"serif\"\n            style={{\n                backgroundColor: transpose ? undefined : colors.background,\n                padding: transpose ? undefined : '0.5em',\n                border: transpose ? undefined : `1px solid ${colors.textMain}`,\n                display: 'flex',\n                gap: '0.5em',\n                height: transpose ? `${transposeSettingsHeight}px` : undefined,\n                alignItems: transpose ? 'center' : undefined,\n                justifyContent: transpose ? 'center' : undefined,\n                position: 'relative',\n            }}\n        >\n            <img\n                src=\"/download.png\"\n                onClick={async () => {\n                    const plot = props.makePlot()\n                    document.body.appendChild(plot)\n                    await createScreenshot(\n                        {\n                            path: `${props.shortnames.join('_')}_histogram`,\n                            overallWidth: plot.offsetWidth * 2,\n                            elementsToRender: [plot],\n                            heightMultiplier: 1.2,\n                        },\n                        universe,\n                        colors,\n                    )\n                    plot.remove()\n                }}\n                width=\"20\"\n                height=\"20\"\n            />\n            <div style={{ position: 'relative' }}>\n                <img\n                    src=\"/add.png\"\n                    onClick={() => { setShowSearchBox(!showSearchBox) }}\n                    width=\"20\"\n                    height=\"20\"\n                    style={{ cursor: 'pointer' }}\n                />\n                {showSearchBox && (\n                    <div\n                        style={{\n                            position: 'absolute',\n                            top: '25px',\n                            left: '0px',\n                            backgroundColor: colors.background,\n                            border: `1px solid ${colors.textMain}`,\n                            borderRadius: '4px',\n                            padding: '0.5em',\n                            zIndex: 1000,\n                            minWidth: '200px',\n                        }}\n                    >\n                        <SearchBox\n                            style={{ width: '100%' }}\n                            placeholder=\"Add region...\"\n                            autoFocus={true}\n                            prioritizeArticleType={props.sharedTypeOfAllArticles}\n                            onChange={() => {\n                                setShowSearchBox(false)\n                            }}\n                            link={(regionName) => {\n                                return navContext.link({\n                                    kind: 'comparison',\n                                    universe: navContext.universe!,\n                                    longnames: [...props.longnames, regionName],\n                                }, { scroll: { kind: 'none' } })\n                            }}\n                        />\n                    </div>\n                )}\n            </div>\n            <select\n                value={histogramType}\n                style={{ backgroundColor: colors.background, color: colors.textMain }}\n                onChange={(e) => { setHistogramType(e.target.value as HistogramType) }}\n                className=\"serif\"\n                data-test-id=\"histogram_type\"\n            >\n                <option value=\"Line\">Line</option>\n                <option value=\"Line (cumulative)\">Line (cumulative)</option>\n                <option value=\"Bar\">Bar</option>\n            </select>\n            <CheckboxSetting name={transpose ? 'Relative' : 'Relative Histograms'} settingKey=\"histogram_relative\" testId=\"histogram_relative\" />\n        </div>\n    )\n}\n\nfunction histogramBounds(histograms: HistogramProps[]): [number, number] {\n    let xIdxEnd = Math.max(...histograms.map(histogram => histogram.histogram.counts!.length))\n    xIdxEnd += 1\n    const zerosAtFront = (arr: number[]): number => {\n        let i = 0\n        while (i < arr.length && arr[i] === 0) {\n            i++\n        }\n        return i\n    }\n    let xIdxStart = Math.min(...histograms.map(histogram => zerosAtFront(histogram.histogram.counts!)))\n\n    if (xIdxStart > 0) {\n        xIdxStart--\n    }\n\n    // round x_idx_start down to the nearest number which, when divided by 10, has a remainder of 0, 3, or 7\n\n    while (xIdxStart % 10 !== 0 && xIdxStart % 10 !== 3 && xIdxStart % 10 !== 7) {\n        xIdxStart--\n    }\n\n    // same for x_idx_end\n    while (xIdxEnd % 10 !== 0 && xIdxEnd % 10 !== 3 && xIdxEnd % 10 !== 7) {\n        xIdxEnd++\n    }\n\n    return [xIdxStart, xIdxEnd]\n}\n\ninterface Series {\n    values: { name: string, xidx: number, y: number }[]\n    color: string\n}\n\nfunction mulitipleSeriesConsistentLength(histograms: HistogramProps[], xidxs: number[], relative: boolean, isCumulative: boolean): Series[] {\n    // Create a list of series, each with the same length\n    const sum = (arr: number[]): number => arr.reduce((a, b) => a + b, 0)\n    const sumEach = histograms.map(histogram => sum(histogram.histogram.counts!))\n    const series = histograms.map((histogram, histogramIdx) => {\n        const counts = [...histogram.histogram.counts!]\n        const afterVal = 0\n        if (isCumulative) {\n            for (let i = counts.length - 2; i >= 0; i--) {\n                counts[i] += counts[i + 1]\n            }\n        }\n        return {\n            values: xidxs.map(xidx => ({\n                name: histogram.shortname,\n                xidx,\n                y: (\n                    xidx >= counts.length\n                        ? afterVal\n                        : counts[xidx] / sumEach[histogramIdx]\n                ) * (relative ? 100 : histogram.universeTotal),\n            })),\n            color: histogram.color,\n        }\n    })\n    return series\n}\n\nfunction dovetailSequences(series: { values: { xidx: number, y: number, name: string }[], color: string }[]): { xidxLeft: number, xidxRight: number, y: number, color: string }[] {\n    const seriesSingle: { xidxLeft: number, xidxRight: number, y: number, color: string }[] = []\n    for (let i = 0; i < series.length; i++) {\n        const s = series[i]\n        const width = 1 / (series.length) * 0.8\n        const off = (i - (series.length - 1) / 2) * width\n        seriesSingle.push(...s.values\n            .map(v => ({\n                xidxLeft: v.xidx + off, xidxRight: v.xidx + off + width,\n                y: v.y, color: s.color, name: v.name,\n            })),\n        )\n    }\n    return seriesSingle\n}\n\nfunction maxSequences(series: { values: { xidx: number, y: number, name: string }[] }[]): { xidx: number, y: number, names: string[], ys: number[] }[] {\n    const seriesMax: { xidx: number, y: number, names: string[], ys: number[] }[] = []\n    for (let i = 0; i < series[0].values.length; i++) {\n        seriesMax.push({\n            xidx: series[0].values[i].xidx,\n            y: Math.max(...series.map(s => s.values[i].y)),\n            names: series.map(s => s.values[i].name),\n            ys: series.map(s => s.values[i].y),\n        })\n    }\n    return seriesMax\n}\n\nfunction xAxis(xidxs: number[], binSize: number, binMin: number, useImperial: boolean, transpose: boolean): [Plot.Markish[], (x: number) => string] {\n    const xKeypoints: number[] = []\n    for (const xidx of xidxs) {\n        let lastDigit = xidx % 10\n        if (useImperial) {\n            lastDigit = (lastDigit + 4) % 10\n        }\n        if (lastDigit === 0 || lastDigit === 3 || lastDigit === 7) {\n            xKeypoints.push(xidx)\n        }\n    }\n    const adjustment = useImperial ? Math.log10(1.60934) * 2 : 0\n\n    let axis = Plot.axisX\n    let grid = Plot.gridX\n    if (transpose) {\n        axis = Plot.axisY\n        grid = Plot.gridY\n    }\n    return [\n        [\n            axis(xKeypoints, { tickFormat: d => renderPow10(d * binSize + binMin + adjustment) }),\n            grid(xKeypoints),\n        ],\n        x => `${renderNumberHighlyRounded(Math.pow(10, x * binSize + binMin + adjustment), 2)}/${useImperial ? 'mi' : 'km'}²`,\n    ]\n}\n\nfunction yAxis(maxValue: number, transpose: boolean): (Plot.CompoundMark | Plot.RuleY)[] {\n    const minNYTicks = 5\n    const idealTickGap = maxValue / minNYTicks\n    const log10TickGapTimes3 = Math.floor(Math.log10(idealTickGap) * 3)\n    const tickGapOom = Math.pow(10, Math.floor(log10TickGapTimes3 / 3))\n    const tickGapMantissa = log10TickGapTimes3 % 3 === 0 ? 1 : log10TickGapTimes3 % 3 === 1 ? 2 : 5\n    const tickGap = tickGapMantissa * tickGapOom\n    const maxValueRounded = Math.ceil(maxValue / tickGap) * tickGap\n    const yKeypoints = Array.from({ length: Math.floor(maxValueRounded / tickGap) + 1 }, (_, i) => i * tickGap)\n        .filter((_, i) => !transpose || i % 2 === 0) // If transpose, remove every other keypoint\n\n    let axis = Plot.axisY\n    let grid = Plot.gridY\n    if (transpose) {\n        axis = Plot.axisX\n        grid = Plot.gridX\n    }\n\n    return [\n        axis(yKeypoints, { tickFormat: (d: number) => renderNumberHighlyRounded(d, 1) }),\n        grid(yKeypoints),\n    ]\n}\n\nfunction pow10Moral(x: number): number {\n    // 10 ** x, but \"morally\" so, i.e., 10 ** 0.3 = 2\n    if (x < 0) {\n        return 1 / pow10Moral(-x)\n    }\n    if (x >= 1) {\n        return 10 ** Math.floor(x) * pow10Moral(x - Math.floor(x))\n    }\n    const x10 = x * 10\n    const errorRound = Math.abs(x10 - Math.round(x10))\n    if (errorRound > 0.2) {\n        return 10 ** x\n    }\n    if (Math.round(x10) === 0) {\n        return 1\n    }\n    if (Math.round(x10) === 3) {\n        return 2\n    }\n    if (Math.round(x10) === 7) {\n        return 5\n    }\n    return 10 ** x\n}\n\nfunction renderPow10(x: number): string {\n    const p10 = pow10Moral(x)\n\n    return renderNumberHighlyRounded(p10)\n}\n\nfunction renderNumberHighlyRounded(x: number, places = 0): string {\n    if (x < 1000) {\n        return x.toFixed(0)\n    }\n    if (x < 1e6) {\n        return `${(x / 1e3).toFixed(places)}k`\n    }\n    if (x < 1e9) {\n        return `${(x / 1e6).toFixed(places)}M`\n    }\n    if (x < 1e12) {\n        return `${(x / 1e9).toFixed(places)}B`\n    }\n    return x.toExponential(1)\n}\n\nfunction createHistogramMarks(\n    histograms: HistogramProps[], xidxs: number[],\n    histogramType: HistogramType, relative: boolean,\n    renderX: (x: number) => string,\n    renderY: (y: number) => string,\n    transpose: boolean,\n    colors: Colors,\n): [Plot.Markish[], number] {\n    const series = mulitipleSeriesConsistentLength(histograms, xidxs, relative, histogramType === 'Line (cumulative)')\n    const seriesSingle = dovetailSequences(series)\n\n    const maxValue = Math.max(...series.map(s => Math.max(...s.values.map(v => v.y))))\n    const tip = Plot.tip(\n        maxSequences(series),\n        (transpose ? Plot.pointerY : Plot.pointerX)({\n            x: transpose ? 'y' : 'xidx',\n            y: transpose ? 'xidx' : 'y',\n            title: (d: { names: string[], xidx: number, ys: number[] }) => {\n                let result = `Density: ${renderX(d.xidx)}\\n`\n                if (d.names.length > 1) {\n                    result += d.names.map((name: string, i: number) => `${name}: ${renderY(d.ys[i])}`).join('\\n')\n                }\n                else {\n                    result += `Frequency: ${renderY(d.ys[0])}`\n                }\n                return result\n            },\n            fill: colors.slightlyDifferentBackground,\n            stroke: colors.borderNonShadow,\n            textColor: colors.textMain,\n        }),\n    )\n    const color = histograms.length === 1 ? histograms[0].color : 'name'\n    const marks: Plot.Markish[] = []\n    if (histogramType === 'Line' || histogramType === 'Line (cumulative)') {\n        marks.push(\n            ...series.map(s => Plot.line(s.values, {\n                x: transpose ? 'y' : 'xidx', y: transpose ? 'xidx' : 'y', stroke: color, strokeWidth: 4,\n            })),\n        )\n    }\n    else {\n        marks.push(\n            (transpose\n                ? Plot.rectX(seriesSingle, {\n                    y1: 'xidxLeft',\n                    y2: 'xidxRight',\n                    x: 'y',\n                    fill: color,\n                })\n                : Plot.rectY(seriesSingle, {\n                    x1: 'xidxLeft',\n                    x2: 'xidxRight',\n                    y: 'y',\n                    fill: color,\n                })),\n        )\n    }\n    marks.push(tip)\n    return [marks, maxValue]\n}\n","import * as Plot from '@observablehq/plot'\nimport React, { ReactElement, ReactNode, useMemo } from 'react'\n\n// imort Observable plot\n\nimport { TimeSeriesExtraStat } from './load-article'\nimport { PlotComponent } from './plots-general'\n\nexport interface TimeSeriesPlotProps {\n    stat: TimeSeriesExtraStat\n    color: string\n    shortname: string\n}\n\nexport function TimeSeriesPlot(props: { stats: TimeSeriesPlotProps[] }): ReactNode {\n    // TODO this is largely unfinished. We need to make several improvements to this component\n    // for it to be production-ready.\n    // Including working with transposed comparisons\n    const settingsElement = (): ReactElement => <div></div>\n\n    const plotSpec = useMemo(\n        () => {\n            const marks = props.stats.map((stat) => {\n                const x = stat.stat.years\n                const y = stat.stat.timeSeries\n                return Plot.line(\n                    x.map((xval, i) => [xval, y[i]]),\n                    { stroke: stat.color, strokeWidth: 2 },\n                ) as Plot.Markish\n            })\n            marks.push(\n                Plot.axisX({\n                    label: 'Year',\n                    tickFormat: (d: number) => d.toString(),\n                }),\n            )\n            const xlabel = 'Year'\n            const ylabel = props.stats[0].stat.name\n            const ydomain = undefined\n            const legend = { legend: true, range: props.stats.map(stat => stat.color), domain: props.stats.map(stat => stat.shortname) }\n            return { marks, xlabel, ylabel, ydomain, legend }\n        },\n        [props.stats],\n    )\n\n    return (\n        <PlotComponent\n            plotSpec={() => plotSpec}\n            settingsElement={settingsElement}\n        />\n    )\n}\n","import React, { ReactNode } from 'react'\n\nimport { ExtraStat } from './load-article'\nimport { Histogram, transposeSettingsHeight } from './plots-histogram'\nimport { TimeSeriesPlot } from './plots-timeseries'\n\nexport interface PlotProps {\n    shortname: string\n    longname: string\n    extraStat?: ExtraStat\n    color: string\n    sharedTypeOfAllArticles?: string\n}\n\nexport function RenderedPlot({ statDescription, plotProps }: { statDescription: string, plotProps: PlotProps[] }): ReactNode {\n    const type = plotProps.reduce<undefined | 'histogram' | 'time_series'>((result, plot) => {\n        if (result === undefined) {\n            return plot.extraStat?.type\n        }\n        else if (plot.extraStat?.type !== undefined && plot.extraStat.type !== result) {\n            throw new Error('Rendering plots of differing types')\n        }\n        return result\n    }, undefined)\n    switch (type) {\n        case 'histogram':\n            return (\n                <Histogram\n                    statDescription={statDescription}\n                    histograms={plotProps.flatMap(\n                        (props) => {\n                            if (props.extraStat?.type !== 'histogram') {\n                                return []\n                            }\n                            return [\n                                {\n                                    shortname: props.shortname,\n                                    longname: props.longname,\n                                    histogram: props.extraStat,\n                                    color: props.color,\n                                    universeTotal: props.extraStat.universeTotal,\n                                },\n                            ]\n                        },\n                    )}\n                    sharedTypeOfAllArticles={plotProps[0]?.sharedTypeOfAllArticles}\n                />\n            )\n        case 'time_series':\n            return (\n                <TimeSeriesPlot\n                    stats={plotProps.map(\n                        (props) => {\n                            if (props.extraStat?.type !== 'time_series') {\n                                throw new Error('expected time_series')\n                            }\n                            return {\n                                shortname: props.shortname,\n                                stat: props.extraStat,\n                                color: props.color,\n                            }\n                        },\n                    )}\n                />\n            )\n        case undefined:\n            return null\n    }\n}\n\nexport function extraHeaderSpaceForVertical(spec: PlotProps): number {\n    switch (spec.extraStat?.type) {\n        case 'histogram':\n            return transposeSettingsHeight\n        case 'time_series':\n            return 0\n        case undefined:\n            return 0\n    }\n}\n","\n      import API from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../node_modules/css-loader/dist/cjs.js!./table.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../node_modules/css-loader/dist/cjs.js!./table.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import { useSortable } from '@dnd-kit/sortable'\nimport { CSS } from '@dnd-kit/utilities'\nimport React, { CSSProperties, ReactNode, useContext, useRef, useState } from 'react'\n\nimport { ArticleOrderingListInternal, loadOrdering } from '../load_json'\nimport './table.css'\nimport { Navigator } from '../navigation/Navigator'\nimport { statisticDescriptor } from '../navigation/links'\nimport { Colors } from '../page_template/color-themes'\nimport { colorFromCycle, useColors } from '../page_template/colors'\nimport { MobileArticlePointers, rowExpandedKey, useSetting } from '../page_template/settings'\nimport { useUniverse } from '../universe'\nimport { isHistoricalCD } from '../utils/is_historical'\nimport { useComparisonHeadStyle, useMobileLayout } from '../utils/responsive'\nimport { displayType } from '../utils/text'\nimport { useTranspose } from '../utils/transpose'\n\nimport { Icon } from './Icon'\nimport { Percentile, Statistic } from './display-stats'\nimport { EditableNumber } from './editable-field'\nimport { ArticleRow, Disclaimer, FirstLastStatus } from './load-article'\nimport { PointerArrow, useSinglePointerCell } from './pointer-cell'\nimport { useScreenshotMode } from './screenshot'\nimport { SearchBox } from './search'\nimport { ArrowUpOrDown } from './statistic-panel'\nimport { Cell, CellSpec, ComparisonLongnameCellProps, TopLeftHeaderProps, StatisticNameCellProps } from './supertable'\n\nexport type ColumnIdentifier = 'statval' | 'statval_unit' | 'statistic_percentile' | 'statistic_ordinal' | 'pointer_in_class' | 'pointer_overall'\n\nexport const leftBarMargin = 0.02\n\nconst tableRowStyle: React.CSSProperties = {\n    display: 'flex',\n    flexDirection: 'row',\n}\n\nexport function TableHeaderContainer({ children }: { children: ReactNode }): ReactNode {\n    const colors = useColors()\n\n    const style = {\n        ...tableRowStyle,\n        borderTop: `1pt solid ${colors.textMain}`,\n        borderBottom: `1pt solid ${colors.textMain}`,\n        fontWeight: 500,\n        alignItems: 'center',\n    }\n    return (\n        <div\n            style={style}\n        >\n            {children}\n        </div>\n    )\n}\n\ninterface ColumnLayoutProps {\n    cells: {\n        columnIdentifier: ColumnIdentifier\n        widthPercentage: number\n        content: ReactNode\n        style: CSSProperties\n    }[]\n    onlyColumns?: string[]\n    blankColumns?: string[]\n    totalWidth: number\n}\n\n// Lays out column content\nexport function ColumnLayout(props: ColumnLayoutProps): JSX.Element[] {\n    const cellPercentages: number[] = []\n    const cellContents = []\n    for (const { widthPercentage, columnIdentifier, content, style } of props.cells) {\n        if (props.onlyColumns && !props.onlyColumns.includes(columnIdentifier)) {\n            continue\n        }\n        cellPercentages.push(widthPercentage)\n        if (props.blankColumns?.includes(columnIdentifier)) {\n            cellContents.push({ content: <span></span>, style })\n        }\n        else {\n            cellContents.push({ content, style })\n        }\n    }\n\n    // normalize cell percentages\n    const sum = cellPercentages.reduce((a, b) => a + b, 0)\n    for (const i of cellPercentages.keys()) {\n        cellPercentages[i] = props.totalWidth * cellPercentages[i] / sum\n    }\n\n    const contents = cellContents.map(\n        ({ content, style }, i) => {\n            const sty: React.CSSProperties = { width: `${cellPercentages[i]}%`, padding: '1px', ...style }\n            return (\n                <div key={i} style={sty}>\n                    {content}\n                </div>\n            )\n        },\n    )\n    return contents\n}\n\nexport interface SuperHeaderHorizontalProps {\n    headerSpecs: (CellSpec & { highlightIndex?: number })[]\n    widthsEach: number[]\n    showBottomBar: boolean\n    leftSpacerWidth: number\n    groupNames?: (string | undefined)[]\n}\n\nexport function SuperHeaderHorizontal(props: SuperHeaderHorizontalProps): ReactNode {\n    const colors = useColors()\n    const barHeight = '5px'\n    const bars = (backgroundColor: (i: number) => string | undefined): ReactNode => {\n        return (\n            <div style={{ display: 'flex' }}>\n                <div style={{ width: `${props.leftSpacerWidth}%`, height: barHeight }} />\n                {Array.from({ length: props.headerSpecs.length }).map(\n                    (_, i) => (\n                        <div\n                            key={`bar_${i}`}\n                            style={{\n                                width: `${props.widthsEach[i]}%`,\n                                height: barHeight,\n                                backgroundColor: backgroundColor(i),\n                            }}\n                        />\n                    ),\n                )}\n            </div>\n        )\n    }\n\n    const getBarColor = (idx: number): string | undefined => {\n        const spec = props.headerSpecs[idx]\n        return spec.highlightIndex !== undefined ? colorFromCycle(colors.hueColors, spec.highlightIndex) : undefined\n    }\n    return (\n        <>\n            {props.groupNames && <SuperHeaderGroupNames leftSpacerWidth={props.leftSpacerWidth} groupNames={props.groupNames} widthsEach={props.widthsEach} />}\n            {bars(getBarColor)}\n            <div style={{ display: 'flex' }}>\n                <div style={{ width: `${props.leftSpacerWidth}%` }} />\n                {props.headerSpecs.map((cellSpec, idx) => <Cell key={idx} {...cellSpec} width={props.widthsEach[idx]} />)}\n            </div>\n            {props.showBottomBar && bars(getBarColor)}\n        </>\n    )\n}\n\nexport function SuperHeaderGroupNames(props: { leftSpacerWidth: number, groupNames: (string | undefined)[], widthsEach: number[] }): ReactNode {\n    if (props.groupNames.every(groupName => groupName === undefined)) {\n        return null\n    }\n    const sizes = []\n    const names: (string | undefined)[] = []\n    for (const [idx, groupName] of props.groupNames.entries()) {\n        if (idx === 0 || groupName !== props.groupNames[idx - 1]) {\n            sizes.push(props.widthsEach[idx])\n            names.push(groupName)\n        }\n        else {\n            sizes[sizes.length - 1] += props.widthsEach[idx]\n        }\n    }\n\n    return (\n        <div style={{ display: 'flex' }} className=\"serif value\">\n            <div style={{ width: `${props.leftSpacerWidth}%` }} />\n            {sizes.map((size, idx) => <div key={idx} style={{ width: `${size}%`, textAlign: 'center' }}>{names[idx]}</div>)}\n        </div>\n    )\n}\n\nexport function ComparisonTopLeftHeader(props: TopLeftHeaderProps & { width: number }): ReactNode {\n    return (\n        <>\n            <ComparisonColorBar key=\"color\" highlightIndex={undefined} />\n            <TopLeftHeader {...props} width={props.width - leftBarMargin * 100} />\n        </>\n    )\n}\n\nexport function TopLeftHeader(props: TopLeftHeaderProps & { width: number }): ReactNode {\n    return (\n        <div style={{ textAlign: 'center', display: 'flex', justifyContent: 'center', padding: '1px', width: `${props.width}%` }}>\n            <span className=\"serif value\" key=\"statistic\">\n                {props.statNameOverride ?? 'Statistic'}\n            </span>\n        </div>\n    )\n}\n\nexport function MainHeaderRow(props: {\n    topLeftSpec: CellSpec\n    topLeftWidth: number\n    columnWidth: number\n    onlyColumns: ColumnIdentifier[]\n    statNameOverride?: string\n    extraSpaceRight: number[]\n    simpleOrdinals: boolean\n}): ReactNode {\n    return (\n        <>\n            <Cell {...props.topLeftSpec} width={props.topLeftWidth} />\n            {props.extraSpaceRight.map((_, columnIndex) => (\n                <StatisticHeaderCells\n                    key={`headerCells_${columnIndex}`}\n                    onlyColumns={props.onlyColumns}\n                    simpleOrdinals={props.simpleOrdinals}\n                    totalWidth={props.columnWidth}\n                    extraSpaceRight={props.extraSpaceRight[columnIndex] ?? 0}\n                />\n            ))}\n        </>\n    )\n}\n\nexport function StatisticHeaderCells(props: { simpleOrdinals: boolean, totalWidth: number, onlyColumns?: ColumnIdentifier[], statNameOverride?: string, extraSpaceRight?: number }): ReactNode {\n    const colors = useColors()\n    const ordinalStyle: React.CSSProperties = {\n        fontSize: '14px',\n        fontWeight: 400,\n        color: colors.ordinalTextColor,\n        margin: 0,\n    }\n\n    const cells = [\n        {\n            columnIdentifier: 'statval',\n            widthPercentage: 15 + 10,\n            content: (\n                <span className=\"serif value\">\n                    Value\n                </span>\n            ),\n            style: { textAlign: 'center', display: 'flex', justifyContent: 'center' },\n        },\n        {\n            widthPercentage: props.simpleOrdinals ? 7 : 17,\n            columnIdentifier: 'statistic_percentile',\n            content: (\n                <span className=\"serif\" key=\"ordinal\" style={ordinalStyle}>\n                    {\n                        (props.simpleOrdinals ? '%ile' : 'Percentile')\n\n                    }\n                </span>\n            ),\n            style: { textAlign: 'center', display: 'flex', justifyContent: props.simpleOrdinals ? 'flex-end' : 'center', marginRight: props.simpleOrdinals ? '5px' : undefined },\n        },\n        {\n            widthPercentage: props.simpleOrdinals ? 8 : 25,\n            columnIdentifier: 'statistic_ordinal',\n            content: (\n                <span className=\"serif\" key=\"statistic_ordinal\" style={ordinalStyle}>\n                    {\n                        (props.simpleOrdinals ? 'Ord' : 'Ordinal')\n                    }\n                </span>\n            ),\n            style: { textAlign: 'center', display: 'flex', justifyContent: props.simpleOrdinals ? 'flex-end' : 'center', marginRight: props.simpleOrdinals ? '5px' : undefined },\n        },\n        ...PointerHeaderCells({ ordinalStyle }),\n    ] satisfies ColumnLayoutProps['cells']\n\n    return (\n        <>\n            <ColumnLayout\n                cells={cells}\n                totalWidth={props.totalWidth}\n                onlyColumns={props.onlyColumns}\n            />\n            <div style={{ width: `${props.extraSpaceRight ?? 0}%` }} />\n        </>\n    )\n}\n\nfunction PointerHeaderCells(props: { ordinalStyle: CSSProperties }): ColumnLayoutProps['cells'] {\n    const pointerInClassCell: ColumnLayoutProps['cells'][number] = {\n        widthPercentage: 8,\n        columnIdentifier: 'pointer_in_class',\n        content: <span className=\"serif\" style={props.ordinalStyle}>Within Type</span>,\n        style: { textAlign: 'center', display: 'flex', justifyContent: 'center' },\n\n    }\n    const pointerOverallCell: ColumnLayoutProps['cells'][number] = {\n        widthPercentage: 8,\n        columnIdentifier: 'pointer_overall',\n        content: <span className=\"serif\" style={props.ordinalStyle}>Overall</span>,\n        style: { textAlign: 'center', display: 'flex', justifyContent: 'center' },\n    }\n\n    // Must be outside branch because uses hooks\n    const selectorCell = PointerHeaderSelectorCell()\n\n    const screenshotMode = useScreenshotMode()\n    const singlePointerCell = useSinglePointerCell()\n\n    if (screenshotMode) {\n        return []\n    }\n    else if (singlePointerCell) {\n        return [selectorCell]\n    }\n    else {\n        return [pointerInClassCell, pointerOverallCell]\n    }\n}\n\nfunction PointerHeaderSelectorCell(): ColumnLayoutProps['cells'][number] {\n    const [preferredPointerCell, setPreferredPointerCell] = useSetting('mobile_article_pointers')\n\n    const selectWidth = 'clamp(45px, 100%, 65px)'\n    const arrowWidth = '12px'\n\n    const selectStyle: CSSProperties = {\n        height: '2lh',\n        whiteSpace: 'wrap',\n        width: selectWidth,\n        textAlign: 'left',\n        appearance: 'none',\n        padding: '0px 1px',\n    }\n\n    const arrowStyle: CSSProperties = {\n        position: 'absolute',\n        left: `calc((max(0px, 100% - ${selectWidth}) / 2) + ${selectWidth} - (${arrowWidth}))`,\n        pointerEvents: 'none',\n        height: arrowWidth,\n        width: arrowWidth,\n        fontSize: arrowWidth,\n        bottom: `5px`,\n    }\n\n    return {\n        widthPercentage: 8,\n        columnIdentifier: preferredPointerCell,\n        content: (\n            <>\n                <select\n                    style={selectStyle}\n                    value={preferredPointerCell}\n                    onChange={(e) => { setPreferredPointerCell(e.target.value as MobileArticlePointers) }}\n                    data-test-id=\"tablePointerSelect\"\n                >\n                    <option value=\"pointer_in_class\">Within Type</option>\n                    <option value=\"pointer_overall\">Overall</option>\n                </select>\n                <span style={arrowStyle}>\n                    {'▼\\ufe0e'}\n                </span>\n            </>\n        ),\n        style: {\n            textAlign: 'center',\n            position: 'relative',\n        },\n    }\n}\n\nexport function StatisticRowCells(props: {\n    width: number\n    longname: string\n    statisticStyle?: CSSProperties\n    row: ArticleRow\n    onlyColumns?: string[]\n    blankColumns?: string[]\n    onNavigate?: (newArticle: string) => void\n    simpleOrdinals: boolean\n    extraSpaceRight?: number\n}): ReactNode {\n    const colors = useColors()\n    const ordinalStyle: React.CSSProperties = {\n        fontSize: '14px',\n        fontWeight: 400,\n        color: colors.ordinalTextColor,\n        margin: 0,\n    }\n\n    const cells = [\n        {\n            widthPercentage: 15,\n            columnIdentifier: 'statval',\n            content: (\n                <span className=\"serif value testing-statistic-value\">\n                    <Statistic\n                        statname={props.row.statname}\n                        value={props.row.statval}\n                        isUnit={false}\n                        style={props.statisticStyle ?? {}}\n                    />\n                </span>\n            ),\n            style: { textAlign: 'right' },\n        },\n        {\n            widthPercentage: 10,\n            columnIdentifier: 'statval_unit',\n            content: (\n                <div className=\"value_unit\">\n                    <span className=\"serif value\">\n                        <Statistic\n                            statname={props.row.statname}\n                            value={props.row.statval}\n                            isUnit={true}\n                        />\n                    </span>\n                </div>\n            ),\n            style: { textAlign: 'right' },\n        },\n        {\n            widthPercentage: props.simpleOrdinals ? 7 : 17,\n            columnIdentifier: 'statistic_percentile',\n            content: (\n                <span className=\"serif\" style={ordinalStyle}>\n                    <Percentile\n                        ordinal={props.row.ordinal}\n                        total={props.row.totalCountInClass}\n                        percentileByPopulation={props.row.percentileByPopulation}\n                        simpleOrdinals={props.simpleOrdinals}\n                    />\n                </span>\n            ),\n            style: { textAlign: 'right' },\n        },\n        {\n            widthPercentage: props.simpleOrdinals ? 8 : 25,\n            columnIdentifier: 'statistic_ordinal',\n            content: (\n                <span className=\"serif\" style={ordinalStyle}>\n                    <Ordinal\n                        ordinal={props.row.ordinal}\n                        total={props.row.totalCountInClass}\n                        type={props.row.articleType}\n                        statpath={props.row.statpath}\n                        simpleOrdinals={props.simpleOrdinals}\n                        onNavigate={props.onNavigate}\n                    />\n                </span>\n            ),\n            style: { textAlign: 'right' },\n        },\n        ...PointerRowCells({ ordinalStyle, row: props.row, longname: props.longname }),\n    ] satisfies ColumnLayoutProps['cells']\n\n    return (\n        <>\n            <ColumnLayout\n                cells={cells}\n                totalWidth={props.width}\n                onlyColumns={props.onlyColumns}\n                blankColumns={props.blankColumns}\n            />\n            <div style={{ width: `${props.extraSpaceRight}%` }} />\n        </>\n    )\n}\n\nfunction PointerRowCells(props: { ordinalStyle: CSSProperties, row: ArticleRow, longname: string }): ColumnLayoutProps['cells'] {\n    const screenshotMode = useScreenshotMode()\n\n    const singlePointerCell = useSinglePointerCell()\n    const [preferredPointerCell] = useSetting('mobile_article_pointers')\n\n    const pointerInClassCell: ColumnLayoutProps['cells'][number] = {\n        widthPercentage: 8,\n        columnIdentifier: 'pointer_in_class',\n        content: (\n            <span key=\"pointer_in_class\" className=\"serif\" style={{ display: 'flex', ...props.ordinalStyle }}>\n                <PointerButtonsIndex\n                    ordinal={props.row.ordinal}\n                    statpath={props.row.statpath}\n                    type={props.row.articleType}\n                    total={props.row.totalCountInClass}\n                    longname={props.longname}\n                />\n            </span>\n        ),\n        style: { textAlign: 'right' },\n    }\n\n    const pointerOverallCell: ColumnLayoutProps['cells'][number] = {\n        widthPercentage: 8,\n        columnIdentifier: 'pointer_overall',\n        content: (\n            <span className=\"serif\" style={{ display: 'flex', ...props.ordinalStyle }}>\n                <PointerButtonsIndex\n                    statpath={props.row.statpath}\n                    type=\"overall\"\n                    total={props.row.totalCountOverall}\n                    longname={props.longname}\n                    overallFirstLast={props.row.overallFirstLast}\n                />\n            </span>\n        ),\n        style: { textAlign: 'right' },\n    }\n\n    if (screenshotMode) {\n        return []\n    }\n    else if (singlePointerCell) {\n        switch (preferredPointerCell) {\n            case 'pointer_in_class':\n                return [pointerInClassCell]\n            case 'pointer_overall':\n                return [pointerOverallCell]\n        }\n    }\n    else {\n        return [pointerInClassCell, pointerOverallCell]\n    }\n}\n\nfunction articleStatnameButtonStyle(colors: Colors): React.CSSProperties {\n    return {\n        cursor: 'pointer', border: `1px solid ${colors.textMain}`,\n        padding: 0, borderRadius: '3px', fontSize: '75%',\n        minWidth: '1.5em', minHeight: '1.5em', textAlign: 'center',\n        lineHeight: '1.2em',\n    }\n}\n\nconst manipulationButtonHeight = '24px'\n\nfunction ManipulationButton({ color: buttonColor, onClick, text, image }: { color: string, onClick: () => void, text: string, image: string }): ReactNode {\n    const isMobile = useMobileLayout()\n    const isTranspose = useTranspose()\n    const colors = useColors()\n\n    return (\n        <div\n            style={{\n                height: manipulationButtonHeight,\n                lineHeight: manipulationButtonHeight,\n                cursor: 'pointer',\n                paddingLeft: '0.5em', paddingRight: '0.5em',\n                borderRadius: '0.25em',\n                verticalAlign: 'middle',\n                backgroundColor: buttonColor,\n            }}\n            className={`serif manipulation-button-${text}`}\n            onClick={onClick}\n        >\n            {!(isMobile && isTranspose) ? text : <Icon src={image} size={manipulationButtonHeight} color={colors.textMain} />}\n        </div>\n    )\n}\n\nexport function HeadingDisplay({ longname, includeDelete, onDelete, onReplace, manipulationJustify, sharedTypeOfAllArticles }: {\n    longname: string\n    includeDelete: boolean\n    onDelete: () => void\n    onReplace: (q: string) => ReturnType<Navigator['link']>\n    manipulationJustify: CSSProperties['justifyContent']\n    sharedTypeOfAllArticles: string | null | undefined\n}): ReactNode {\n    const colors = useColors()\n    const [isEditing, setIsEditing] = React.useState(false)\n    const currentUniverse = useUniverse()\n    const comparisonHeadStyle = useComparisonHeadStyle()\n\n    const manipulationButtons = (\n        <div style={{ height: manipulationButtonHeight }}>\n            <div style={{ display: 'flex', justifyContent: manipulationJustify, height: '100%' }}>\n                <ManipulationButton color={colors.unselectedButton} onClick={() => { setIsEditing(!isEditing) }} text=\"replace\" image=\"/replace.png\" />\n                {!includeDelete\n                    ? null\n                    : (\n                            <>\n                                <div style={{ width: '5px' }} />\n                                <ManipulationButton color={colors.unselectedButton} onClick={onDelete} text=\"delete\" image=\"/close.png\" />\n                            </>\n                        )}\n                <div style={{ width: '5px' }} />\n            </div>\n        </div>\n    )\n\n    const screenshotMode = useScreenshotMode()\n\n    const navContext = useContext(Navigator.Context)\n\n    return (\n        <div>\n            {screenshotMode ? undefined : manipulationButtons}\n            <div style={{ height: '5px' }} />\n            <a\n                className=\"serif\"\n                {\n                    ...navContext.link({\n                        kind: 'article',\n                        longname,\n                        universe: currentUniverse,\n                    }, { scroll: { kind: 'position', top: 0 } })\n                }\n                style={{ textDecoration: 'none' }}\n            >\n                <div style={useComparisonHeadStyle()}>{longname}</div>\n            </a>\n            {isEditing\n                ? (\n                        <SearchBox\n                            autoFocus={true}\n                            style={{ ...comparisonHeadStyle, width: '100%' }}\n                            placeholder=\"Replacement\"\n                            onChange={() => {\n                                setIsEditing(false)\n                            }}\n                            link={onReplace}\n                            prioritizeArticleType={sharedTypeOfAllArticles ?? undefined}\n                        />\n                    )\n                : null}\n        </div>\n    )\n}\n\nexport function ComparisonLongnameCell(props: ComparisonLongnameCellProps & { width: number }): ReactNode {\n    const currentUniverse = useUniverse()\n    const navContext = useContext(Navigator.Context)\n\n    const haveColorbar = props.transpose && props.highlightIndex !== undefined\n    const width = props.width - (haveColorbar ? 2 * 100 * leftBarMargin : 0)\n\n    const bar = (): ReactNode => props.transpose && props.highlightIndex !== undefined && (\n        <ComparisonColorBar highlightIndex={props.highlightIndex} />\n    )\n    const {\n        attributes,\n        listeners,\n        setNodeRef,\n        transform,\n        transition,\n        isDragging,\n    } = useSortable({ id: props.articleId ?? 'dummy' })\n\n    let extraStyle: CSSProperties = {}\n    let extraProps: React.HTMLAttributes<HTMLDivElement> & { ref?: (node: HTMLElement | null) => void } = { }\n    if (props.draggable && props.articleId) {\n        extraStyle = {\n            transform: CSS.Transform.toString(transform),\n            transition: isDragging ? transition : 'none',\n            opacity: isDragging ? 0.5 : 1,\n            touchAction: 'none',\n        }\n        extraProps = { ref: setNodeRef, ...attributes, ...listeners }\n    }\n\n    return (\n        <>\n            {bar()}\n            <div\n                key={`heading_${props.articleIndex}`}\n                style={{ width: `${width}%`, ...extraStyle }}\n                {...extraProps}\n            >\n                <HeadingDisplay\n                    longname={props.articles[props.articleIndex].longname}\n                    includeDelete={props.articles.length > 1}\n                    onDelete={() => {\n                        void navContext.navigate({\n                            kind: 'comparison',\n                            universe: currentUniverse,\n                            longnames: props.names.filter((_, index) => index !== props.articleIndex),\n                        }, { history: 'push', scroll: { kind: 'none' } })\n                    }}\n                    onReplace={x =>\n                        navContext.link({\n                            kind: 'comparison',\n                            universe: currentUniverse,\n                            longnames: props.names.map((value, index) => index === props.articleIndex ? x : value),\n                        }, { scroll: { kind: 'none' } })}\n                    manipulationJustify={props.transpose ? 'center' : 'flex-end'}\n                    sharedTypeOfAllArticles={props.sharedTypeOfAllArticles}\n                />\n            </div>\n            {bar()}\n        </>\n    )\n}\n\nexport function StatisticNameCell(props: StatisticNameCellProps & { width: number }): ReactNode {\n    const haveColorbar = !props.transpose && props.highlightIndex !== undefined\n    const width = props.width - (haveColorbar ? 100 * leftBarMargin : 0)\n\n    return (\n        <>\n            {haveColorbar && (\n                <ComparisonColorBar highlightIndex={props.highlightIndex} />\n            )}\n            <div\n                key={`statName_${props.row.statpath}`}\n                style={{ width: `${width}%`, padding: '1px', paddingLeft: props.isIndented ? '1em' : '1px', textAlign: props.center ? 'center' : undefined }}\n            >\n                <span className=\"serif value\" style={{ display: 'flex', alignItems: 'center', justifyContent: props.center ? 'center' : 'flex-start', gap: '0.25em' }}>\n                    <StatisticName\n                        row={props.row}\n                        longname={props.longname}\n                        currentUniverse={props.currentUniverse}\n                        center={props.center}\n                        displayName={props.displayName ?? props.row.renderedStatname}\n                    />\n                    {props.sortInfo && (\n                        <span\n                            style={{\n                                cursor: 'pointer',\n                                height: '16px',\n                                marginLeft: props.transpose ? '0' : 'auto',\n                            }}\n                            onClick={props.sortInfo.onSort}\n                        >\n                            <ArrowUpOrDown direction={props.sortInfo.sortDirection} shouldAppearInScreenshot={false} />\n                        </span>\n                    )}\n                </span>\n            </div>\n        </>\n    )\n}\n\nexport function StatisticName(props: {\n    row: ArticleRow\n    longname: string\n    currentUniverse: string\n    center?: boolean\n    displayName: string\n}): ReactNode {\n    const [expanded, setExpanded] = useSetting(rowExpandedKey(props.row.statpath))\n    const colors = useColors()\n    const navContext = useContext(Navigator.Context)\n\n    const link = (\n        <a\n            style={{ textDecoration: 'none', color: colors.textMain }}\n            {\n                ...navContext.link(statisticDescriptor({\n                    universe: props.currentUniverse,\n                    statname: props.row.statname,\n                    articleType: props.row.articleType,\n                    start: props.row.ordinal,\n                    amount: 20,\n                    order: 'descending',\n                    highlight: props.longname,\n                }), { scroll: { kind: 'position', top: 0 } })\n            }\n            data-test-id=\"statistic-link\"\n        >\n            {props.displayName}\n        </a>\n    )\n    const screenshotMode = useScreenshotMode()\n    const elements = [link]\n    if (props.row.extraStat !== undefined && !screenshotMode) {\n        elements.push(\n            <div\n                className=\"expand-toggle\"\n                onClick={() => { setExpanded(!expanded) }}\n                style={articleStatnameButtonStyle(colors)}\n            >\n                {expanded ? '-' : '+'}\n            </div>,\n        )\n    }\n    if (props.row.disclaimer !== undefined) {\n        elements.push(<StatisticNameDisclaimer disclaimer={props.row.disclaimer} />)\n    }\n    if (elements.length > 1) {\n        const paddedElements = [elements[0]]\n        for (let i = 1; i < elements.length; i++) {\n            paddedElements.push(<div key={i} style={{ marginLeft: '0.3em' }} />)\n            paddedElements.push(elements[i])\n        }\n        return (\n            <span style={{\n                display: 'flex',\n                alignItems: 'center',\n                flexDirection: 'row',\n                justifyContent: props.center ? 'center' : undefined,\n            }}\n            >\n                {...paddedElements}\n            </span>\n        )\n    }\n    return link\n}\n\nexport function ComparisonColorBar({ highlightIndex }: { highlightIndex: number | undefined }): ReactNode {\n    const colors = useColors()\n\n    return (\n        <div\n            key=\"color\"\n            style={{\n                width: `${100 * leftBarMargin}%`,\n                alignSelf: 'stretch',\n                position: 'relative',\n            }}\n        >\n            <div style={{\n                backgroundColor: highlightIndex === undefined ? colors.background : colorFromCycle(colors.hueColors, highlightIndex),\n                height: '100%',\n                width: '50%',\n                left: '25%',\n                position: 'absolute',\n            }}\n            />\n        </div>\n    )\n}\n\nfunction computeDisclaimerText(disclaimer: Disclaimer): string {\n    switch (disclaimer) {\n        case 'heterogenous-sources':\n            return 'This statistic is based on data from multiple sources, which may not be consistent with each other.'\n    }\n}\n\nfunction StatisticNameDisclaimer(props: { disclaimer: Disclaimer }): ReactNode {\n    // little disclaimer icon that pops up a tooltip when clicked\n    const [show, setShow] = useState(false)\n    const colors = useColors()\n    const tooltipStyle: React.CSSProperties = {\n        position: 'absolute',\n        backgroundColor: colors.slightlyDifferentBackgroundFocused,\n        color: colors.textMain,\n        padding: '0.5em',\n        borderRadius: '0.5em',\n        border: `1px solid ${colors.textMain}`,\n        zIndex: 100000,\n        display: show ? 'block' : 'none',\n    }\n    return (\n        <span>\n            <span\n                className=\"disclaimer-toggle\"\n                style={{ ...articleStatnameButtonStyle(colors), display: 'inline-block' }}\n                onClick={() => { setShow(!show) }}\n            >\n                !\n            </span>\n            <div\n                style={tooltipStyle}\n                onClick={() => { setShow(false) }}\n            >\n                {computeDisclaimerText(props.disclaimer)}\n            </div>\n        </span>\n    )\n}\n\nexport function TableRowContainer({ children, index, minHeight }: { children: React.ReactNode, index: number, minHeight?: string }): React.ReactNode {\n    const colors = useColors()\n    const style: React.CSSProperties = {\n        ...tableRowStyle,\n        backgroundColor: index % 2 === 1 ? colors.slightlyDifferentBackground : undefined,\n        alignItems: 'last baseline',\n        minHeight,\n    }\n    return (\n        <div\n            className=\"for-testing-table-row\"\n            style={style}\n        >\n            {children}\n        </div>\n    )\n}\n\nfunction Ordinal(props: {\n    ordinal: number\n    total: number\n    type: string\n    statpath: string\n    simpleOrdinals: boolean\n    onNavigate?: (newArticle: string) => void\n}): ReactNode {\n    const currentUniverse = useUniverse()\n    const onNewNumber = async (number: number): Promise<void> => {\n        let num = number\n        if (num < 0) {\n            // -1 -> props.total, -2 -> props.total - 1, etc.\n            num = props.total + 1 + num\n        }\n        if (num > props.total) {\n            num = props.total\n        }\n        if (num <= 0) {\n            num = 1\n        }\n        const data = await loadOrdering(currentUniverse, props.statpath, props.type)\n        props.onNavigate?.(data.longnames[num - 1])\n    }\n    const ordinal = props.ordinal\n    const total = props.total\n    const type = props.type\n    if (ordinal > total) {\n        return <span></span>\n    }\n    const en = (\n        <EditableNumber\n            number={ordinal}\n            onNewNumber={onNewNumber}\n        />\n    )\n    return (\n        <div className=\"serif\" style={{ textAlign: 'right', marginRight: props.simpleOrdinals ? '5px' : 0 }}>\n            {en}\n            {props.simpleOrdinals\n                ? <></>\n                : (\n                        <>\n                            {' of '}\n                            {total}\n                            {' '}\n                            {displayType(currentUniverse, type)}\n                        </>\n                    )}\n\n        </div>\n    )\n}\n\n;\n\n// Lacks some customization since its column is not show in the comparison view\nfunction PointerButtonsIndex(props: { ordinal?: number, statpath: string, type: string, total: number, longname: string, overallFirstLast?: FirstLastStatus }): ReactNode {\n    const currentUniverse = useUniverse()\n    const getData = async (): Promise<ArticleOrderingListInternal> => await loadOrdering(currentUniverse, props.statpath, props.type)\n    return (\n        <span style={{ margin: 'auto', whiteSpace: 'nowrap' }}>\n            <PointerButtonIndex\n                getData={getData}\n                originalPos={props.ordinal}\n                direction={-1}\n                total={props.total}\n                longname={props.longname}\n                disable={props.overallFirstLast?.isFirst}\n            />\n            <PointerButtonIndex\n                getData={getData}\n                originalPos={props.ordinal}\n                direction={+1}\n                total={props.total}\n                longname={props.longname}\n                disable={props.overallFirstLast?.isLast}\n            />\n        </span>\n    )\n}\n\nfunction PointerButtonIndex(props: {\n    getData: () => Promise<ArticleOrderingListInternal>\n    originalPos?: number // 1-indexed\n    direction: -1 | 1\n    total: number\n    longname: string\n    disable?: boolean\n}): ReactNode {\n    const universe = useUniverse()\n    const colors = useColors()\n    const navigation = useContext(Navigator.Context)\n    const [showHistoricalCDs] = useSetting('show_historical_cds')\n    const onClick = async (): Promise<void> => {\n        /* eslint-disable no-console -- Debugging test failure */\n        console.log(`Click on pointer button! props=${JSON.stringify(props)}`)\n        const data = await props.getData()\n        let pos = data.longnames.indexOf(props.longname) + props.direction\n        console.log(`Starting position=${pos}`)\n        while (pos >= 0 && pos < props.total) {\n            const name = data.longnames[pos]\n            const type = data.typeIndices[pos]\n            console.log(`name=${name}`)\n            if (!showHistoricalCDs && isHistoricalCD(type)) {\n                pos += props.direction\n                continue\n            }\n            console.log(`navigate to ${name}`)\n            void navigation.navigate({\n                kind: 'article',\n                longname: name,\n                universe,\n            }, { history: 'push', scroll: { kind: 'element', element: buttonRef.current! } })\n            return\n        }\n        /* eslint-enable no-console */\n    }\n\n    const buttonStyle: React.CSSProperties = {\n        fontFamily: 'Jost, Arial, sans-serif',\n        fontSize: '8pt',\n        fontWeight: 500,\n        textDecoration: 'none',\n        color: colors.textPointer,\n        padding: '2px 6px 2px 6px',\n        borderRadius: '5px',\n        borderTop: `1px solid ${colors.borderNonShadow}`,\n        borderRight: `1px solid ${colors.borderShadow}`,\n        borderBottom: `1px solid ${colors.borderShadow}`,\n        borderLeft: `1px solid ${colors.borderNonShadow}`,\n        backgroundColor: 'transparent',\n    }\n\n    let disabled: boolean = props.disable ?? false\n    if (props.originalPos !== undefined) {\n        disabled = props.originalPos + props.direction < 1 || props.originalPos + props.direction > props.total\n    }\n\n    const buttonRef = useRef<HTMLButtonElement>(null) // Need the ref otherwise the mouse enter and leave events can be sent to the wrong elem\n\n    return (\n        <button\n            disabled={disabled}\n            style={buttonStyle}\n            onClick={onClick}\n            data-test-id={props.direction}\n            ref={buttonRef}\n            onMouseEnter={() => {\n                buttonRef.current!.style.backgroundColor = colors.slightlyDifferentBackgroundFocused\n            }}\n            onMouseLeave={() => {\n                buttonRef.current!.style.backgroundColor = 'transparent'\n            }}\n        >\n            <PointerArrow direction={props.direction} disabled={disabled} />\n        </button>\n    )\n}\n","import React, { CSSProperties, Fragment, ReactNode } from 'react'\n\nimport { Article } from '../utils/protos'\n\nimport { ArticleRow } from './load-article'\nimport { extraHeaderSpaceForVertical, PlotProps, RenderedPlot } from './plots'\nimport { ColumnIdentifier, MainHeaderRow, ComparisonLongnameCell, ComparisonTopLeftHeader, SuperHeaderHorizontal, StatisticNameCell, StatisticRowCells, TableHeaderContainer, TableRowContainer, TopLeftHeader } from './table'\n\nexport interface PlotSpec {\n    statDescription: string\n    plotProps: PlotProps[]\n}\n\nexport interface SuperHeaderSpec {\n    headerSpecs: CellSpec[]\n    showBottomBar: boolean\n    groupNames?: (string | undefined)[]\n}\n\nexport interface LeftHeaderSpec {\n    leftHeaderSpecs: CellSpec[]\n    groupNames?: (string | undefined)[]\n}\n\nexport interface TableContentsProps {\n    superHeaderSpec?: SuperHeaderSpec\n    leftHeaderSpec: LeftHeaderSpec\n    rowSpecs: CellSpec[][]\n    horizontalPlotSpecs: (PlotSpec | undefined)[]\n    verticalPlotSpecs: (PlotSpec | undefined)[]\n    topLeftSpec: CellSpec\n    widthLeftHeader: number\n    columnWidth: number\n    onlyColumns: ColumnIdentifier[]\n    simpleOrdinals: boolean\n}\n\nexport function TableContents(props: TableContentsProps): ReactNode {\n    const headerHeight = props.verticalPlotSpecs.flatMap(p => p === undefined ? [] : p.plotProps).map(p => extraHeaderSpaceForVertical(p)).reduce((a, b) => Math.max(a, b), 0)\n    const contentHeight = '379.5px'\n\n    const shouldSetMinHeight = props.verticalPlotSpecs.some(p => p !== undefined)\n    const overallMinHeight = shouldSetMinHeight ? `calc(${headerHeight}px + ${contentHeight})` : undefined\n    const rowMinHeight = shouldSetMinHeight ? `calc(${contentHeight} / ${props.leftHeaderSpec.leftHeaderSpecs.length})` : undefined\n\n    // should be 1 column, unless there are header specs. only use header specs if we can't infer from the cells.\n    const ncols = props.rowSpecs.length !== 0 ? props.rowSpecs[0].length : props.superHeaderSpec?.headerSpecs.length ?? 1\n\n    const extraSpaceRight = Array.from({ length: ncols }).map((_, i) => (props.verticalPlotSpecs[i] === undefined ? 0 : props.columnWidth))\n    const columnFullWidths = extraSpaceRight.map(extra => props.columnWidth + extra)\n\n    return (\n        <>\n            {props.superHeaderSpec !== undefined && (\n                <SuperHeaderHorizontal\n                    {...props.superHeaderSpec}\n                    leftSpacerWidth={props.widthLeftHeader}\n                    widthsEach={columnFullWidths}\n                />\n            )}\n\n            <div style={{ position: 'relative', minHeight: overallMinHeight }}>\n                <TableHeaderContainer>\n                    <MainHeaderRow\n                        columnWidth={props.columnWidth}\n                        topLeftSpec={props.topLeftSpec}\n                        topLeftWidth={props.widthLeftHeader}\n                        onlyColumns={props.onlyColumns}\n                        extraSpaceRight={extraSpaceRight}\n                        simpleOrdinals={props.simpleOrdinals}\n                    />\n                </TableHeaderContainer>\n                {props.rowSpecs.map((rowSpecsForItem, rowIndex) => {\n                    const plotSpec = props.horizontalPlotSpecs[rowIndex]\n                    return (\n                        <SuperTableRow\n                            key={`TableRowContainer_${rowIndex}`}\n                            rowIndex={rowIndex}\n                            rowMinHeight={rowMinHeight}\n                            cellSpecs={rowSpecsForItem}\n                            extraSpaceRight={extraSpaceRight}\n                            plotSpec={plotSpec}\n                            leftHeaderSpec={props.leftHeaderSpec.leftHeaderSpecs[rowIndex]}\n                            widthLeftHeader={props.widthLeftHeader}\n                            columnWidth={props.columnWidth}\n                            groupName={props.leftHeaderSpec.groupNames?.[rowIndex]}\n                            prevGroupName={rowIndex > 0 ? props.leftHeaderSpec.groupNames?.[rowIndex - 1] : undefined}\n                        />\n                    )\n                })}\n                {props.verticalPlotSpecs.map((plotSpec, statIndex) => plotSpec\n                    ? (\n                            <div key={`statPlot_${statIndex}`} style={{ position: 'absolute', top: 0, left: `${props.widthLeftHeader + Array.from({ length: statIndex }).reduce((acc: number, unused, i) => acc + columnFullWidths[i], props.columnWidth)}%`, bottom: 0, width: `${props.columnWidth}%` }}>\n                                <RenderedPlot statDescription={plotSpec.statDescription} plotProps={plotSpec.plotProps} />\n                            </div>\n                        )\n                    : null,\n                )}\n            </div>\n        </>\n    )\n}\n\nexport function SuperTableRow(props: {\n    rowIndex: number\n    leftHeaderSpec: CellSpec\n    cellSpecs: CellSpec[]\n    plotSpec?: PlotSpec\n    widthLeftHeader: number\n    columnWidth: number\n    rowMinHeight?: string\n    groupName?: string\n    prevGroupName?: string\n    extraSpaceRight: number[]\n}): ReactNode {\n    return (\n        <div>\n            {props.groupName !== undefined && (props.groupName !== props.prevGroupName) && (\n                <TableRowContainer index={props.rowIndex}>\n                    <div style={{ width: '100%', padding: '1px' }}>\n                        <span className=\"serif value\">\n                            <span>{props.groupName}</span>\n                        </span>\n                    </div>\n                </TableRowContainer>\n            )}\n            <TableRowContainer index={props.rowIndex} minHeight={props.rowMinHeight}>\n                <Cell {...props.leftHeaderSpec} width={props.widthLeftHeader} />\n                {props.cellSpecs.map((spec, colIndex) => (\n                    <Fragment key={`cells_${colIndex}_${props.rowIndex}`}>\n                        <Cell {...spec} width={props.columnWidth} />\n                        <div style={{ width: `${props.extraSpaceRight[colIndex]}%` }}></div>\n                    </Fragment>\n                ))}\n            </TableRowContainer>\n            {props.plotSpec && (\n                <div style={{ width: '100%', position: 'relative' }}>\n                    <RenderedPlot statDescription={props.plotSpec.statDescription} plotProps={props.plotSpec.plotProps} />\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport type CellSpec = ({ type: 'comparison-longname' } & ComparisonLongnameCellProps) |\n    ({ type: 'statistic-name' } & StatisticNameCellProps) |\n    ({ type: 'statistic-row' } & StatisticRowCellProps) |\n    ({ type: 'comparison-top-left-header' } & TopLeftHeaderProps) |\n    ({ type: 'top-left-header' } & TopLeftHeaderProps)\n\nexport function Cell(props: CellSpec & { width: number }): ReactNode {\n    switch (props.type) {\n        case 'comparison-longname':\n            return <ComparisonLongnameCell {...props} width={props.width} />\n        case 'statistic-name':\n            return <StatisticNameCell {...props} width={props.width} />\n        case 'statistic-row':\n            return <StatisticRowCells {...props} width={props.width} />\n        case 'comparison-top-left-header':\n            return <ComparisonTopLeftHeader {...props} width={props.width} />\n        case 'top-left-header':\n            return <TopLeftHeader {...props} width={props.width} />\n    }\n}\n\nexport interface ComparisonLongnameCellProps {\n    articleIndex: number\n    articles: Article[]\n    names: string[]\n    transpose: boolean\n    sharedTypeOfAllArticles: string | null | undefined\n    highlightIndex?: number\n    draggable?: boolean\n    articleId?: string\n}\n\nexport interface StatisticNameCellProps {\n    row: ArticleRow\n    longname: string\n    currentUniverse: string\n    center?: boolean\n    highlightIndex?: number\n    transpose?: boolean\n    isIndented?: boolean\n    displayName?: string\n    sortInfo?: {\n        sortDirection: 'up' | 'down' | 'both'\n        onSort: () => void\n    }\n}\n\nexport interface StatisticRowCellProps {\n    longname: string\n    statisticStyle?: CSSProperties\n    row: ArticleRow\n    onlyColumns?: string[]\n    blankColumns?: string[]\n    onNavigate?: (newArticle: string) => void\n    simpleOrdinals: boolean\n    extraSpaceRight?: number\n}\n\nexport interface TopLeftHeaderProps {\n    statNameOverride?: string\n}\n","import { useEffect, useState } from 'react'\n\nexport class Property<T> {\n    private _value: T\n    readonly observers = new Set<() => void>()\n\n    constructor(value: T) {\n        this._value = value\n    }\n\n    get value(): T {\n        return this._value\n    }\n\n    set value(newValue: T) {\n        this._value = newValue\n        this.observers.forEach((observer) => { observer() })\n    }\n\n    /* eslint-disable react-hooks/rules-of-hooks -- Custom hook method */\n    use(): T {\n        const [, setCounter] = useState(0)\n        useEffect(() => {\n            const observer = (): void => {\n                setCounter(counter => counter + 1)\n            }\n            this.observers.add(observer)\n            return () => {\n                this.observers.delete(observer)\n            }\n        }, [])\n        return this.value\n    }\n    /* eslint-enable react-hooks/rules-of-hooks */\n}\n","import { createContext, useContext } from 'react'\n\n// eslint-disable-next-line no-restricted-syntax -- Context declaration\nexport const TransposeContext = createContext(false)\n\nexport function useTranspose(): boolean {\n    return useContext(TransposeContext)\n}\n"],"names":["ArticleWarnings","screenshotMode","useScreenshotMode","selectedGroups","useSelectedGroups","groupsMissingYearSelection","useGroupsMissingYearSelection","availableYears","useAvailableYears","dataSourceCheckboxes","useDataSourceCheckboxes","settings","useSettings","groupYearKeys","allUncheckedSourceGroups","category","checkboxSpecs","name","forcedOn","sourceEnabledKey","warnings","groupOrCategory","HierarchicalName","YearList","year","checkboxCategoryName","WarningBox","param","colors","useColors","warning","key","years","Icon","size","color","src","style","ExternalLinks","props","elementsEach","metadata","meta","foundMetadata","m","undefined","ExternalLink","sv","assert","computeLinkSuffix","normalizer","imageURLFor","site","useRelatedColor","rowType","colorIntensity","typeCategory","type_to_type_category","colorsEach","Object","relatedButtonColors","typ","mixWithBackground","RelatedButton","currentUniverse","useUniverse","navContext","useContext","Navigator","useMobileLayout","Label","RelationshipGroup","backgroundColor","txt","row","i","Row","settingKey","relationshipKey","checkId","useId","universe","CheckboxSetting","displayType","Array","relationshipType","regions","Related","showHistoricalCds","_useSetting","buttons","DefaultMap","_iteratorError","relateds","_iteratorError1","button","buttonKeys","a","b","type_ordering_idx","buttonKey","isHistoricalCD","elements","ArticlePanel","article","rows","headersRef","useRef","tableRef","mapRef","headerTextClass","useHeaderTextClass","subHeaderTextClass","useSubHeaderTextClass","comparisonHeadStyle","useComparisonHeadStyle","filteredRows","csvData","generateCSVDataForArticles","csvFilename","sanitize","QuerySettingsConnection","PageTemplate","ArticleTable","Map","ComparisonSearchBox","computeNameSpecsWithGroups","nameSpecs","updatedNameSpecs","groupNames","_statParent_source","_statParent_indentedName","spec","statParent","statParents","groupRows","s","_statParents_get","groupSize","groupHasMultipleSources","groupSourcesSet","Set","source","sourceName","displayName","simpleOrdinals","isMobile","widthLeftHeader","expandedSettings","rowExpandedKey","expandedEach","_useWidths","nonPointerColumns","columnWidth","_computeNameSpecsWithGroups","leftHeaderSpecs","onlyColumns","cellSpecs","newArticle","plotSpecs","expanded","index","TableContents","StatisticHeader","longname","type","SearchBox","x","EditableString","contentEditable","html","setCounter","_useState","useEffect","count","handleSubmit","content","ContentEditable","evt","e","setTimeout","range","document","selection","window","EditableNumber","number","parseInt","Number","PlotComponent","transpose","useTranspose","plotRef","plotSpec","plotConfig","useCallback","transposeConfig","_plotSpec","marks","xlabel","ylabel","ydomain","result","legend","plot","Plot","transposeTopMargin","div","Histogram","histogramType","useImperial","_useSetting1","relative","_useSetting2","binMin","binSize","histogram","Error","systemColors","maxValue","log10TickGapTimes3","tickGapOom","tickGap","yKeypoints","axis","grid","title","h","shortnames","renderY","y","renderNumberHighlyRounded","_histogramBounds","histograms","_Math","_Math1","xIdxEnd","zerosAtFront","arr","xIdxStart","xidxs","_","_xAxis","xKeypoints","xidx","lastDigit","adjustment","Math","d","pow10Moral","x10","errorRound","xAxisMarks","renderX","_createHistogramMarks","isCumulative","sumEach","series","histogramIdx","counts","seriesSingle","dovetailSequences","width","off","_seriesSingle","v","tip","maxSequences","seriesMax","_marks","maxValueRounded","tickGapMantissa","makePlot","HistogramSettings","setHistogramType","showSearchBox","setShowSearchBox","createScreenshot","regionName","places","TimeSeriesPlot","useMemo","stat","xval","RenderedPlot","_plotProps_","statDescription","plotProps","_plot_extraStat","_plot_extraStat1","_props_extraStat","tableRowStyle","TableHeaderContainer","children","ColumnLayout","cellPercentages","cellContents","_props_blankColumns","widthPercentage","columnIdentifier","sum","sty","SuperHeaderHorizontal","bars","getBarColor","idx","colorFromCycle","SuperHeaderGroupNames","cellSpec","Cell","groupName","sizes","names","ComparisonTopLeftHeader","ComparisonColorBar","TopLeftHeader","leftBarMargin","_props_statNameOverride","MainHeaderRow","columnIndex","_props_extraSpaceRight_columnIndex","StatisticHeaderCells","preferredPointerCell","setPreferredPointerCell","selectWidth","arrowWidth","arrowStyle","pointerInClassCell","pointerOverallCell","selectorCell","singlePointerCell","_props_extraSpaceRight","ordinalStyle","cells","useSinglePointerCell","StatisticRowCells","_props_statisticStyle","Statistic","Percentile","Ordinal","PointerRowCells","PointerButtonsIndex","articleStatnameButtonStyle","manipulationButtonHeight","ManipulationButton","buttonColor","onClick","text","image","isTranspose","HeadingDisplay","includeDelete","onDelete","onReplace","manipulationJustify","sharedTypeOfAllArticles","_React_useState","isEditing","setIsEditing","manipulationButtons","ComparisonLongnameCell","_props_articleId","haveColorbar","bar","_useSortable","attributes","listeners","setNodeRef","transform","transition","isDragging","extraStyle","extraProps","CSS","value","StatisticNameCell","_props_displayName","StatisticName","ArrowUpOrDown","setExpanded","link","statisticDescriptor","StatisticNameDisclaimer","paddedElements","highlightIndex","show","setShow","tooltipStyle","computeDisclaimerText","disclaimer","TableRowContainer","minHeight","ordinal","total","en","num","data","loadOrdering","_props_overallFirstLast","_props_overallFirstLast1","getData","PointerButtonIndex","_props_disable","navigation","showHistoricalCDs","buttonStyle","disabled","buttonRef","pos","console","JSON","PointerArrow","_props_superHeaderSpec_headerSpecs_length","headerHeight","p","_spec_extraStat","contentHeight","shouldSetMinHeight","overallMinHeight","rowMinHeight","extraSpaceRight","columnFullWidths","extra","rowSpecsForItem","rowIndex","_props_leftHeaderSpec_groupNames","_props_leftHeaderSpec_groupNames1","SuperTableRow","statIndex","acc","unused","colIndex","Fragment","Property","newValue","observer","use","counter","t","TransposeContext","createContext"],"mappings":"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"}