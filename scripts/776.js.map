{"version":3,"file":"776.js","sources":["webpack://assets/./src/quiz/quiz.ts","webpack://assets/./src/utils/google-drive-client.ts","webpack://assets/./src/quiz/sync.ts","webpack://assets/./src/utils/Property.ts","webpack://assets/./src/utils/upload.ts"],"sourcesContent":["import { saveAs } from 'file-saver'\nimport { z } from 'zod'\n\nimport { StatPath, StatName } from '../page_template/statistic-tree'\nimport { Property } from '../utils/Property'\nimport { randomID } from '../utils/random'\nimport { cancelled, uploadFile } from '../utils/upload'\n\nimport { infiniteQuizIsDone, sampleRandomQuestion } from './infinite'\nimport { historyConflicts, mergeHistories } from './sync'\n\nexport type QuizDescriptor = { kind: 'juxtastat', name: number } | { kind: 'retrostat', name: string } | { kind: 'custom', name: string } | { kind: 'infinite', name: string, seed: string, version: number }\n\nexport type QuizKind = QuizDescriptor['kind']\nexport type QuizKindWithStats = 'juxtastat' | 'retrostat' | 'infinite'\nexport type QuizKindWithTime = 'juxtastat' | 'retrostat'\n\n/* eslint-disable no-restricted-syntax -- Data from server */\n// stat_path is optional for backwards compatibility\nexport interface JuxtaQuestionJSON { stat_a: number, stat_b: number, question: string, longname_a: string, longname_b: string, stat_column: StatName | '%', stat_path?: StatPath };\nexport interface JuxtaQuestion extends JuxtaQuestionJSON { kind: 'juxtastat' }\nexport interface RetroQuestionJSON { a_ease: number, b_ease: number, a: JuxtaQuestionJSON, b: JuxtaQuestionJSON };\nexport interface RetroQuestion { kind: 'retrostat', a_ease: number, b_ease: number, a: JuxtaQuestion, b: JuxtaQuestion }\nexport type QuizQuestion = JuxtaQuestion | RetroQuestion\nexport interface CustomQuizContent { name: string, questions: QuizQuestion[] }\nexport type QuizDescriptorWithStats = QuizDescriptor & { kind: QuizKindWithStats }\nexport type QuizDescriptorWithTime = QuizDescriptor & { kind: QuizKindWithTime }\n\n/* eslint-enable no-restricted-syntax */\n\nexport function aCorrect(quiz: QuizQuestion): boolean {\n    switch (quiz.kind) {\n        case 'juxtastat':\n            return quiz.stat_a > quiz.stat_b\n        case 'retrostat':\n            return quiz.a_ease > quiz.b_ease\n    }\n}\n\nexport function nameOfQuizKind(quizKind: QuizKind): string {\n    switch (quizKind) {\n        case 'juxtastat': return 'Juxtastat'\n        case 'retrostat': return 'Retrostat'\n        case 'custom': return 'Juxtastat Custom'\n        case 'infinite': return 'Juxtastat Infinite'\n    }\n}\n\nexport function loadJuxta(quiz: JuxtaQuestionJSON): JuxtaQuestion {\n    return { kind: 'juxtastat', ...quiz }\n}\n\nexport function loadRetro(quiz: RetroQuestionJSON): RetroQuestion {\n    return { kind: 'retrostat', a: loadJuxta(quiz.a), b: loadJuxta(quiz.b), a_ease: quiz.a_ease, b_ease: quiz.b_ease }\n}\n\n/**\n * When modifying any of the below schemas, ensure that you update exim tests with a new example version of your data.\n */\n\nexport const quizHistorySchema = z.record(\n    z.string(),\n    z.object({\n        choices: z.array(z.union([z.literal('A'), z.literal('B')])),\n        correct_pattern: z.array(z.union([z.boolean(), z.literal(0), z.literal(1)])),\n    })\n        .strict()\n        .refine(quiz => quiz.choices.length === quiz.correct_pattern.length, { message: 'Quiz choices must be the same length as quiz correct_pattern' }),\n)\n\nexport type QuizHistory = z.infer<typeof quizHistorySchema>\n\n// list of [name, id, timestamp] pairs\n// null name is a tombstone\nexport const quizFriends = z.array(z.union([\n    z.tuple([z.string(), z.string()]), // v1\n    z.tuple([z.nullable(z.string()), z.string(), z.number()]), // v2\n]))\n\nexport type QuizFriends = z.infer<typeof quizFriends>\n\nexport const quizPersonaSchema = z.object({\n    persistent_id: z.string(),\n    secure_id: z.string(),\n    quiz_history: quizHistorySchema,\n    quiz_friends: quizFriends,\n    date_exported: z.optional(z.string().pipe(z.coerce.date())),\n}).strict()\n\nexport type QuizPersona = z.infer<typeof quizPersonaSchema>\n\n// Used in sync but must be here to avoid circular dependency\nexport const syncProfileSchema = z.object({\n    quiz_history: quizHistorySchema,\n    friends: quizFriends,\n})\n\nexport class StoredProperty<T> extends Property<T> {\n    constructor(readonly localStorageKey: string, load: (storageValue: string | null) => T, private readonly store: (value: T) => string | null) {\n        super(load(localStorage.getItem(localStorageKey)))\n        const listener = (event: StorageEvent): void => {\n            if (event.key === localStorageKey) {\n                this.value = load(localStorage.getItem(localStorageKey))\n            }\n        }\n        addEventListener('storage', listener)\n    }\n\n    override get value(): T {\n        return super.value\n    }\n\n    override set value(newValue: T) {\n        const storeValue = this.store(newValue)\n        if (storeValue === null) {\n            localStorage.removeItem(this.localStorageKey)\n        }\n        else {\n            localStorage.setItem(this.localStorageKey, storeValue)\n        }\n        super.value = newValue\n    }\n}\n\nexport const loading = Symbol('loading')\n\nexport class QuizModel {\n    private constructor() {\n        // Private constructor\n    }\n\n    static shared = new QuizModel()\n\n    readonly history = new StoredProperty<QuizHistory>(\n        'quiz_history',\n        (storedValue) => {\n            const history = JSON.parse(storedValue ?? '{}') as QuizHistory\n\n            // set 42's correct_pattern's 0th element to true\n            if ('42' in history) {\n                if ('correct_pattern' in history['42']) {\n                    if (history['42'].correct_pattern.length > 0) {\n                        history['42'].correct_pattern[0] = true\n                    }\n                }\n            }\n            return history\n        },\n        value => JSON.stringify(value),\n    )\n\n    readonly friends = new StoredProperty<QuizFriends>(\n        'quiz_friends',\n        (storedValue) => {\n            return JSON.parse(storedValue ?? '[]') as QuizFriends\n        },\n        value => JSON.stringify(value),\n    )\n\n    readonly uniquePersistentId = new StoredProperty<string>('persistent_id', () => createAndStoreId('persistent_id'), value => value)\n\n    readonly uniqueSecureId = new StoredProperty<string>('secure_id', () => createAndStoreId('secure_id'), value => value)\n\n    readonly authenticationError = new Property<boolean>(false)\n\n    readonly dismissAuthNag = new StoredProperty<number | null>('dismiss_auth_nag', v => z.nullable(z.coerce.number()).parse(v), v => v?.toString() ?? null)\n\n    exportQuizPersona(): void {\n        const exported: QuizPersona = {\n            date_exported: new Date(),\n            persistent_id: this.uniquePersistentId.value,\n            secure_id: this.uniqueSecureId.value,\n            quiz_history: this.history.value,\n            quiz_friends: this.friends.value,\n        }\n        const data = JSON.stringify(exported, null, 2)\n        saveAs(new Blob([data], { type: 'application/json' }), `urbanstats_quiz_${exported.persistent_id}.json`)\n    }\n\n    async importQuizPersona(): Promise<void> {\n        const file = await uploadFile('.json')\n        if (file === cancelled) {\n            return\n        }\n\n        try {\n            const text = await file.text()\n            const persona = quizPersonaSchema.parse(JSON.parse(text))\n\n            const currentHistory = this.history.value\n            let newHistory: QuizHistory\n\n            const conflicts = historyConflicts(currentHistory, persona.quiz_history)\n\n            if (conflicts.length > 0) {\n                if (confirm(`The following quiz results exist both locally and in the uploaded file, and are different:\n\n${conflicts.map(key => `â€¢ ${key.startsWith('W') ? 'Retrostat' : 'Juxtastat'} ${key}`).join('\\n')}\n\nAre you sure you want to merge them? (The lowest score will be used)`)) {\n                    newHistory = mergeHistories(currentHistory, persona.quiz_history)\n                }\n                else {\n                    return\n                }\n            }\n            else {\n                // There is not a conflict\n                newHistory = { ...currentHistory, ...persona.quiz_history }\n            }\n\n            this.history.value = newHistory\n            this.friends.value = persona.quiz_friends\n            this.uniquePersistentId.value = persona.persistent_id\n            this.uniqueSecureId.value = persona.secure_id\n        }\n        catch (error) {\n            alert(`Could not parse file. Error: ${error}`)\n        }\n    }\n\n    userHeaders(): { 'x-user': string, 'x-secure-id': string } {\n        return {\n            'x-user': this.uniquePersistentId.value,\n            'x-secure-id': this.uniqueSecureId.value,\n        }\n    }\n}\n\nfunction createAndStoreId(key: string): string {\n    // (domain name, id stored in local storage)\n    // random 60 bit hex number\n    // (15 hex digits)\n    if (localStorage.getItem(key) === null) {\n        // register\n        localStorage.setItem(key, randomID())\n    }\n    return localStorage.getItem(key)!\n}\n\n// represents a quiz, which is a collection of questions. Designed so quizzes can be infinite\nexport interface QuizQuestionsModel {\n    questionByIndex: (index: number) => Promise<QuizQuestion | undefined>\n    // undefined if the quiz is infinite\n    length: number | undefined\n    isDone: (correctPattern: boolean[]) => boolean\n    uniqueKey: string\n}\n\nlet numKeys = 0\n\nfunction uniqueKey(): string {\n    numKeys++\n    return `quiz-${numKeys}`\n}\n\nexport function wrapQuestionsModel(questions: QuizQuestion[]): QuizQuestionsModel {\n    return {\n        questionByIndex: (index: number) => Promise.resolve(questions[index]),\n        length: questions.length,\n        isDone: (correctPattern: boolean[]) => correctPattern.length === questions.length,\n        uniqueKey: uniqueKey(),\n    }\n}\n\nexport function infiniteQuiz(seed: string, version: number): QuizQuestionsModel {\n    return {\n        questionByIndex: (index: number) => sampleRandomQuestion(seed, version, index),\n        length: undefined,\n        isDone: (correctPattern: boolean[]) => infiniteQuizIsDone(correctPattern),\n        uniqueKey: uniqueKey(),\n    }\n}\n\nexport function getCorrectPattern(history: QuizHistory, name: QuizDescriptor['name']): boolean[] {\n    return (history[name] ?? { choices: [], correct_pattern: [] }).correct_pattern.map(correct => correct ? true : false)\n}\n","import createClient from 'openapi-fetch'\n\nimport type { paths } from './google-drive' // generated by openapi-typescript\n\nexport function gdriveClient(token: string): typeof client {\n    const client = createClient<paths>({ baseUrl: 'https://www.googleapis.com/drive/v3', fetch(input) {\n        input.headers.append('Authorization', `Bearer ${token}`)\n        return globalThis.fetch(input)\n    } })\n    return client\n}\n","import stableStringify from 'json-stable-stringify'\nimport { z } from 'zod'\n\nimport { TestUtils } from '../utils/TestUtils'\nimport { gdriveClient } from '../utils/google-drive-client'\n\nimport { QuizFriends, QuizHistory, QuizModel, syncProfileSchema } from './quiz'\n\nexport class AuthenticationError extends Error {}\n\nexport async function syncWithGoogleDrive(token: string): Promise<void> {\n    const { fileId, profile: remoteProfile } = await getProfileFile(token)\n    const localProfile = getLocalProfile()\n    if (stableStringify(remoteProfile) === stableStringify(localProfile)) {\n        // Profiles same\n        return\n    }\n    const mergedProfile = mergeProfiles(localProfile, remoteProfile)\n    QuizModel.shared.history.value = mergedProfile.quiz_history\n    QuizModel.shared.friends.value = mergedProfile.friends\n    await uploadProfile(token, mergedProfile, fileId)\n}\n\ntype Profile = z.infer<typeof syncProfileSchema>\n\nfunction getLocalProfile(): Profile {\n    return {\n        quiz_history: QuizModel.shared.history.value,\n        friends: QuizModel.shared.friends.value,\n    }\n}\n\nfunction mergeProfiles(a: Profile, b: Profile): Profile {\n    return {\n        quiz_history: mergeHistories(a.quiz_history, b.quiz_history),\n        friends: mergeFriends(a.friends, b.friends),\n    }\n}\n\nexport function historyConflicts(a: QuizHistory, b: QuizHistory): string[] {\n    return Object.keys(a)\n        .filter(key =>\n            key in b\n            && stableStringify(a[key]) !== stableStringify(b[key]))\n}\n\n// When a result ties, we must resolve it consistently, otherwise we get into a sync loop\nexport function mergeHistories(a: QuizHistory, b: QuizHistory): QuizHistory {\n    const conflicts = historyConflicts(a, b)\n    return {\n        ...a, ...b, ...Object.fromEntries(conflicts.map((key) => {\n            const aPattern = a[key].correct_pattern\n            const bPattern = b[key].correct_pattern\n            if (aPattern.length !== bPattern.length) {\n                // If one is more complete, return that one, since the user is taking the quiz\n                return [key, aPattern.length > bPattern.length ? a[key] : b[key]]\n            }\n\n            const aCorrect = aPattern.filter(value => value).length\n            const bCorrect = bPattern.filter(value => value).length\n            let quizRecord\n            if (aCorrect !== bCorrect) {\n                quizRecord = bCorrect > aCorrect ? a[key] : b[key]\n            }\n            else {\n                quizRecord = stableStringify(bCorrect)! > stableStringify(aCorrect)! ? a[key] : b[key]\n            }\n            return [key, quizRecord]\n        })),\n    }\n}\n\n/*\n * Merge friends.\n * When two lists have overlapping ids, the entry that has the lowest index in its list wins\n * When both entries have the same index, the lowest name wins\n */\nfunction mergeFriends(a: QuizFriends, b: QuizFriends): QuizFriends {\n    let aIdx = 0\n    let bIdx = 0\n    const result: QuizFriends = []\n    const usedIds = new Set<string>()\n    while (aIdx < a.length && bIdx < b.length) {\n        if (a[aIdx][1] === b[bIdx][1]) {\n            // ids same\n            if (!usedIds.has(a[aIdx][1])) {\n                // prefer latest timestamp\n                if ((a[aIdx][2] ?? 0) > (b[bIdx][2] ?? 0)) {\n                    result.push(a[aIdx])\n                }\n                else {\n                    result.push(b[bIdx])\n                }\n                usedIds.add(a[aIdx][1])\n            }\n            aIdx++\n            bIdx++\n        }\n        // sort by timestamp\n        else if ((a[aIdx][2] ?? 0) < (b[bIdx][2] ?? 0)) {\n            if (!usedIds.has(a[aIdx][1])) {\n                result.push(a[aIdx])\n                usedIds.add(a[aIdx][1])\n            }\n            aIdx++\n        }\n        else {\n            if (!usedIds.has(b[aIdx][1])) {\n                result.push(b[aIdx])\n                usedIds.add(b[aIdx][1])\n            }\n            bIdx++\n        }\n    }\n    return result.concat(a.slice(aIdx)).concat(b.slice(bIdx))\n}\n\nfunction getFileName(): string {\n    // eslint-disable-next-line no-restricted-syntax -- Storing remote file\n    return `${window.location.host}${TestUtils.shared.testIterationId !== undefined ? `.${TestUtils.shared.testIterationId}` : ''}.profile.json`\n}\n\nasync function getProfileFile(token: string): Promise<{ fileId: string, profile: Profile }> {\n    const { data, response } = await gdriveClient(token).GET('/files', { params: {\n        query: { spaces: 'appDataFolder', fields: 'files(id, name)', q: `name = '${getFileName()}'` },\n    } })\n\n    if (data === undefined) {\n        const message = `Sync problem, could not get files. Ensure Urban Stats has access to Google Drive.`\n        if (response.status === 401 || response.status === 403) {\n            throw new AuthenticationError(message)\n        }\n        throw new Error(message)\n    }\n\n    const profileFile = data.files?.[0]\n    if (profileFile === undefined) {\n        const profile = getLocalProfile()\n\n        return {\n            fileId: await uploadProfile(token, profile),\n            profile,\n        }\n    }\n    else {\n        const fileId = z.string().parse(profileFile.id)\n        const { data: fileData } = await gdriveClient(token).GET('/files/{fileId}', {\n            params: {\n                path: { fileId },\n                query: { alt: 'media' },\n            },\n            parseAs: 'json',\n        })\n\n        const { data: profile } = syncProfileSchema.safeParse(fileData)\n        if (profile === undefined) {\n            console.warn('Parsing profile failed during sync... falling back to default profile')\n        }\n        const defaultProfile = {\n            quiz_history: {},\n            friends: [],\n        }\n        return { fileId, profile: profile ?? defaultProfile }\n    }\n}\n\nasync function uploadProfile(token: string, json: unknown, existingFileId?: string): Promise<string> {\n    const fileMetadata = {\n        name: getFileName(),\n        parents: existingFileId ? undefined : ['appDataFolder'],\n    }\n    const media = {\n        mimeType: 'application/json',\n        body: stableStringify(json)!,\n    }\n\n    const multipart = new FormData()\n\n    multipart.append(\n        'metadata',\n        new Blob([JSON.stringify(fileMetadata)], { type: 'application/json' }),\n    )\n    multipart.append(\n        'media',\n        new Blob([media.body], { type: media.mimeType }),\n    )\n\n    const response = await fetch(`https://www.googleapis.com/upload/drive/v3/files${existingFileId ? `/${existingFileId}` : ''}?uploadType=multipart`, {\n        method: existingFileId ? 'PATCH' : 'POST',\n        headers: {\n            Authorization: `Bearer ${token}`,\n        },\n        body: multipart,\n    })\n\n    if (!response.ok) {\n        throw new Error('Could not upload profile file')\n    }\n\n    return z.object({ id: z.string() }).parse(await response.json()).id\n}\n","import { useEffect, useState } from 'react'\n\nexport class Property<T> {\n    private _value: T\n    readonly observers = new Set<() => void>()\n\n    constructor(value: T) {\n        this._value = value\n    }\n\n    get value(): T {\n        return this._value\n    }\n\n    set value(newValue: T) {\n        this._value = newValue\n        this.observers.forEach((observer) => { observer() })\n    }\n\n    /* eslint-disable react-hooks/rules-of-hooks -- Custom hook method */\n    use(): T {\n        const [, setCounter] = useState(0)\n        useEffect(() => {\n            const observer = (): void => {\n                setCounter(counter => counter + 1)\n            }\n            this.observers.add(observer)\n            return () => {\n                this.observers.delete(observer)\n            }\n        }, [])\n        return this.value\n    }\n    /* eslint-enable react-hooks/rules-of-hooks */\n}\n","export const cancelled = Symbol()\n\nexport function uploadFile(accept: string): Promise<File | typeof cancelled> {\n    const inputElement = document.createElement('input')\n    inputElement.setAttribute('type', 'file')\n    inputElement.setAttribute('accept', accept)\n    inputElement.style.display = 'none'\n    const result = new Promise<File | typeof cancelled>((resolve) => {\n        inputElement.onchange = () => {\n            resolve(inputElement.files![0])\n            inputElement.remove()\n        }\n        inputElement.oncancel = () => {\n            resolve(cancelled)\n            inputElement.remove()\n        }\n    })\n\n    document.body.appendChild(inputElement)\n    inputElement.click()\n\n    return result\n}\n"],"names":["aCorrect","quiz","nameOfQuizKind","quizKind","loadJuxta","loadRetro","quizHistorySchema","z","quizFriends","quizPersonaSchema","syncProfileSchema","StoredProperty","localStorageKey","load","store","localStorage","addEventListener","event","newValue","storeValue","Property","loading","Symbol","QuizModel","storedValue","history","JSON","value","createAndStoreId","v","_v_toString","exportQuizPersona","exported","Date","data","saveAs","Blob","importQuizPersona","file","text","persona","currentHistory","newHistory","conflicts","error","uploadFile","cancelled","historyConflicts","confirm","key","mergeHistories","alert","userHeaders","randomID","numKeys","uniqueKey","wrapQuestionsModel","questions","index","Promise","correctPattern","infiniteQuiz","seed","version","sampleRandomQuestion","undefined","infiniteQuizIsDone","getCorrectPattern","name","_history_name","correct","gdriveClient","token","createClient","fetch","input","globalThis","AuthenticationError","Error","syncWithGoogleDrive","_ref","fileId","remoteProfile","localProfile","mergedProfile","a","b","_data_files","response","message","profileFile","profile","fileData","profile1","defaultProfile","getFileName","getLocalProfile","uploadProfile","_ref1","_syncProfileSchema_safeParse","console","stableStringify","mergeFriends","_a_aIdx_","_b_bIdx_","_a_aIdx_1","_b_bIdx_1","aIdx","bIdx","result","usedIds","Set","Object","quizRecord","aPattern","bPattern","bCorrect","TestUtils","window","json","existingFileId","fileMetadata","media","multipart","FormData","observer","use","setCounter","_useState","useEffect","counter","t","accept","inputElement","document","resolve"],"mappings":"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"}