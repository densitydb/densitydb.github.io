{"version":3,"file":"123.js","sources":["webpack://assets/./src/components/display-stats.tsx","webpack://assets/./src/components/unit-display.tsx","webpack://assets/./src/components/statistic-panel.tsx"],"sourcesContent":["import React, { CSSProperties, ReactNode } from 'react'\n\nimport { useColors } from '../page_template/colors'\nimport { useSetting } from '../page_template/settings'\nimport { UnitType } from '../utils/unit'\n\nimport { classifyStatistic, getUnitDisplay } from './unit-display'\n\nexport function Statistic(props: { style?: React.CSSProperties, statname: string, value: number, isUnit: boolean, unit?: UnitType }): ReactNode {\n    const [useImperial] = useSetting('use_imperial')\n    const [temperatureUnit] = useSetting('temperature_unit')\n\n    const statisticType = props.unit ?? classifyStatistic(props.statname)\n    const unitDisplay = getUnitDisplay(statisticType)\n    const { value, unit } = unitDisplay.renderValue(props.value, useImperial, temperatureUnit)\n\n    return (\n        <span style={props.style}>\n            {props.isUnit ? unit : value}\n        </span>\n    )\n}\n\nexport function ElectionResult(props: { value: number }): ReactNode {\n    const colors = useColors()\n    // check if value is NaN\n    if (props.value !== props.value) {\n        return <span>N/A</span>\n    }\n    const value = Math.abs(props.value) * 100\n    const places = value > 10 ? 1 : value > 1 ? 2 : value > 0.1 ? 3 : 4\n    const text = value.toFixed(places)\n    const party = props.value > 0 ? 'D' : 'R'\n    const partyColor = props.value > 0 ? colors.hueColors.blue : colors.hueColors.red\n    const spanStyle: CSSProperties = {\n        color: partyColor,\n        // So that on 4 digits, we overflow left\n        display: 'flex',\n        justifyContent: 'flex-end',\n    }\n    return (\n        <span style={spanStyle}>\n            {party}\n            +\n            {text}\n        </span>\n    )\n}\n\nexport function Percentile(props: {\n    ordinal: number\n    total: number\n    percentileByPopulation: number\n    simpleOrdinals: boolean\n}): ReactNode {\n    const ordinal = props.ordinal\n    const total = props.total\n    if (ordinal > total) {\n        return <span></span>\n    }\n    // percentile as an integer\n    // used to be keyed by a setting, but now we always use percentile_by_population\n    const percentile = props.percentileByPopulation\n    // something like Xth percentile\n    let text = `${percentile}th percentile`\n    if (props.simpleOrdinals) {\n        text = `${percentile.toString()}%`\n    }\n    else if (percentile % 10 === 1 && percentile % 100 !== 11) {\n        text = `${percentile}st percentile`\n    }\n    else if (percentile % 10 === 2 && percentile % 100 !== 12) {\n        text = `${percentile}nd percentile`\n    }\n    else if (percentile % 10 === 3 && percentile % 100 !== 13) {\n        text = `${percentile}rd percentile`\n    }\n    return <div className=\"serif\" style={{ textAlign: 'right', marginRight: props.simpleOrdinals ? '5px' : undefined }}>{text}</div>\n}\n","import React, { ReactNode } from 'react'\n\nimport { separateNumber } from '../utils/text'\nimport { UnitType } from '../utils/unit'\n\nimport { ElectionResult } from './display-stats'\n\nexport interface UnitDisplay {\n    renderValue: (value: number, useImperial?: boolean, temperatureUnit?: string) => {\n        value: ReactNode\n        unit: ReactNode\n    }\n}\n\nexport function getUnitDisplay(unitType: UnitType): UnitDisplay {\n    switch (unitType) {\n        case 'percentage':\n            return {\n                renderValue: (value: number) => {\n                    return {\n                        value: <span>{(value * 100).toFixed(2)}</span>,\n                        unit: <span>%</span>,\n                    }\n                },\n            }\n        case 'fatalities':\n            return {\n                renderValue: (value: number) => {\n                    return {\n                        value: <span>{separateNumber(value.toFixed(0))}</span>,\n                        unit: <span>&nbsp;</span>,\n                    }\n                },\n            }\n        case 'fatalitiesPerCapita':\n            return {\n                renderValue: (value: number) => {\n                    return {\n                        value: <span>{(100_000 * value).toFixed(2)}</span>,\n                        unit: <span>/100k</span>,\n                    }\n                },\n            }\n        case 'density':\n            return {\n                renderValue: (value: number, useImperial?: boolean) => {\n                    let unitName = 'km'\n                    let adjustedValue = value\n                    if (useImperial) {\n                        unitName = 'mi'\n                        adjustedValue *= 1.60934 * 1.60934\n                    }\n                    let places = 2\n                    if (adjustedValue > 10) {\n                        places = 0\n                    }\n                    else if (adjustedValue > 1) {\n                        places = 1\n                    }\n                    return {\n                        value: <span>{separateNumber(adjustedValue.toFixed(places))}</span>,\n                        unit: (\n                            <span>\n                                /&nbsp;\n                                {unitName}\n                                <sup>2</sup>\n                            </span>\n                        ),\n                    }\n                },\n            }\n        case 'population':\n            return {\n                renderValue: (value: number) => {\n                    if (value > 1e9) {\n                        return {\n                            value: <span>{(value / 1e9).toPrecision(3)}</span>,\n                            unit: <span>B</span>,\n                        }\n                    }\n                    if (value > 1e6) {\n                        return {\n                            value: <span>{(value / 1e6).toPrecision(3)}</span>,\n                            unit: <span>m</span>,\n                        }\n                    }\n                    else if (value > 1e4) {\n                        return {\n                            value: <span>{(value / 1e3).toPrecision(3)}</span>,\n                            unit: <span>k</span>,\n                        }\n                    }\n                    else {\n                        return {\n                            value: <span>{separateNumber(value.toFixed(0))}</span>,\n                            unit: <span>&nbsp;</span>,\n                        }\n                    }\n                },\n            }\n        case 'area':\n            return {\n                renderValue: (value: number, useImperial?: boolean) => {\n                    let adjustedValue = value\n                    let unit: React.ReactElement\n                    if (useImperial) {\n                        adjustedValue /= 1.60934 * 1.60934\n                        if (adjustedValue < 1) {\n                            unit = <span>acres</span>\n                            adjustedValue *= 640\n                        }\n                        else {\n                            unit = (\n                                <span>\n                                    mi\n                                    <sup>2</sup>\n                                </span>\n                            )\n                        }\n                    }\n                    else {\n                        if (adjustedValue < 0.01) {\n                            adjustedValue *= 1000 * 1000\n                            unit = (\n                                <span>\n                                    m\n                                    <sup>2</sup>\n                                </span>\n                            )\n                        }\n                        else {\n                            unit = (\n                                <span>\n                                    km\n                                    <sup>2</sup>\n                                </span>\n                            )\n                        }\n                    }\n                    let places = 3\n                    if (adjustedValue > 100) {\n                        places = 0\n                    }\n                    else if (adjustedValue > 10) {\n                        places = 1\n                    }\n                    else if (adjustedValue > 1) {\n                        places = 2\n                    }\n                    let rendered = adjustedValue.toFixed(places)\n                    if (places === 0) {\n                        rendered = separateNumber(rendered)\n                    }\n                    return {\n                        value: <span>{rendered}</span>,\n                        unit,\n                    }\n                },\n            }\n        case 'distanceInKm':\n            return {\n                renderValue: (value: number, useImperial?: boolean) => {\n                    let unit = <span>km</span>\n                    let adjustedValue = value\n                    if (useImperial) {\n                        unit = <span>mi</span>\n                        adjustedValue /= 1.60934\n                    }\n                    return {\n                        value: <span>{adjustedValue.toFixed(2)}</span>,\n                        unit,\n                    }\n                },\n            }\n        case 'distanceInM':\n            return {\n                renderValue: (value: number, useImperial?: boolean) => {\n                    let unitName = 'm'\n                    let adjustedValue = value\n                    if (useImperial) {\n                        unitName = 'ft'\n                        adjustedValue *= 3.28084\n                    }\n                    return {\n                        value: <span>{separateNumber(adjustedValue.toFixed(0))}</span>,\n                        unit: <span>{unitName}</span>,\n                    }\n                },\n            }\n        case 'democraticMargin':\n            return {\n                renderValue: (value: number) => {\n                    return {\n                        value: <ElectionResult value={value} />,\n                        unit: <span>%</span>,\n                    }\n                },\n            }\n        case 'temperature':\n            return {\n                renderValue: (value: number, useImperial?: boolean, temperatureUnit?: string) => {\n                    let unit = <span>&deg;F</span>\n                    let adjustedValue = value\n                    if (temperatureUnit === 'celsius') {\n                        unit = <span>&deg;C</span>\n                        adjustedValue = (value - 32) * (5 / 9)\n                    }\n                    return {\n                        value: <span>{adjustedValue.toFixed(1)}</span>,\n                        unit,\n                    }\n                },\n            }\n        case 'time':\n            return {\n                renderValue: (value: number) => {\n                    const hours = Math.floor(value)\n                    const minutes = Math.floor((value - hours) * 60)\n                    return {\n                        value: (\n                            <span>\n                                {hours}\n                                :\n                                {minutes.toString().padStart(2, '0')}\n                            </span>\n                        ),\n                        unit: <span>&nbsp;</span>,\n                    }\n                },\n            }\n        case 'distancePerYear':\n            return {\n                renderValue: (value: number, useImperial?: boolean) => {\n                    let adjustedValue = value * 100\n                    let unit = 'cm'\n                    if (useImperial) {\n                        unit = 'in'\n                        adjustedValue /= 2.54\n                    }\n                    return {\n                        value: <span>{adjustedValue.toFixed(1)}</span>,\n                        unit: (\n                            <span>\n                                {unit}\n                                /yr\n                            </span>\n                        ),\n                    }\n                },\n            }\n        case 'contaminantLevel':\n            return {\n                renderValue: (value: number) => {\n                    return {\n                        value: <span>{value.toFixed(2)}</span>,\n                        unit: (\n                            <span>\n                                &mu;g/m\n                                <sup>3</sup>\n                            </span>\n                        ),\n                    }\n                },\n            }\n        case 'number':\n            return {\n                renderValue: (value: number) => {\n                    return {\n                        value: <span>{value.toFixed(3)}</span>,\n                        unit: <span>&nbsp;</span>,\n                    }\n                },\n            }\n        case 'usd':\n            return {\n                renderValue: (value: number) => {\n                    if (value > 1e9) {\n                        return {\n                            value: (\n                                <span>\n                                    $\n                                    {(value / 1e9).toPrecision(3)}\n                                </span>\n                            ),\n                            unit: <span>B</span>,\n                        }\n                    }\n                    if (value > 1e6) {\n                        return {\n                            value: (\n                                <span>\n                                    $\n                                    {(value / 1e6).toPrecision(3)}\n                                </span>\n                            ),\n                            unit: <span>m</span>,\n                        }\n                    }\n                    else if (value > 1e3) {\n                        return {\n                            value: (\n                                <span>\n                                    $\n                                    {(value / 1e3).toPrecision(3)}\n                                </span>\n                            ),\n                            unit: <span>k</span>,\n                        }\n                    }\n                    else {\n                        return {\n                            value: (\n                                <span>\n                                    $\n                                    {separateNumber(value.toFixed(0))}\n                                </span>\n                            ),\n                            unit: <span>&nbsp;</span>,\n                        }\n                    }\n                },\n            }\n        case 'minutes':\n            return {\n                renderValue: (value: number) => {\n                    const hours = Math.floor(value / 60)\n                    const minutes = Math.floor(value % 60)\n\n                    if (hours > 0) {\n                        return {\n                            value: (\n                                <span>\n                                    {hours}\n                                    :\n                                    {minutes.toString().padStart(2, '0')}\n                                </span>\n                            ),\n                            unit: <span>&nbsp;</span>,\n                        }\n                    }\n                    else {\n                        return {\n                            value: <span>{minutes}</span>,\n                            unit: <span>&nbsp;</span>,\n                        }\n                    }\n                },\n            }\n    }\n}\n\nexport function classifyStatistic(statname: string): UnitType {\n    if (statname.includes('%') || statname.includes('Change') || statname.includes('(Grade)')) {\n        return 'percentage'\n    }\n    if (statname.includes('Total') && statname.includes('Fatalities')) {\n        return 'fatalities'\n    }\n    if (statname.includes('Fatalities Per Capita')) {\n        return 'fatalitiesPerCapita'\n    }\n    if (statname.includes('Density')) {\n        return 'density'\n    }\n    if (statname.includes('Elevation')) {\n        return 'distanceInM'\n    }\n    if (statname.startsWith('Population')) {\n        return 'population'\n    }\n    if (statname === 'Area') {\n        return 'area'\n    }\n    if (statname.includes('Mean distance')) {\n        return 'distanceInKm'\n    }\n    if (statname.includes('Election') || statname.includes('Swing')) {\n        return 'democraticMargin'\n    }\n    if (statname.includes('high temp') || statname.includes('low temp') || statname.includes('high heat index') || statname.includes('dewpt')) {\n        return 'temperature'\n    }\n    if (statname === 'Mean sunny hours') {\n        return 'time'\n    }\n    if (statname === 'Rainfall' || statname === 'Snowfall [rain-equivalent]') {\n        return 'distancePerYear'\n    }\n    if (statname.includes('Pollution')) {\n        return 'contaminantLevel'\n    }\n    if (statname.includes('(USD)')) {\n        return 'usd'\n    }\n    if (statname.includes('(min)')) {\n        return 'minutes'\n    }\n    return 'number'\n}\n","import React, { ChangeEvent, CSSProperties, ReactNode, useContext, useEffect, useMemo, useRef, useState } from 'react'\n\nimport universes_ordered from '../data/universes_ordered'\nimport { Navigator } from '../navigation/Navigator'\nimport { sanitize, statisticDescriptor } from '../navigation/links'\nimport { useColors } from '../page_template/colors'\nimport { useSetting } from '../page_template/settings'\nimport { StatName } from '../page_template/statistic-tree'\nimport { PageTemplate } from '../page_template/template'\nimport '../common.css'\nimport './article.css'\nimport { useUniverse } from '../universe'\nimport { useHeaderTextClass, useSubHeaderTextClass } from '../utils/responsive'\nimport { displayType } from '../utils/text'\n\nimport { CountsByUT } from './countsByArticleType'\nimport { CSVExportData } from './csv-export'\nimport { Statistic, Percentile } from './display-stats'\nimport { forType, StatCol } from './load-article'\nimport { PointerArrow } from './pointer-cell'\nimport { useScreenshotMode } from './screenshot'\n\nconst tableStyle = { display: 'flex', flexDirection: 'column', padding: '1px' } as const\nconst columnNames = ['Ordinal', 'Name', 'Value', '', 'Percentile']\nconst columnWidths = ['15%', '60%', '20%', '10%', '20%']\nconst columnStyles = [\n    { textAlign: 'right', paddingRight: '1em' },\n    { textAlign: 'left' },\n    { textAlign: 'right' },\n    { textAlign: 'left' },\n    { textAlign: 'right' },\n] as const\n\nexport interface StatisticPanelProps {\n    start: number\n    amount: number\n    count: number\n    order: 'ascending' | 'descending'\n    joinedString: string\n    statcol: StatCol\n    statname: StatName\n    articleType: string\n    articleNames: string[]\n    highlight: string | undefined\n    renderedStatname: string\n    data: {\n        value: number[]\n        populationPercentile: number[]\n    }\n    explanationPage: string\n    counts: CountsByUT\n}\n\nexport function StatisticPanel(props: StatisticPanelProps): ReactNode {\n    const colors = useColors()\n    const headersRef = useRef<HTMLDivElement>(null)\n    const tableRef = useRef<HTMLDivElement>(null)\n\n    const isAscending = props.order === 'ascending'\n\n    const navContext = useContext(Navigator.Context)\n\n    const indexRange = useMemo(() => {\n        const start = props.start - 1\n        let end = start + props.amount\n        if (end + props.amount > props.count) {\n            end = props.count\n        }\n        const total = props.count\n        const result = Array.from({ length: end - start }, (_, i) => {\n            if (isAscending) {\n                return total - start - i - 1\n            }\n            return start + i\n        })\n        return result\n    }, [props.start, props.amount, props.count, isAscending])\n\n    const swapAscendingDescending = (currentUniverse: string | undefined): void => {\n        const newOrder = isAscending ? 'descending' : 'ascending'\n        void navContext.navigate(statisticDescriptor({\n            universe: currentUniverse,\n            statname: props.statname,\n            articleType: props.articleType,\n            start: 1,\n            amount: props.amount,\n            order: newOrder,\n        }), {\n            history: 'push',\n            scroll: { kind: 'none' },\n        })\n    }\n\n    const backgroundColor = (rowIdx: number): string => {\n        if (rowIdx > 0) {\n            const nameAtIdx = props.articleNames[indexRange[rowIdx - 1]]\n            if (nameAtIdx === props.highlight) {\n                return colors.highlight\n            }\n        }\n        if (rowIdx % 2 === 1) {\n            return colors.slightlyDifferentBackground\n        }\n        return colors.background\n    }\n\n    const style = (colIdx: number, rowIdx: number): CSSProperties => {\n        let result: CSSProperties = { ...tableStyle }\n        if (rowIdx === 0) {\n            // header, add a line at the bottom\n            result.borderBottom = `1px solid ${colors.textMain}`\n            result.fontWeight = 500\n        }\n        result.backgroundColor = backgroundColor(rowIdx)\n        result.width = columnWidths[colIdx]\n        result = { ...result, ...columnStyles[colIdx] }\n        return result\n    }\n\n    const textHeaderClass = useHeaderTextClass()\n\n    const universesFiltered = universes_ordered.filter(\n        universe => forType(props.counts, universe, props.statcol, props.articleType) > 0,\n    )\n\n    const generateStatisticsCSVData = (): string[][] => {\n        const headerRow = ['Rank', 'Name', 'Value', 'Percentile']\n        const dataRows: string[][] = []\n\n        // Include all data, not just the current page\n        for (let i = 0; i < props.articleNames.length; i++) {\n            const rank = i + 1\n            const name = props.articleNames[i]\n            const value = props.data.value[i]\n            const percentile = props.data.populationPercentile[i]\n\n            const formattedValue = value.toLocaleString()\n\n            dataRows.push([\n                rank.toString(),\n                name,\n                formattedValue,\n                percentile.toFixed(1),\n            ])\n        }\n\n        return [headerRow, ...dataRows]\n    }\n\n    const csvData = generateStatisticsCSVData()\n    const csvFilename = `${sanitize(props.joinedString)}.csv`\n    const csvExportData: CSVExportData = { csvData, csvFilename }\n\n    return (\n        <PageTemplate\n            screencapElements={() => ({\n                path: `${sanitize(props.joinedString)}.png`,\n                overallWidth: tableRef.current!.offsetWidth * 2,\n                elementsToRender: [headersRef.current!, tableRef.current!],\n            })}\n            csvExportData={csvExportData}\n            hasUniverseSelector={true}\n            universes={universesFiltered}\n        >\n            <div>\n                <div ref={headersRef}>\n                    <div className={textHeaderClass}>{props.renderedStatname}</div>\n                    {/* // TODO plural */}\n                    <StatisticPanelSubhead\n                        articleType={props.articleType}\n                        renderedOther={props.order}\n                    />\n                </div>\n                <div style={{ marginBlockEnd: '16px' }}></div>\n                <div className=\"serif\" ref={tableRef}>\n                    <div style={{ display: 'flex' }}>\n                        {columnNames.map((name, i) => {\n                            if (i === 0) {\n                                return (\n                                    <div key={name} style={{ ...style(i, 0), display: 'flex', justifyContent: 'space-between', flexDirection: 'row' }}>\n                                        <div>{name}</div>\n                                        <AscendingVsDescending onClick={(currentUniverse) => { swapAscendingDescending(currentUniverse) }} isAscending={isAscending} />\n                                    </div>\n                                )\n                            }\n                            return <div key={name} style={style(i, 0)}>{name}</div>\n                        })}\n                    </div>\n                    {\n                        indexRange.map((i, rowIdx) => (\n                            <div\n                                key={i}\n                                style={{\n                                    display: 'flex', alignItems: 'baseline', backgroundColor: backgroundColor(rowIdx + 1),\n                                }}\n                            >\n                                <div style={style(0, rowIdx + 1)}>{i + 1}</div>\n                                <div style={style(1, rowIdx + 1)}>\n                                    <ArticleLink longname={props.articleNames[i]} />\n                                </div>\n                                <div style={style(2, rowIdx + 1)} className=\"value\">\n                                    <Statistic\n                                        statname={props.statname}\n                                        value={props.data.value[i]}\n                                        isUnit={false}\n                                    />\n                                </div>\n                                <div style={style(3, rowIdx + 1)} className=\"value_unit value\">\n                                    <Statistic\n                                        statname={props.statname}\n                                        value={props.data.value[i]}\n                                        isUnit={true}\n                                    />\n                                </div>\n                                <div style={style(4, rowIdx + 1)}>\n                                    <AutoPercentile\n                                        ordinal={0}\n                                        totalCountInClass={0}\n                                        data={props.data}\n                                        i={i}\n                                    />\n                                </div>\n                            </div>\n                        ))\n                    }\n                </div>\n                <div style={{ marginBlockEnd: '1em' }}></div>\n                <Pagination\n                    {...props}\n                />\n            </div>\n        </PageTemplate>\n    )\n}\n\nfunction Pagination(props: {\n    start: number\n    count: number\n    amount: number\n    explanationPage: string\n    statname: StatName\n    articleType: string\n    order: 'ascending' | 'descending'\n}): ReactNode {\n    // next and previous buttons, along with the current range (editable to jump to a specific page)\n    // also a button to change the number of items per page\n\n    const currentUniverse = useUniverse()\n\n    const navContext = useContext(Navigator.Context)\n\n    const changeStart = (newStart: number): void => {\n        void navContext.navigate(statisticDescriptor({\n            universe: currentUniverse,\n            ...props,\n            start: newStart,\n        }), {\n            history: 'push',\n            scroll: { kind: 'none' },\n        })\n    }\n\n    const changeAmount = (newAmount: string | number): void => {\n        let start = props.start\n        let newAmountNum: number\n        if (newAmount === 'All') {\n            start = 1\n            newAmountNum = props.count\n        }\n        else if (typeof newAmount === 'string') {\n            newAmountNum = parseInt(newAmount)\n        }\n        else {\n            newAmountNum = newAmount\n        }\n        if (start > props.count - newAmountNum) {\n            start = props.count - newAmountNum + 1\n        }\n        void navContext.navigate(statisticDescriptor({\n            universe: currentUniverse,\n            statname: props.statname,\n            articleType: props.articleType,\n            start,\n            amount: newAmount === 'All' ? 'All' : newAmountNum,\n            order: props.order,\n        }), {\n            history: 'push',\n            scroll: { kind: 'none' },\n        })\n    }\n\n    const current = props.start\n    const total = props.count\n    const perPage = props.amount\n    const prev = Math.max(1, current - perPage)\n    const maxPages = Math.max(Math.floor(total / perPage), 1)\n    const maxPageStart = (maxPages - 1) * perPage + 1\n    const next = Math.min(maxPageStart, current + perPage)\n    const currentPage = Math.ceil(current / perPage)\n\n    useEffect(() => {\n        const goToPage = (newPage: number): void => {\n            void navContext.navigate(statisticDescriptor({\n                universe: currentUniverse,\n                statname: props.statname,\n                articleType: props.articleType,\n                amount: props.amount,\n                order: props.order,\n                start: (newPage - 1) * perPage + 1,\n            }), {\n                history: 'replace',\n                scroll: { kind: 'none' },\n            })\n        }\n\n        if (currentPage > maxPages) {\n            goToPage(maxPages)\n        }\n        else if (currentPage < 1) {\n            goToPage(1)\n        }\n    }, [currentPage, maxPages, currentUniverse, perPage, props.statname, props.articleType, props.amount, props.order, navContext])\n\n    const selectPage = (\n        <SelectPage\n            changeStart={(newStart) => { changeStart(newStart) }}\n            currentPage={currentPage}\n            maxPages={maxPages}\n            prevPage={prev}\n            nextPage={next}\n            perPage={perPage}\n        />\n    )\n\n    // align the entire div to the center. not flex.\n    return (\n        <div style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            flexDirection: 'row',\n            margin: '1em',\n        }}\n        >\n            <div style={{ width: '25%' }}>\n                <div style={{ margin: 'auto', textAlign: 'center' }}>\n                    <a\n                        {...navContext.link(\n                            { kind: 'dataCredit', hash: `#explanation_${sanitize(props.explanationPage)}` },\n                            { scroll: { kind: 'none' } },\n                        )}\n                    >\n                        Data Explanation and Credit\n                    </a>\n                </div>\n            </div>\n            <div style={{ width: '50%' }}>\n                <div style={{ margin: 'auto', textAlign: 'center' }}>\n                    {selectPage}\n                </div>\n            </div>\n            <div style={{ width: '25%' }}>\n                <PerPageSelector\n                    perPage={perPage}\n                    total={total}\n                    changeAmount={(newAmount) => { changeAmount(newAmount) }}\n                />\n            </div>\n        </div>\n    )\n}\n\nfunction PerPageSelector(props: {\n    perPage: number\n    total: number\n    changeAmount: (targetValue: string) => void\n}): ReactNode {\n    const colors = useColors()\n    return (\n        <div style={{ margin: 'auto', textAlign: 'center' }}>\n            <span>\n                <select\n                    style={{ backgroundColor: colors.background, color: colors.textMain }}\n                    defaultValue={\n                        props.perPage === props.total ? 'All' : props.perPage\n                    }\n                    onChange={(e) => { props.changeAmount(e.target.value) }}\n                    className=\"serif\"\n                >\n                    <option value=\"10\">10</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"100\">100</option>\n                    <option value=\"All\">All</option>\n                </select>\n                {' '}\n                per page\n            </span>\n        </div>\n    )\n}\n\nfunction SelectPage(props: {\n    prevPage: number\n    currentPage: number\n    maxPages: number\n    perPage: number\n    changeStart: (newStart: number) => void\n    nextPage: number\n}): ReactNode {\n    // low-key style for the buttons\n    const buttonStyle = {\n        margin: '0.5em',\n    }\n\n    const [pageNumber, setPageNumber] = useState(props.currentPage.toString())\n\n    const pageField = useRef<HTMLInputElement>(null)\n\n    useEffect(() => {\n        setPageNumber(props.currentPage.toString())\n        if (document.activeElement === pageField.current) {\n            pageField.current!.select()\n        }\n    }, [props.currentPage])\n\n    const handleSubmit = (): void => {\n        let newPage = parseInt(pageNumber)\n        if (newPage < 1) {\n            newPage = 1\n        }\n        if (newPage > props.maxPages) {\n            newPage = props.maxPages\n        }\n        const newStart = (newPage - 1) * props.perPage + 1\n        props.changeStart(newStart)\n    }\n\n    const disabled = {\n        left: props.currentPage === 1,\n        right: props.currentPage === props.maxPages,\n    }\n\n    return (\n        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n            <button\n                onClick={() => { props.changeStart(props.prevPage) }}\n                className=\"serif\"\n                style={{ ...buttonStyle, visibility: disabled.left ? 'hidden' : 'visible' }}\n                disabled={disabled.left}\n                data-test-id=\"-1\"\n            >\n                <PointerArrow direction={-1} disabled={disabled.left} />\n            </button>\n            <div>\n                <span>Page: </span>\n                <input\n                    ref={pageField}\n                    type=\"text\"\n                    pattern=\"[0-9]*\"\n                    style={{ width: '3em', textAlign: 'right', fontSize: '16px' }}\n                    className=\"serif\"\n                    value={pageNumber}\n                    onKeyDown={(e) => {\n                        if (e.key === 'Enter') {\n                            handleSubmit()\n                        }\n                    }}\n                    onFocus={(e) => {\n                        setTimeout(() => {\n                            e.target.select()\n                        }, 0)\n                    }}\n                    onBlur={handleSubmit}\n                    onChange={(e: ChangeEvent<HTMLInputElement>) => { setPageNumber(e.target.value) }}\n                />\n                <span>\n                    {' of '}\n                    {props.maxPages}\n                </span>\n            </div>\n            <button\n                onClick={() => { props.changeStart(props.nextPage) }}\n                className=\"serif\"\n                style={{ ...buttonStyle, visibility: disabled.right ? 'hidden' : 'visible' }}\n                disabled={disabled.right}\n                data-test-id=\"1\"\n            >\n                <PointerArrow direction={1} disabled={disabled.right} />\n            </button>\n        </div>\n    )\n}\n\nfunction ArticleLink(props: { longname: string }): ReactNode {\n    const currentUniverse = useUniverse()\n    const colors = useColors()\n    const navContext = useContext(Navigator.Context)\n    return (\n        <a\n            {...navContext.link({\n                kind: 'article',\n                longname: props.longname,\n                universe: currentUniverse,\n            }, { scroll: { kind: 'position', top: 0 } })}\n            style={{ fontWeight: 500, color: colors.textMain, textDecoration: 'none' }}\n        >\n            {props.longname}\n        </a>\n    )\n}\n\nfunction StatisticPanelSubhead(props: { articleType: string, renderedOther: string }): ReactNode {\n    const currentUniverse = useUniverse()\n    return (\n        <div className={useSubHeaderTextClass()}>\n            {displayType(currentUniverse, props.articleType)}\n            {' '}\n            (\n            {props.renderedOther}\n            )\n        </div>\n    )\n}\n\nfunction AutoPercentile(props: {\n    ordinal: number\n    totalCountInClass: number\n    data: { populationPercentile: number[] }\n    i: number\n}): ReactNode {\n    const [simpleOrdinals] = useSetting('simple_ordinals')\n    return (\n        <Percentile\n            ordinal={props.ordinal}\n            total={props.totalCountInClass}\n            percentileByPopulation={props.data.populationPercentile[props.i]}\n            simpleOrdinals={simpleOrdinals}\n        />\n    )\n}\n\nfunction AscendingVsDescending({ onClick, isAscending }: { onClick: (currentUniverse: string | undefined) => void, isAscending: boolean }): ReactNode {\n    const currentUniverse = useUniverse()\n    // either an up or down arrow, depending on the current ordering\n    return (\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n            <div style={{ cursor: 'pointer' }} onClick={() => { onClick(currentUniverse) }} id=\"statistic-panel-order-swap\">\n                <ArrowUpOrDown direction={isAscending ? 'up' : 'down'} shouldAppearInScreenshot={true} />\n            </div>\n        </div>\n    )\n}\n\nexport function ArrowUpOrDown(props: { direction: 'up' | 'down' | 'both', shouldAppearInScreenshot: boolean }): ReactNode {\n    const isScreenshot = useScreenshotMode()\n\n    if (isScreenshot && !props.shouldAppearInScreenshot) {\n        return null\n    }\n\n    let image: string\n    switch (props.direction) {\n        case 'up':\n            image = '/sort-up.png'\n            break\n        case 'down':\n            image = '/sort-down.png'\n            break\n        case 'both':\n            image = '/sort-both.png'\n            break\n    }\n    return <img src={image} alt={props.direction} style={{ width: '16px', height: '16px' }} />\n}\n"],"names":["Statistic","props","statname","_props_unit","useImperial","_useSetting","temperatureUnit","_useSetting1","_unitDisplay_renderValue","getUnitDisplay","unitType","value","separateNumber","unitName","adjustedValue","places","unit","rendered","ElectionResult","hours","Math","minutes","colors","useColors","text","party","partyColor","Percentile","ordinal","percentile","undefined","tableStyle","columnNames","columnWidths","columnStyles","StatisticPanel","headersRef","useRef","tableRef","isAscending","navContext","useContext","Navigator","indexRange","useMemo","start","end","total","Array","_","i","swapAscendingDescending","currentUniverse","statisticDescriptor","backgroundColor","rowIdx","nameAtIdx","style","colIdx","result","textHeaderClass","useHeaderTextClass","universesFiltered","universes_ordered","universe","forType","csvData","generateStatisticsCSVData","dataRows","rank","name","formattedValue","csvFilename","sanitize","PageTemplate","StatisticPanelSubhead","AscendingVsDescending","ArticleLink","AutoPercentile","Pagination","useUniverse","changeStart","newStart","changeAmount","newAmount","newAmountNum","parseInt","current","perPage","prev","maxPages","next","currentPage","useEffect","goToPage","newPage","selectPage","SelectPage","PerPageSelector","e","buttonStyle","_useState","pageNumber","setPageNumber","pageField","document","handleSubmit","disabled","PointerArrow","setTimeout","useSubHeaderTextClass","displayType","simpleOrdinals","param","onClick","ArrowUpOrDown","image","isScreenshot","useScreenshotMode"],"mappings":"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"}