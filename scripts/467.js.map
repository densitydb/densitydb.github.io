{"version":3,"file":"467.js","sources":["webpack://assets/./src/components/display-stats.tsx","webpack://assets/./src/components/unit-display.tsx","webpack://assets/./src/mapper/settings/ImportExportCode.tsx","webpack://assets/./src/mapper/style.ts","webpack://assets/./src/mapper/settings/MapperSettings.tsx","webpack://assets/./src/mapper/settings/insets.ts","webpack://assets/./src/components/mapper-panel.tsx","webpack://assets/./src/utils/upload.ts"],"sourcesContent":["import React, { CSSProperties, ReactNode } from 'react'\n\nimport { useColors } from '../page_template/colors'\nimport { useSetting } from '../page_template/settings'\nimport { UnitType } from '../utils/unit'\n\nimport { classifyStatistic, getUnitDisplay } from './unit-display'\n\nexport function Statistic(props: { style?: React.CSSProperties, statname: string, value: number, isUnit: boolean, unit?: UnitType }): ReactNode {\n    const [useImperial] = useSetting('use_imperial')\n    const [temperatureUnit] = useSetting('temperature_unit')\n\n    const statisticType = props.unit ?? classifyStatistic(props.statname)\n    const unitDisplay = getUnitDisplay(statisticType)\n    const { value, unit } = unitDisplay.renderValue(props.value, useImperial, temperatureUnit)\n\n    return (\n        <span style={props.style}>\n            {props.isUnit ? unit : value}\n        </span>\n    )\n}\n\nexport function ElectionResult(props: { value: number }): ReactNode {\n    const colors = useColors()\n    // check if value is NaN\n    if (props.value !== props.value) {\n        return <span>N/A</span>\n    }\n    const value = Math.abs(props.value) * 100\n    const places = value > 10 ? 1 : value > 1 ? 2 : value > 0.1 ? 3 : 4\n    const text = value.toFixed(places)\n    const party = props.value > 0 ? 'D' : 'R'\n    const partyColor = props.value > 0 ? colors.hueColors.blue : colors.hueColors.red\n    const spanStyle: CSSProperties = {\n        color: partyColor,\n        // So that on 4 digits, we overflow left\n        display: 'flex',\n        justifyContent: 'flex-end',\n    }\n    return (\n        <span style={spanStyle}>\n            {party}\n            +\n            {text}\n        </span>\n    )\n}\n\nexport function Percentile(props: {\n    ordinal: number\n    total: number\n    percentileByPopulation: number\n    simpleOrdinals: boolean\n}): ReactNode {\n    const ordinal = props.ordinal\n    const total = props.total\n    if (ordinal > total) {\n        return <span></span>\n    }\n    // percentile as an integer\n    // used to be keyed by a setting, but now we always use percentile_by_population\n    const percentile = props.percentileByPopulation\n    // something like Xth percentile\n    let text = `${percentile}th percentile`\n    if (props.simpleOrdinals) {\n        text = `${percentile.toString()}%`\n    }\n    else if (percentile % 10 === 1 && percentile % 100 !== 11) {\n        text = `${percentile}st percentile`\n    }\n    else if (percentile % 10 === 2 && percentile % 100 !== 12) {\n        text = `${percentile}nd percentile`\n    }\n    else if (percentile % 10 === 3 && percentile % 100 !== 13) {\n        text = `${percentile}rd percentile`\n    }\n    return <div className=\"serif\" style={{ textAlign: 'right', marginRight: props.simpleOrdinals ? '5px' : undefined }}>{text}</div>\n}\n","import React, { ReactNode } from 'react'\n\nimport { separateNumber } from '../utils/text'\nimport { UnitType } from '../utils/unit'\n\nimport { ElectionResult } from './display-stats'\n\nexport interface UnitDisplay {\n    renderValue: (value: number, useImperial?: boolean, temperatureUnit?: string) => {\n        value: ReactNode\n        unit: ReactNode\n    }\n}\n\nexport function getUnitDisplay(unitType: UnitType): UnitDisplay {\n    switch (unitType) {\n        case 'percentage':\n            return {\n                renderValue: (value: number) => {\n                    return {\n                        value: <span>{(value * 100).toFixed(2)}</span>,\n                        unit: <span>%</span>,\n                    }\n                },\n            }\n        case 'fatalities':\n            return {\n                renderValue: (value: number) => {\n                    return {\n                        value: <span>{separateNumber(value.toFixed(0))}</span>,\n                        unit: <span>&nbsp;</span>,\n                    }\n                },\n            }\n        case 'fatalitiesPerCapita':\n            return {\n                renderValue: (value: number) => {\n                    return {\n                        value: <span>{(100_000 * value).toFixed(2)}</span>,\n                        unit: <span>/100k</span>,\n                    }\n                },\n            }\n        case 'density':\n            return {\n                renderValue: (value: number, useImperial?: boolean) => {\n                    let unitName = 'km'\n                    let adjustedValue = value\n                    if (useImperial) {\n                        unitName = 'mi'\n                        adjustedValue *= 1.60934 * 1.60934\n                    }\n                    let places = 2\n                    if (adjustedValue > 10) {\n                        places = 0\n                    }\n                    else if (adjustedValue > 1) {\n                        places = 1\n                    }\n                    return {\n                        value: <span>{separateNumber(adjustedValue.toFixed(places))}</span>,\n                        unit: (\n                            <span>\n                                /&nbsp;\n                                {unitName}\n                                <sup>2</sup>\n                            </span>\n                        ),\n                    }\n                },\n            }\n        case 'population':\n            return {\n                renderValue: (value: number) => {\n                    if (value > 1e9) {\n                        return {\n                            value: <span>{(value / 1e9).toPrecision(3)}</span>,\n                            unit: <span>B</span>,\n                        }\n                    }\n                    if (value > 1e6) {\n                        return {\n                            value: <span>{(value / 1e6).toPrecision(3)}</span>,\n                            unit: <span>m</span>,\n                        }\n                    }\n                    else if (value > 1e4) {\n                        return {\n                            value: <span>{(value / 1e3).toPrecision(3)}</span>,\n                            unit: <span>k</span>,\n                        }\n                    }\n                    else {\n                        return {\n                            value: <span>{separateNumber(value.toFixed(0))}</span>,\n                            unit: <span>&nbsp;</span>,\n                        }\n                    }\n                },\n            }\n        case 'area':\n            return {\n                renderValue: (value: number, useImperial?: boolean) => {\n                    let adjustedValue = value\n                    let unit: React.ReactElement\n                    if (useImperial) {\n                        adjustedValue /= 1.60934 * 1.60934\n                        if (adjustedValue < 1) {\n                            unit = <span>acres</span>\n                            adjustedValue *= 640\n                        }\n                        else {\n                            unit = (\n                                <span>\n                                    mi\n                                    <sup>2</sup>\n                                </span>\n                            )\n                        }\n                    }\n                    else {\n                        if (adjustedValue < 0.01) {\n                            adjustedValue *= 1000 * 1000\n                            unit = (\n                                <span>\n                                    m\n                                    <sup>2</sup>\n                                </span>\n                            )\n                        }\n                        else {\n                            unit = (\n                                <span>\n                                    km\n                                    <sup>2</sup>\n                                </span>\n                            )\n                        }\n                    }\n                    let places = 3\n                    if (adjustedValue > 100) {\n                        places = 0\n                    }\n                    else if (adjustedValue > 10) {\n                        places = 1\n                    }\n                    else if (adjustedValue > 1) {\n                        places = 2\n                    }\n                    let rendered = adjustedValue.toFixed(places)\n                    if (places === 0) {\n                        rendered = separateNumber(rendered)\n                    }\n                    return {\n                        value: <span>{rendered}</span>,\n                        unit,\n                    }\n                },\n            }\n        case 'distanceInKm':\n            return {\n                renderValue: (value: number, useImperial?: boolean) => {\n                    let unit = <span>km</span>\n                    let adjustedValue = value\n                    if (useImperial) {\n                        unit = <span>mi</span>\n                        adjustedValue /= 1.60934\n                    }\n                    return {\n                        value: <span>{adjustedValue.toFixed(2)}</span>,\n                        unit,\n                    }\n                },\n            }\n        case 'distanceInM':\n            return {\n                renderValue: (value: number, useImperial?: boolean) => {\n                    let unitName = 'm'\n                    let adjustedValue = value\n                    if (useImperial) {\n                        unitName = 'ft'\n                        adjustedValue *= 3.28084\n                    }\n                    return {\n                        value: <span>{separateNumber(adjustedValue.toFixed(0))}</span>,\n                        unit: <span>{unitName}</span>,\n                    }\n                },\n            }\n        case 'democraticMargin':\n            return {\n                renderValue: (value: number) => {\n                    return {\n                        value: <ElectionResult value={value} />,\n                        unit: <span>%</span>,\n                    }\n                },\n            }\n        case 'temperature':\n            return {\n                renderValue: (value: number, useImperial?: boolean, temperatureUnit?: string) => {\n                    let unit = <span>&deg;F</span>\n                    let adjustedValue = value\n                    if (temperatureUnit === 'celsius') {\n                        unit = <span>&deg;C</span>\n                        adjustedValue = (value - 32) * (5 / 9)\n                    }\n                    return {\n                        value: <span>{adjustedValue.toFixed(1)}</span>,\n                        unit,\n                    }\n                },\n            }\n        case 'time':\n            return {\n                renderValue: (value: number) => {\n                    const hours = Math.floor(value)\n                    const minutes = Math.floor((value - hours) * 60)\n                    return {\n                        value: (\n                            <span>\n                                {hours}\n                                :\n                                {minutes.toString().padStart(2, '0')}\n                            </span>\n                        ),\n                        unit: <span>&nbsp;</span>,\n                    }\n                },\n            }\n        case 'distancePerYear':\n            return {\n                renderValue: (value: number, useImperial?: boolean) => {\n                    let adjustedValue = value * 100\n                    let unit = 'cm'\n                    if (useImperial) {\n                        unit = 'in'\n                        adjustedValue /= 2.54\n                    }\n                    return {\n                        value: <span>{adjustedValue.toFixed(1)}</span>,\n                        unit: (\n                            <span>\n                                {unit}\n                                /yr\n                            </span>\n                        ),\n                    }\n                },\n            }\n        case 'contaminantLevel':\n            return {\n                renderValue: (value: number) => {\n                    return {\n                        value: <span>{value.toFixed(2)}</span>,\n                        unit: (\n                            <span>\n                                &mu;g/m\n                                <sup>3</sup>\n                            </span>\n                        ),\n                    }\n                },\n            }\n        case 'number':\n            return {\n                renderValue: (value: number) => {\n                    return {\n                        value: <span>{value.toFixed(3)}</span>,\n                        unit: <span>&nbsp;</span>,\n                    }\n                },\n            }\n        case 'usd':\n            return {\n                renderValue: (value: number) => {\n                    if (value > 1e9) {\n                        return {\n                            value: (\n                                <span>\n                                    $\n                                    {(value / 1e9).toPrecision(3)}\n                                </span>\n                            ),\n                            unit: <span>B</span>,\n                        }\n                    }\n                    if (value > 1e6) {\n                        return {\n                            value: (\n                                <span>\n                                    $\n                                    {(value / 1e6).toPrecision(3)}\n                                </span>\n                            ),\n                            unit: <span>m</span>,\n                        }\n                    }\n                    else if (value > 1e3) {\n                        return {\n                            value: (\n                                <span>\n                                    $\n                                    {(value / 1e3).toPrecision(3)}\n                                </span>\n                            ),\n                            unit: <span>k</span>,\n                        }\n                    }\n                    else {\n                        return {\n                            value: (\n                                <span>\n                                    $\n                                    {separateNumber(value.toFixed(0))}\n                                </span>\n                            ),\n                            unit: <span>&nbsp;</span>,\n                        }\n                    }\n                },\n            }\n        case 'minutes':\n            return {\n                renderValue: (value: number) => {\n                    const hours = Math.floor(value / 60)\n                    const minutes = Math.floor(value % 60)\n\n                    if (hours > 0) {\n                        return {\n                            value: (\n                                <span>\n                                    {hours}\n                                    :\n                                    {minutes.toString().padStart(2, '0')}\n                                </span>\n                            ),\n                            unit: <span>&nbsp;</span>,\n                        }\n                    }\n                    else {\n                        return {\n                            value: <span>{minutes}</span>,\n                            unit: <span>&nbsp;</span>,\n                        }\n                    }\n                },\n            }\n    }\n}\n\nexport function classifyStatistic(statname: string): UnitType {\n    if (statname.includes('%') || statname.includes('Change') || statname.includes('(Grade)')) {\n        return 'percentage'\n    }\n    if (statname.includes('Total') && statname.includes('Fatalities')) {\n        return 'fatalities'\n    }\n    if (statname.includes('Fatalities Per Capita')) {\n        return 'fatalitiesPerCapita'\n    }\n    if (statname.includes('Density')) {\n        return 'density'\n    }\n    if (statname.includes('Elevation')) {\n        return 'distanceInM'\n    }\n    if (statname.startsWith('Population')) {\n        return 'population'\n    }\n    if (statname === 'Area') {\n        return 'area'\n    }\n    if (statname.includes('Mean distance')) {\n        return 'distanceInKm'\n    }\n    if (statname.includes('Election') || statname.includes('Swing')) {\n        return 'democraticMargin'\n    }\n    if (statname.includes('high temp') || statname.includes('low temp') || statname.includes('high heat index') || statname.includes('dewpt')) {\n        return 'temperature'\n    }\n    if (statname === 'Mean sunny hours') {\n        return 'time'\n    }\n    if (statname === 'Rainfall' || statname === 'Snowfall [rain-equivalent]') {\n        return 'distancePerYear'\n    }\n    if (statname.includes('Pollution')) {\n        return 'contaminantLevel'\n    }\n    if (statname.includes('(USD)')) {\n        return 'usd'\n    }\n    if (statname.includes('(min)')) {\n        return 'minutes'\n    }\n    return 'number'\n}\n","import { saveAs } from 'file-saver'\nimport React, { ReactNode } from 'react'\nimport { z } from 'zod'\n\nimport { renderLocInfo } from '../../urban-stats-script/interpreter'\nimport { parse, unparse } from '../../urban-stats-script/parser'\nimport { cancelled, uploadFile } from '../../utils/upload'\n\nimport { convertToMapUss, defaultSettings, mapperMetaFields, MapSettings } from './utils'\n\nexport function ImportExportCode({ mapSettings, setMapSettings }: { mapSettings: MapSettings, setMapSettings: (v: MapSettings) => void }): ReactNode {\n    return (\n        <div style={{\n            display: 'flex',\n            gap: '0.5em',\n            margin: '0.5em 0',\n        }}\n        >\n            <button onClick={async () => {\n                const file = await uploadFile('.uss')\n\n                if (file === cancelled) {\n                    return\n                }\n\n                const importResult = importMapSettings(await file.text())\n\n                if (!importResult.success) {\n                    alert(importResult.error)\n                    return\n                }\n\n                setMapSettings(importResult.mapSettings)\n            }}\n            >\n                Import Script\n            </button>\n            <button onClick={() => {\n                saveAs(new Blob([exportMapSettings(mapSettings)]), 'urban_stats_mapper.uss')\n            }}\n            >\n                Export Script\n            </button>\n        </div>\n    )\n}\n\nconst metadataSchema = z.object({\n    kind: z.literal('mapper'),\n    ...mapperMetaFields.shape,\n})\n\nfunction importMapSettings(fileContent: string): { success: true, mapSettings: MapSettings } | { success: false, error: string } {\n    const parsed = parse(fileContent)\n    if (parsed.type === 'error') {\n        return {\n            success: false,\n            error: `Parse Errors:\\n${parsed.errors.map(error => `• ${error.value} at ${renderLocInfo(error.location)}`).join('\\n')}`,\n        }\n    }\n\n    let metadata = undefined\n    if (parsed.type === 'statements'\n        && parsed.result[0].type === 'expression'\n        && parsed.result[0].value.type === 'call'\n        && parsed.result[0].value.fn.type === 'identifier'\n        && parsed.result[0].value.fn.name.node === 'meta'\n    ) {\n        const meta = parsed.result[0].value\n\n        // Remove meta from the parsed result\n        parsed.result.splice(0, 1)\n\n        const args = []\n\n        for (const arg of meta.args) {\n            if (arg.type === 'unnamed') {\n                return { success: false, error: `\"meta\" function call at ${renderLocInfo(meta.entireLoc)} must have only named arguments` }\n            }\n            if (arg.value.type !== 'constant') {\n                return { success: false, error: `\"meta\" function argument \"${arg.name.node}\" must have a constant value` }\n            }\n            args.push([arg.name.node, arg.value.value.node.value])\n        }\n\n        const metadataResult = metadataSchema.safeParse(Object.fromEntries(args))\n\n        if (!metadataResult.success) {\n            return {\n                success: false,\n                error: `Error parsing metadata: ${Object.values(metadataResult.error.flatten(issue => `• Parameter \"${issue.path}\" is ${issue.message}`).fieldErrors).join('\\n')}`,\n            }\n        }\n        metadata = metadataResult.data\n    }\n\n    const newSettings = defaultSettings({\n        ...metadata,\n        script: {\n            uss: convertToMapUss(parsed),\n        },\n    })\n\n    return { success: true, mapSettings: newSettings }\n}\n\nfunction exportMapSettings(mapSettings: MapSettings): string {\n    return `meta(kind=\"mapper\", universe=\"${mapSettings.universe}\", geographyKind=\"${mapSettings.geographyKind}\")\\n${unparse(mapSettings.script.uss)}`\n}\n","import { useColors } from '../page_template/colors'\n\nexport const settingNameStyle = {\n    fontWeight: 500,\n    fontSize: '1.2em',\n    marginBottom: '0.125em',\n    marginTop: '0.25em',\n}\n\nexport const useSettingSubNameStyle = (): React.CSSProperties => ({\n    fontWeight: 500,\n    fontSize: '1em',\n    marginBottom: '0.125em',\n    color: useColors().ordinalTextColor,\n})\n","import React, { ReactNode, useCallback, useMemo } from 'react'\n\nimport { articleTypes, CountsByUT } from '../../components/countsByArticleType'\nimport universes_ordered from '../../data/universes_ordered'\nimport { EditorError } from '../../urban-stats-script/editor-utils'\nimport { TypeEnvironment } from '../../urban-stats-script/types-values'\nimport { settingNameStyle } from '../style'\n\nimport { BetterSelector } from './BetterSelector'\nimport { TopLevelEditor } from './TopLevelEditor'\nimport { MapSettings } from './utils'\n\nexport function MapperSettings({ mapSettings, setMapSettings, errors, counts, typeEnvironment }: {\n    mapSettings: MapSettings\n    setMapSettings: (s: MapSettings) => void\n    errors: EditorError[]\n    counts: CountsByUT\n    typeEnvironment: TypeEnvironment\n}): ReactNode {\n    const uss = mapSettings.script.uss\n\n    const renderString = useCallback((universe: string | undefined) => ({ text: universe ?? '' }), [])\n\n    const universes = useMemo(() => [undefined, ...universes_ordered], [])\n\n    const geographyKinds = useMemo(() =>\n        mapSettings.universe === undefined ? undefined : [undefined, ...articleTypes(counts, mapSettings.universe)] as Exclude<MapSettings['geographyKind'], undefined>[],\n    [mapSettings.universe, counts])\n\n    return (\n        <>\n            <div style={settingNameStyle}>\n                Universe\n            </div>\n            <BetterSelector\n                possibleValues={universes}\n                value={mapSettings.universe}\n                renderValue={renderString}\n                onChange={\n                    (newUniverse) => {\n                        setMapSettings({\n                            ...mapSettings,\n                            universe: newUniverse,\n                            geographyKind: newUniverse === undefined || mapSettings.geographyKind === undefined\n                                ? mapSettings.geographyKind\n                                : articleTypes(counts, newUniverse).includes(mapSettings.geographyKind)\n                                    ? mapSettings.geographyKind\n                                    : undefined,\n                        })\n                    }\n                }\n            />\n            {geographyKinds && (\n                <>\n                    <div style={settingNameStyle}>\n                        Geography Kind\n                    </div>\n                    <BetterSelector\n                        possibleValues={geographyKinds}\n                        value={mapSettings.geographyKind}\n                        renderValue={renderString}\n                        onChange={\n                            (newGeographyKind) => {\n                                setMapSettings({\n                                    ...mapSettings,\n                                    geographyKind: newGeographyKind,\n                                })\n                            }\n                        }\n                    />\n                </>\n            )}\n            <TopLevelEditor\n                uss={uss}\n                setUss={(newUss) => {\n                    setMapSettings({\n                        ...mapSettings,\n                        script: { uss: newUss },\n                    })\n                }}\n                typeEnvironment={typeEnvironment}\n                errors={errors}\n            />\n        </>\n    )\n}\n","import { Inset } from '../../components/map'\nimport { UrbanStatsASTExpression } from '../../urban-stats-script/ast'\nimport { deconstruct } from '../../urban-stats-script/constants/insets'\nimport { TypeEnvironment } from '../../urban-stats-script/types-values'\nimport { loadInset, loadInsetExpression } from '../../urban-stats-script/worker'\nimport { assert } from '../../utils/defensive'\n\nimport * as l from './../../urban-stats-script/literal-parser'\nimport { idOutput, MapUSS, validMapperOutputs } from './TopLevelEditor'\nimport { MapSettings } from './utils'\n\nconst neswSchema = l.object({\n    north: l.number(),\n    east: l.number(),\n    south: l.number(),\n    west: l.number(),\n})\n\nconst insetSchema = l.transformExpr(l.deconstruct(l.call({ fn: l.identifier('constructInset'), unnamedArgs: [], namedArgs: {\n    mainMap: l.boolean(),\n    name: l.string(),\n    screenBounds: neswSchema,\n    mapBounds: neswSchema,\n} })),\n({ namedArgs: { screenBounds, mapBounds, mainMap, name } }) => ({\n    bottomLeft: [screenBounds.west, screenBounds.south],\n    topRight: [screenBounds.east, screenBounds.north],\n    coordBox: [mapBounds.west, mapBounds.south, mapBounds.east, mapBounds.north],\n    mainMap,\n    name,\n} satisfies Inset))\n\nconst constructInsetsSchema = l.transformExpr(l.call({ fn: l.identifier('constructInsets'), namedArgs: {}, unnamedArgs: [l.vector(l.edit(insetSchema))] }), call => call.unnamedArgs[0])\n\nconst mapInsetsSchema = l.transformStmt(l.statements([\n    l.ignore(),\n    l.condition({\n        condition: l.ignore(),\n        rest: [\n            l.expression(l.reparse(idOutput, validMapperOutputs,\n                l.call({\n                    fn: l.ignore(),\n                    unnamedArgs: [],\n                    namedArgs: {\n                        insets: l.edit(l.optional(l.deconstruct(constructInsetsSchema))),\n                    },\n                }))),\n        ],\n    }),\n]), (uss) => {\n    const insetArg = uss[1].rest[0].namedArgs.insets\n    const literalInsets = insetArg.currentValue ?? null\n    return {\n        ...insetArg,\n        currentValue: literalInsets,\n    }\n})\n\nexport function getInsets(settings: MapSettings, typeEnvironment: TypeEnvironment): Inset[] | undefined {\n    if (settings.script.uss.type === 'statements') {\n        const parseResult = mapInsetsSchema.parse(settings.script.uss, typeEnvironment)\n        if (parseResult === undefined) {\n            return undefined\n        }\n        if (parseResult.currentValue !== null) {\n            return parseResult.currentValue.map(e => e.currentValue)\n        }\n        if (settings.universe !== undefined) {\n            return loadInset(settings.universe)\n        }\n    }\n    return undefined\n}\n\nexport type InsetEdits = ReadonlyMap<number, Partial<Inset>>\n\nexport function doEditInsets(settings: MapSettings, edits: InsetEdits, typeEnvironment: TypeEnvironment): MapUSS {\n    assert(settings.script.uss.type === 'statements', 'Trying to do an inset edit on USS that is not inset editable')\n    const mapInsets = mapInsetsSchema.parse(settings.script.uss, typeEnvironment)\n    assert(mapInsets !== undefined && (mapInsets.currentValue !== null || settings.universe !== undefined), 'Trying to do an inset edit on USS that is not inset editable')\n\n    let currentInsetsAst: UrbanStatsASTExpression\n    if (mapInsets.currentValue !== null) {\n        currentInsetsAst = mapInsets.expr!\n    }\n    else {\n        currentInsetsAst = loadInsetExpression(settings.universe!)\n    }\n\n    for (const [index, partialInset] of edits) {\n        const insets = constructInsetsSchema.parse(currentInsetsAst, typeEnvironment)!\n        currentInsetsAst = insets[index].edit(deconstruct({ ...insets[index].currentValue, ...partialInset })) as UrbanStatsASTExpression\n    }\n\n    const result = mapInsets.edit(currentInsetsAst)\n    return result as MapUSS\n}\n","import '../common.css'\nimport './article.css'\n\nimport { gzipSync } from 'zlib'\n\nimport stableStringify from 'json-stable-stringify'\nimport React, { ReactNode, useCallback, useContext, useEffect, useMemo, useRef, useState, useSyncExternalStore } from 'react'\n\nimport valid_geographies from '../data/mapper/used_geographies'\nimport universes_ordered from '../data/universes_ordered'\nimport { loadProtobuf } from '../load_json'\nimport { defaultTypeEnvironment } from '../mapper/context'\nimport { Keypoints } from '../mapper/ramps'\nimport { ImportExportCode } from '../mapper/settings/ImportExportCode'\nimport { MapperSettings } from '../mapper/settings/MapperSettings'\nimport { Selection, SelectionContext } from '../mapper/settings/SelectionContext'\nimport { doEditInsets, getInsets, InsetEdits } from '../mapper/settings/insets'\nimport { MapSettings, computeUSS, Basemap } from '../mapper/settings/utils'\nimport { Navigator } from '../navigation/Navigator'\nimport { consolidatedShapeLink, indexLink } from '../navigation/links'\nimport { Colors } from '../page_template/color-themes'\nimport { useColors } from '../page_template/colors'\nimport { PageTemplate } from '../page_template/template'\nimport { loadCentroids } from '../syau/load'\nimport { Universe } from '../universe'\nimport { DisplayResults } from '../urban-stats-script/Editor'\nimport { getAllParseErrors, UrbanStatsASTStatement } from '../urban-stats-script/ast'\nimport { doRender } from '../urban-stats-script/constants/color'\nimport { instantiate, ScaleInstance } from '../urban-stats-script/constants/scale'\nimport { EditorError, useUndoRedo } from '../urban-stats-script/editor-utils'\nimport { noLocation } from '../urban-stats-script/location'\nimport { unparse } from '../urban-stats-script/parser'\nimport { TypeEnvironment } from '../urban-stats-script/types-values'\nimport { loadInset } from '../urban-stats-script/worker'\nimport { executeAsync } from '../urban-stats-script/workerManager'\nimport { Property } from '../utils/Property'\nimport { TestUtils } from '../utils/TestUtils'\nimport { furthestColor, interpolateColor } from '../utils/color'\nimport { computeAspectRatioForInsets } from '../utils/coordinates'\nimport { assert } from '../utils/defensive'\nimport { ConsolidatedShapes, Feature, IFeature } from '../utils/protos'\nimport { onWidthChange, useHeaderTextClass } from '../utils/responsive'\nimport { NormalizeProto } from '../utils/types'\nimport { UnitType } from '../utils/unit'\n\nimport { CountsByUT } from './countsByArticleType'\nimport { generateMapperCSVData, CSVExportData } from './csv-export'\nimport { Statistic } from './display-stats'\nimport { Insets, ShapeRenderingSpec, MapGeneric, MapGenericProps, MapHeight, ShapeType, ShapeSpec, EditInsets } from './map'\n\ntype RampToDisplay = { type: 'ramp', value: EmpiricalRamp } | { type: 'label', value: string }\n\ninterface DisplayedMapProps extends MapGenericProps {\n    geographyKind: typeof valid_geographies[number]\n    universe: Universe\n    rampCallback: (newRamp: RampToDisplay) => void\n    basemapCallback: (basemap: Basemap) => void\n    insetsCallback: (insetsToUse: Insets) => void\n    height: MapHeight | undefined\n    uss: UrbanStatsASTStatement | undefined\n    setErrors?: (errors: EditorError[]) => void\n    colors: Colors\n    onCsvDataUpdate?: (csvExportData: CSVExportData) => void\n}\n\ninterface ShapesForUniverse {\n    shapes: { type: 'polygon', value: NormalizeProto<IFeature>[] } | { type: 'point', value: { lon: number, lat: number }[] }\n    nameToIndex: Map<string, number>\n}\n\ntype ActualShapeType = { type: 'polygon', value: NormalizeProto<Feature> } | { type: 'point', value: { lon: number, lat: number } }\n\nasync function loadPolygons(geographyKind: typeof valid_geographies[number], universe: string): Promise<ShapesForUniverse> {\n    const universeIdx = universes_ordered.indexOf(universe as (typeof universes_ordered)[number])\n    const shapes = (await loadProtobuf(\n        consolidatedShapeLink(geographyKind),\n        'ConsolidatedShapes',\n    )) as NormalizeProto<ConsolidatedShapes>\n    const longnames: string[] = []\n    const features: NormalizeProto<IFeature>[] = []\n    for (let i = 0; i < shapes.longnames.length; i++) {\n        if (shapes.universes[i].universeIdxs.includes(universeIdx)) {\n            longnames.push(shapes.longnames[i])\n            features.push(shapes.shapes[i])\n        }\n    }\n    return { shapes: { type: 'polygon', value: features }, nameToIndex: new Map(longnames.map((r, i) => [r, i])) }\n}\n\nasync function loadShapes(geographyKind: typeof valid_geographies[number], universe: string, shapeType: ShapeType): Promise<ShapesForUniverse> {\n    switch (shapeType) {\n        case 'polygon':\n            return loadPolygons(geographyKind, universe)\n        case 'point':\n            const idxLink = indexLink(universe, geographyKind)\n            const articles = await loadProtobuf(idxLink, 'ArticleOrderingList')\n            const centroids = await loadCentroids(universe, geographyKind, articles.longnames)\n\n            return {\n                shapes: { type: 'point', value: centroids.map(c => ({ lon: c.lon!, lat: c.lat! })) },\n                nameToIndex: new Map(articles.longnames.map((r, i) => [r, i])),\n            }\n        default:\n            throw new Error(`Unknown shape type ${shapeType}`)\n    }\n}\n\ninterface Shapes { geographyKind: string, universe: string, shapeType: string, data: Promise<ShapesForUniverse> }\n\nclass DisplayedMap extends MapGeneric<DisplayedMapProps> {\n    private shapes: undefined | Shapes\n    private shapeType: undefined | ShapeType\n\n    override shouldHaveLoadingSpinner(): boolean {\n        return true\n    }\n\n    private getShapes(): Shapes {\n        if (this.shapes && this.shapes.geographyKind === this.versionProps.geographyKind && this.shapes.universe === this.versionProps.universe && this.shapes.shapeType === this.shapeType) {\n            return this.shapes\n        }\n\n        const st = this.shapeType\n        assert(st !== undefined, 'Shape type must be set before loading shapes')\n\n        this.shapes = {\n            geographyKind: this.versionProps.geographyKind, universe: this.versionProps.universe, shapeType: st, data: (async () => {\n                return loadShapes(this.versionProps.geographyKind, this.versionProps.universe, st)\n            })() }\n\n        return this.shapes\n    }\n\n    async loadShapes(name: string): Promise<ActualShapeType> {\n        const mapShapes = this.getShapes()\n        const { nameToIndex, shapes } = await mapShapes.data\n        const index = nameToIndex.get(name)\n        assert(index !== undefined && index >= 0 && index < shapes.value.length, `Shape ${name} not found in ${mapShapes.geographyKind} for ${mapShapes.universe}`)\n        switch (shapes.type) {\n            case 'polygon':\n                return { type: 'polygon', value: shapes.value[index] as NormalizeProto<Feature> }\n            case 'point':\n                return { type: 'point', value: shapes.value[index] }\n        }\n    }\n\n    override async loadPolygon(name: string): Promise<NormalizeProto<Feature>> {\n        const res = await this.loadShapes(name)\n        assert(res.type === 'polygon', `Shape ${name} is not a polygon`)\n        return res.value\n    }\n\n    override async loadPoint(name: string): Promise<{ lon: number, lat: number }> {\n        const res = await this.loadShapes(name)\n        assert(res.type === 'point', `Shape ${name} is not a point`)\n        return res.value\n    }\n\n    override async computeShapesToRender(version: number): Promise<ShapeRenderingSpec> {\n        const stmts = this.versionProps.uss\n        if (stmts === undefined) {\n            return { shapes: [], zoomIndex: -1 }\n        }\n        const result = await executeAsync({ descriptor: { kind: 'mapper', geographyKind: this.versionProps.geographyKind, universe: this.versionProps.universe }, stmts })\n        if (version === this.version) {\n            this.versionProps.setErrors?.(result.error)\n        }\n        if (result.resultingValue === undefined) {\n            return { shapes: [], zoomIndex: -1 }\n        }\n        const mapResultMain = result.resultingValue.value\n        const st: ShapeType = mapResultMain.opaqueType === 'pMap' ? 'point' : 'polygon'\n        const label = mapResultMain.value.label\n        this.shapeType = st\n\n        // Handle different map types\n        let lineStyle: { color: { r: number, g: number, b: number, a: number }, weight: number } | undefined\n        let pointSizes: number[] | undefined\n\n        if (mapResultMain.opaqueType === 'cMap' || mapResultMain.opaqueType === 'cMapRGB') {\n            // For choropleth maps, use the outline\n            lineStyle = mapResultMain.value.outline\n        }\n        else {\n            const maxRadius = mapResultMain.value.maxRadius\n            const relativeArea = mapResultMain.value.relativeArea\n            pointSizes = relativeArea.map(area => Math.sqrt(area) * maxRadius)\n        }\n\n        const names = mapResultMain.value.geo\n        this.versionProps.basemapCallback(mapResultMain.value.basemap)\n        this.versionProps.insetsCallback(mapResultMain.value.insets)\n\n        // Generate CSV data and notify parent\n        const csvData = generateMapperCSVData(mapResultMain, result.context)\n        const csvFilename = `${this.versionProps.geographyKind}-${this.versionProps.universe}-data.csv`\n        this.versionProps.onCsvDataUpdate?.({ csvData, csvFilename })\n\n        let colors: string[]\n\n        if (mapResultMain.opaqueType === 'cMapRGB') {\n            // For RGB maps, use the RGB values directly\n            const rgbMap = mapResultMain.value\n            colors = rgbMap.dataR.map((r, i) => doRender({\n                r: r * 255,\n                g: rgbMap.dataG[i] * 255,\n                b: rgbMap.dataB[i] * 255,\n                a: 255,\n            }))\n            this.versionProps.rampCallback({ type: 'label', value: label })\n        }\n        else {\n            // For regular cMap, use ramp and scale\n            const cMap = mapResultMain.value\n            const ramp = cMap.ramp\n            const scale = instantiate(cMap.scale)\n            const interpolations = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1].map(scale.inverse)\n            this.versionProps.rampCallback({ type: 'ramp', value: { ramp, interpolations, scale, label, unit: mapResultMain.value.unit } })\n            const furthest = furthestColor(ramp.map(x => x[1]))\n            colors = cMap.data.map(\n                val => interpolateColor(ramp, scale.forward(val), furthest),\n            )\n        }\n        const specs = colors.map(\n            // no outline, set color fill, alpha=1\n            (color, i): ShapeSpec => {\n                switch (st) {\n                    case 'polygon':\n                        return {\n                            type: 'polygon',\n                            style: {\n                                fillColor: color,\n                                fillOpacity: 1,\n                                color: doRender(lineStyle!.color),\n                                weight: lineStyle!.weight,\n                            },\n                        }\n                    case 'point':\n                        return {\n                            type: 'point',\n                            style: {\n                                fillColor: color,\n                                fillOpacity: 1,\n                                radius: pointSizes![i],\n                            },\n                        }\n                }\n            },\n        )\n        const metas = mapResultMain.opaqueType === 'cMap' || mapResultMain.opaqueType === 'pMap'\n            ? mapResultMain.value.data.map((x) => { return { statistic: x } })\n            : mapResultMain.value.dataR.map((x, i) => { return { statistic: [x, mapResultMain.value.dataG[i], mapResultMain.value.dataB[i]] } })\n        return {\n            shapes: names.map((name, i) => ({\n                name,\n                spec: specs[i],\n                meta: metas[i],\n            })),\n            zoomIndex: -1,\n        }\n    }\n\n    override progressivelyLoadShapes(): boolean {\n        return false\n    }\n}\n\nfunction colorbarStyleFromBasemap(basemap: Basemap): React.CSSProperties {\n    switch (basemap.type) {\n        case 'osm':\n            return { }\n        case 'none':\n            return { backgroundColor: basemap.backgroundColor, color: basemap.textColor }\n    }\n}\n\nfunction Colorbar(props: { ramp: RampToDisplay | undefined, basemap: Basemap }): ReactNode {\n    // do this as a table with 10 columns, each 10% wide and\n    // 2 rows. Top one is the colorbar, bottom one is the\n    // labels.\n    const valuesRef = useRef<HTMLDivElement>(null)\n    const shouldRotate: boolean = useSyncExternalStore(onWidthChange, () => {\n        if (valuesRef.current === null) {\n            return false\n        }\n        const current = valuesRef.current\n        const containers = current.querySelectorAll('.containerOfXticks')\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of -- this isn't a loop over an array\n        for (let i = 0; i < containers.length; i++) {\n            const container = containers[i] as HTMLDivElement\n            const contained: HTMLDivElement | null = container.querySelector('.containedOfXticks')\n            if (contained === null) {\n                continue\n            }\n            if (contained.offsetWidth > container.offsetWidth * 0.9) {\n                return true\n            }\n        }\n        return false\n    })\n\n    const furthest = useMemo(() => props.ramp === undefined || props.ramp.type !== 'ramp' ? undefined : furthestColor(props.ramp.value.ramp.map(x => x[1])), [props.ramp])\n\n    if (props.ramp === undefined) {\n        return <div></div>\n    }\n\n    if (props.ramp.type === 'label') {\n        return (\n            <div className=\"centered_text\" style={colorbarStyleFromBasemap(props.basemap)}>\n                {props.ramp.value}\n            </div>\n        )\n    }\n\n    const ramp = props.ramp.value.ramp\n    const scale = props.ramp.value.scale\n    const label = props.ramp.value.label\n    const values = props.ramp.value.interpolations\n    const unit = props.ramp.value.unit\n    const style = colorbarStyleFromBasemap(props.basemap)\n\n    const createValue = (stat: number): ReactNode => {\n        return (\n            <div className=\"centered_text\" style={style}>\n                <Statistic\n                    statname={label}\n                    value={stat}\n                    isUnit={false}\n                    unit={unit}\n                />\n                <Statistic\n                    statname={label}\n                    value={stat}\n                    isUnit={true}\n                    unit={unit}\n                />\n            </div>\n        )\n    }\n\n    const width = `${100 / values.length}%`\n\n    const valuesDivs = (rotate: boolean): ReactNode[] => values.map((x, i) => (\n        <div\n            key={i}\n            style={{\n                width,\n                // height: rotate ? '2em' : '1em',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n            }}\n            className=\"containerOfXticks\"\n        >\n            <div\n                style={{\n                    // transform: rotate ? 'rotate(-45deg)' : 'none',\n                    writingMode: rotate ? 'sideways-lr' : 'horizontal-tb',\n                    padding: rotate ? '0.5em' : '0',\n                    // transformOrigin: 'center',\n                    // whiteSpace: 'nowrap',\n                    // fontSize: rotate ? '0.8em' : '1em',\n                }}\n                className=\"containedOfXticks\"\n            >\n                {createValue(x)}\n            </div>\n        </div>\n    ))\n\n    return (\n        <div style={{ ...style, position: 'relative' }}>\n            <div style={{ display: 'flex', width: '100%' }}>\n                {\n                    values.map((x, i) => (\n                        <div\n                            key={i}\n                            style={{\n                                width, height: '1em',\n                                backgroundColor: interpolateColor(ramp, scale.forward(x), furthest),\n                                marginLeft: '1px',\n                                marginRight: '1px',\n                            }}\n                        >\n                        </div>\n                    ))\n                }\n            </div>\n            <div ref={valuesRef} style={{ position: 'absolute', top: 0, left: 0, display: 'flex', width: '100%', visibility: 'hidden' }}>{valuesDivs(false)}</div>\n            <div style={{ display: 'flex', width: '100%' }}>{valuesDivs(shouldRotate)}</div>\n            <div className=\"centered_text\">\n                {label}\n            </div>\n        </div>\n    )\n}\n\ninterface MapComponentProps {\n    geographyKind: typeof valid_geographies[number]\n    universe: Universe\n    mapRef?: React.RefObject<DisplayedMap>\n    uss: UrbanStatsASTStatement | undefined\n    setErrors?: (errors: EditorError[]) => void\n    colorbarRef?: React.RefObject<HTMLDivElement>\n    editInsets?: EditInsets\n    overrideInsets?: Insets\n    onCsvDataUpdate?: (csvExportData: CSVExportData) => void\n}\n\ninterface EmpiricalRamp {\n    ramp: Keypoints\n    scale: ScaleInstance\n    interpolations: number[]\n    label: string\n    unit?: UnitType\n}\n\nfunction MapComponent(props: MapComponentProps): ReactNode {\n    const [empiricalRamp, setEmpiricalRamp] = useState<RampToDisplay | undefined>(undefined)\n    const [basemap, setBasemap] = useState<Basemap>({ type: 'osm' })\n\n    const [currentInsets, setCurrentInsets] = useState<Insets>(loadInset(props.universe))\n\n    const aspectRatio = computeAspectRatioForInsets(currentInsets)\n\n    return (\n        <div style={{\n            display: 'flex',\n            flexDirection: 'column',\n        }}\n        >\n            <div style={{ height: '90%', width: '100%' }}>\n                <DisplayedMap\n                    geographyKind={props.geographyKind}\n                    universe={props.universe}\n                    rampCallback={(newRamp) => { setEmpiricalRamp(newRamp) }}\n                    basemapCallback={(newBasemap) => { setBasemap(newBasemap) }}\n                    insetsCallback={(newInsets) => { setCurrentInsets(newInsets) }}\n                    ref={props.mapRef}\n                    uss={props.uss}\n                    height={{ type: 'aspect-ratio', value: aspectRatio }}\n                    attribution=\"startVisible\"\n                    basemap={basemap}\n                    setErrors={props.setErrors}\n                    colors={useColors()}\n                    insets={props.overrideInsets ?? currentInsets}\n                    key={stableStringify({ currentInsets, editInsets: !!props.editInsets })}\n                    editInsets={props.editInsets}\n                    onCsvDataUpdate={props.onCsvDataUpdate}\n                    dropEmptyInsets={props.editInsets === undefined}\n                />\n            </div>\n            <div style={{ height: '8%', width: '100%' }} ref={props.colorbarRef}>\n                <Colorbar\n                    ramp={empiricalRamp}\n                    basemap={basemap}\n                />\n            </div>\n        </div>\n    )\n}\n\nfunction saveAsFile(filename: string, data: string | Blob, type: string): void {\n    const blob = typeof data === 'string' ? new Blob([data], { type }) : data\n    const url = URL.createObjectURL(blob)\n    const link = document.createElement('a')\n    link.href = url\n    link.download = filename\n    document.body.appendChild(link)\n    link.click()\n    document.body.removeChild(link)\n}\n\nfunction Export(props: { mapRef: React.RefObject<DisplayedMap>, colorbarRef: React.RefObject<HTMLDivElement> }): ReactNode {\n    const colors = useColors()\n\n    const exportAsPng = async (): Promise<void> => {\n        if (props.mapRef.current === null) {\n            return\n        }\n        const colorbarElement = props.colorbarRef.current ?? undefined\n        const pngDataUrl = await props.mapRef.current.exportAsPng(colorbarElement, colors.background, colors.mapInsetBorderColor)\n        const data = await fetch(pngDataUrl)\n        const pngData = await data.blob()\n        saveAsFile('map.png', pngData, 'image/png')\n    }\n\n    const exportAsGeoJSON = async (): Promise<void> => {\n        if (props.mapRef.current === null) {\n            return\n        }\n        const geojson = await props.mapRef.current.exportAsGeoJSON()\n        saveAsFile('map.geojson', geojson, 'application/geo+json')\n    }\n\n    return (\n        <div style={{\n            display: 'flex',\n            gap: '0.5em',\n            margin: '0.5em 0',\n        }}\n        >\n            <button onClick={() => {\n                void exportAsPng()\n            }}\n            >\n                Export as PNG\n            </button>\n            <button onClick={() => {\n                void exportAsGeoJSON()\n            }}\n            >\n                Export as GeoJSON\n            </button>\n            <button onClick={() => {\n                // eslint-disable-next-line no-restricted-syntax -- We're opening a new window here\n                const params = new URLSearchParams(window.location.search)\n                params.set('view', 'true')\n                // navigate to the page in a new tab\n                window.open(`?${params.toString()}`, '_blank')\n            }}\n            >\n                View as Zoomable Page\n            </button>\n        </div>\n    )\n}\n\nexport function MapperPanel(props: { mapSettings: MapSettings, view: boolean, counts: CountsByUT }): ReactNode {\n    const [csvExportData, setCsvExportData] = useState<CSVExportData | undefined>(undefined)\n\n    const onCsvDataUpdate = useCallback((data: CSVExportData) => {\n        setCsvExportData(data)\n    }, [])\n\n    if (props.view) {\n        return <MapComponentWrapper {...props.mapSettings} uss={computeUSS(props.mapSettings.script)} onCsvDataUpdate={onCsvDataUpdate} />\n    }\n\n    return <EditMapperPanel {...props} onCsvDataUpdate={onCsvDataUpdate} csvExportData={csvExportData} />\n}\n\nfunction MapComponentWrapper(props: Omit<MapComponentProps, 'universe' | 'geographyKind'> & { universe: MapComponentProps['universe'] | undefined, geographyKind: MapComponentProps['geographyKind'] | undefined, onCsvDataUpdate?: (csvExportData: CSVExportData) => void }): ReactNode {\n    return (props.geographyKind === undefined || props.universe === undefined)\n        ? <DisplayResults results={[{ kind: 'error', type: 'error', value: 'Select a Universe and Geography Kind', location: noLocation }]} editor={false} />\n        : (\n                <MapComponent\n                    {...props}\n                    geographyKind={props.geographyKind}\n                    universe={props.universe}\n                    onCsvDataUpdate={props.onCsvDataUpdate}\n                />\n            )\n}\n\ntype MapEditorMode = 'uss' | 'insets'\n\nfunction EditMapperPanel(props: { mapSettings: MapSettings, counts: CountsByUT, onCsvDataUpdate: (csvExportData: CSVExportData) => void, csvExportData?: CSVExportData }): ReactNode {\n    const [mapSettings, setMapSettings] = useState(props.mapSettings)\n\n    const [mapEditorMode, setMapEditorMode] = useState<MapEditorMode>('uss')\n\n    const selectionContext = useMemo(() => new Property<Selection | undefined>(undefined), [])\n\n    const undoRedo = useUndoRedo(\n        mapSettings,\n        selectionContext.value,\n        setMapSettings,\n        (selection) => {\n            selectionContext.value = selection\n        },\n        {\n            undoChunking: TestUtils.shared.isTesting ? 2000 : 1000,\n            // Prevent keyboard shortcusts when in insets editing mode, since insets has its own undo stack\n            onlyElement: mapEditorMode === 'insets' ? { current: null } : undefined,\n        },\n    )\n\n    const { updateCurrentSelection, addState } = undoRedo\n\n    const setMapSettingsWrapper = useCallback((newSettings: MapSettings): void => {\n        setMapSettings(newSettings)\n        addState(newSettings, selectionContext.value)\n    }, [selectionContext, addState])\n\n    const firstEffect = useRef(true)\n\n    useEffect(() => {\n        if (firstEffect.current) {\n            // Otherwise we add an undo state immediately\n            firstEffect.current = false\n        }\n        else {\n            // So that map settings are updated when the prop changes\n            setMapSettingsWrapper(props.mapSettings)\n            setMapEditorMode('uss')\n        }\n    }, [props.mapSettings, setMapSettingsWrapper])\n\n    const jsonedSettings = JSON.stringify({\n        ...mapSettings,\n        script: {\n            uss: unparse(mapSettings.script.uss),\n        },\n    })\n\n    const navContext = useContext(Navigator.Context)\n\n    useEffect(() => {\n        if (props.mapSettings !== mapSettings) {\n            // gzip then base64 encode\n            const encodedSettings = gzipSync(jsonedSettings).toString('base64')\n            navContext.setMapperSettings(encodedSettings)\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- props.view won't be set except from the navigator\n    }, [jsonedSettings, navContext])\n\n    const headerTextClass = useHeaderTextClass()\n\n    const typeEnvironment = useMemo(() => defaultTypeEnvironment(mapSettings.universe), [mapSettings.universe])\n\n    // Update current selection when it changes\n    useEffect(() => {\n        const observer = (): void => {\n            updateCurrentSelection(selectionContext.value)\n        }\n\n        selectionContext.observers.add(observer)\n        return () => { selectionContext.observers.delete(observer) }\n    }, [selectionContext, updateCurrentSelection])\n\n    const commonProps: CommonEditorProps = {\n        mapSettings,\n        setMapSettings: setMapSettingsWrapper,\n        typeEnvironment,\n        setMapEditorMode,\n        onCsvDataUpdate: props.onCsvDataUpdate,\n    }\n\n    return (\n        <PageTemplate csvExportData={props.csvExportData}>\n            <SelectionContext.Provider value={selectionContext}>\n                <div className={headerTextClass}>Urban Stats Mapper (beta)</div>\n                {mapEditorMode === 'insets' ? <InsetsMapEditor {...commonProps} /> : <USSMapEditor {...commonProps} counts={props.counts} />}\n                {mapEditorMode !== 'insets' ? undoRedo.ui : undefined /* Insets editor has its own undo stack */}\n            </SelectionContext.Provider>\n        </PageTemplate>\n    )\n}\n\ninterface CommonEditorProps {\n    mapSettings: MapSettings\n    setMapSettings: (s: MapSettings) => void\n    typeEnvironment: TypeEnvironment\n    setMapEditorMode: (m: MapEditorMode) => void\n    onCsvDataUpdate: (csvExportData: CSVExportData) => void\n}\n\nfunction USSMapEditor({ mapSettings, setMapSettings, counts, typeEnvironment, setMapEditorMode, onCsvDataUpdate }: CommonEditorProps & { counts: CountsByUT }): ReactNode {\n    const [errors, setErrors] = useState<EditorError[]>([])\n\n    const mapRef = useRef<DisplayedMap>(null)\n    const colorbarRef = useRef<HTMLDivElement>(null)\n\n    const [uss, setUSS] = useState<UrbanStatsASTStatement | undefined>(undefined)\n\n    useEffect(() => {\n        const result = computeUSS(mapSettings.script)\n        const parseErrors = getAllParseErrors(result)\n        if (parseErrors.length > 0) {\n            setErrors(parseErrors.map(e => ({ ...e, kind: 'error' })))\n        }\n        setUSS(parseErrors.length > 0 ? undefined : result)\n    }, [mapSettings])\n\n    return (\n        <>\n            <MapperSettings\n                mapSettings={mapSettings}\n                setMapSettings={setMapSettings}\n                errors={errors}\n                counts={counts}\n                typeEnvironment={typeEnvironment}\n            />\n            <div style={{ display: 'flex', justifyContent: 'space-between', gap: '0.5em' }}>\n                <Export\n                    mapRef={mapRef}\n                    colorbarRef={colorbarRef}\n                />\n                {\n                    getInsets(mapSettings, typeEnvironment) && (\n                        <div style={{\n                            display: 'flex',\n                            gap: '0.5em',\n                            margin: '0.5em 0',\n                        }}\n                        >\n                            <button onClick={() => { setMapEditorMode('insets') }}>\n                                Edit Insets\n                            </button>\n                        </div>\n                    )\n                }\n                <ImportExportCode\n                    mapSettings={mapSettings}\n                    setMapSettings={setMapSettings}\n                />\n            </div>\n            <MapComponentWrapper\n                geographyKind={mapSettings.geographyKind}\n                universe={mapSettings.universe}\n                uss={uss}\n                mapRef={mapRef}\n                setErrors={setErrors}\n                colorbarRef={colorbarRef}\n                onCsvDataUpdate={onCsvDataUpdate}\n            />\n        </>\n\n    )\n}\n\nfunction InsetsMapEditor({ mapSettings, setMapSettings, typeEnvironment, setMapEditorMode, onCsvDataUpdate }: CommonEditorProps): ReactNode {\n    const colors = useColors()\n\n    const [insetEdits, setInsetEdits] = useState<InsetEdits>(new Map())\n\n    const { addState, ui: undoRedoUi } = useUndoRedo(insetEdits, undefined, setInsetEdits, () => undefined)\n\n    const insetsProps = useMemo(() => getInsets(mapSettings, typeEnvironment)!.map(inset => new Property(inset)), [mapSettings, typeEnvironment])\n\n    useEffect(() => {\n        const baseInsets = getInsets(mapSettings, typeEnvironment)!\n        for (const [i, insetProp] of insetsProps.entries()) {\n            insetProp.value = { ...baseInsets[i], ...insetEdits.get(i) }\n        }\n    }, [insetEdits, insetsProps, mapSettings, typeEnvironment])\n\n    return (\n        <>\n            <div style={{\n                backgroundColor: colors.slightlyDifferentBackgroundFocused,\n                borderRadius: '5px',\n                padding: '10px',\n                margin: '10px 0',\n                display: 'flex',\n                justifyContent: 'space-between',\n                gap: '0.5em',\n            }}\n            >\n                <div>\n                    <b>Editing Insets.</b>\n                    {' '}\n                    Pans and zooms to maps will be reflected permanently. Drag inset frames to reposition and resize.\n                </div>\n                <div style={{ display: 'flex', gap: '10px' }}>\n\n                    <button onClick={() => { setMapEditorMode('uss') }}>\n                        Cancel\n                    </button>\n                    <button\n                        onClick={() => {\n                            setMapSettings({ ...mapSettings, script: { uss: doEditInsets(mapSettings, insetEdits, typeEnvironment) } })\n                            setMapEditorMode('uss')\n                        }}\n                        disabled={insetEdits.size === 0}\n                    >\n                        Accept\n                    </button>\n                </div>\n            </div>\n            <MapComponentWrapper\n                geographyKind={mapSettings.geographyKind}\n                universe={mapSettings.universe}\n                uss={computeUSS(mapSettings.script)}\n                editInsets={{\n                    doEdit: (i, e) => {\n                        setInsetEdits((edits) => {\n                            const newEdits = new Map(edits)\n                            newEdits.set(i, { ...newEdits.get(i), ...e })\n                            addState(newEdits, undefined)\n                            return newEdits\n                        })\n                    },\n                    subscribeChanges: insetsProps,\n                }}\n                onCsvDataUpdate={onCsvDataUpdate}\n            />\n            {undoRedoUi}\n        </>\n    )\n}\n","export const cancelled = Symbol()\n\nexport function uploadFile(accept: string): Promise<File | typeof cancelled> {\n    const inputElement = document.createElement('input')\n    inputElement.setAttribute('type', 'file')\n    inputElement.setAttribute('accept', accept)\n    inputElement.style.display = 'none'\n    const result = new Promise<File | typeof cancelled>((resolve) => {\n        inputElement.onchange = () => {\n            resolve(inputElement.files![0])\n            inputElement.remove()\n        }\n        inputElement.oncancel = () => {\n            resolve(cancelled)\n            inputElement.remove()\n        }\n    })\n\n    document.body.appendChild(inputElement)\n    inputElement.click()\n\n    return result\n}\n"],"names":["Statistic","props","statname","_props_unit","useImperial","_useSetting","temperatureUnit","_useSetting1","_unitDisplay_renderValue","getUnitDisplay","unitType","value","separateNumber","unitName","adjustedValue","places","unit","rendered","ElectionResult","hours","Math","minutes","colors","useColors","text","party","partyColor","Percentile","ordinal","percentile","undefined","ImportExportCode","param","mapSettings","setMapSettings","file","importResult","uploadFile","cancelled","importMapSettings","alert","saveAs","Blob","unparse","metadataSchema","z","mapperMetaFields","fileContent","parsed","parse","error","renderLocInfo","metadata","meta","args","_iteratorError","arg","metadataResult","Object","issue","defaultSettings","convertToMapUss","settingNameStyle","MapperSettings","errors","counts","typeEnvironment","uss","renderString","useCallback","universe","universes","useMemo","universes_ordered","geographyKinds","articleTypes","BetterSelector","newUniverse","newGeographyKind","TopLevelEditor","newUss","neswSchema","l","insetSchema","screenBounds","mapBounds","mainMap","name","constructInsetsSchema","call","mapInsetsSchema","idOutput","validMapperOutputs","_insetArg_currentValue","insetArg","literalInsets","getInsets","settings","parseResult","e","loadInset","DisplayedMap","shouldHaveLoadingSpinner","getShapes","st","assert","geographyKind","idxLink","articles","universeIdx","shapes","longnames","features","i","loadProtobuf","consolidatedShapeLink","Map","r","indexLink","loadCentroids","centroids","c","Error","loadShapes","mapShapes","_ref","nameToIndex","index","loadPolygon","res","loadPoint","computeShapesToRender","version","_this_versionProps","stmts","result","_this_versionProps1","mapResultMain","label","lineStyle","pointSizes","maxRadius","names","csvData","csvFilename","rgbMap","cMap","ramp","scale","interpolations","furthest","specs","metas","executeAsync","relativeArea","area","generateMapperCSVData","doRender","instantiate","furthestColor","x","val","interpolateColor","color","progressivelyLoadShapes","MapGeneric","colorbarStyleFromBasemap","basemap","Colorbar","valuesRef","useRef","shouldRotate","useSyncExternalStore","onWidthChange","containers","current","container","contained","values","style","width","valuesDivs","rotate","MapComponent","_props_overrideInsets","_useState","empiricalRamp","setEmpiricalRamp","_useState1","setBasemap","_useState2","currentInsets","setCurrentInsets","aspectRatio","computeAspectRatioForInsets","newRamp","newBasemap","newInsets","stableStringify","saveAsFile","filename","data","type","blob","url","URL","link","document","Export","_props_colorbarRef_current","colorbarElement","fetch","a","params","URLSearchParams","window","MapperPanel","csvExportData","setCsvExportData","onCsvDataUpdate","MapComponentWrapper","computeUSS","EditMapperPanel","DisplayResults","noLocation","mapEditorMode","setMapEditorMode","selectionContext","Property","undoRedo","useUndoRedo","selection","TestUtils","updateCurrentSelection","addState","setMapSettingsWrapper","newSettings","firstEffect","useEffect","jsonedSettings","JSON","navContext","useContext","Navigator","encodedSettings","gzipSync","headerTextClass","useHeaderTextClass","defaultTypeEnvironment","observer","commonProps","PageTemplate","SelectionContext","InsetsMapEditor","USSMapEditor","setErrors","mapRef","colorbarRef","setUSS","parseErrors","getAllParseErrors","insetEdits","setInsetEdits","_useUndoRedo","undoRedoUi","insetsProps","inset","baseInsets","insetProp","doEditInsets","edits","mapInsets","currentInsetsAst","loadInsetExpression","partialInset","insets","deconstruct","newEdits","Symbol","accept","inputElement","Promise","resolve"],"mappings":"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"}